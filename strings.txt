{
    "Strings": [
        "prototype",
        "@@array@@",
        "arguments",
        "child",
        "active",
        "instance_destroy",
        "i",
        "save_count",
        "",
        "file_array",
        "*.sav",
        "file_find_first",
        "tid",
        "file_find_next",
        "ini_open",
        "mission_progress",
        "Mission Completion",
        "ini_read_real",
        "tmission_progress",
        "total_time",
        "tgame_time",
        "mission_name",
        "tdone",
        "j",
        "ach_number",
        "achievement[",
        "string",
        "]",
        "Achievement Completion",
        "hard_mode",
        "Hard Mode",
        "ini_close",
        "file_find_close",
        "argument0",
        "tsecond",
        "tminute",
        "thour",
        "0",
        " ",
        "string_format",
        ":",
        "string_replace_all",
        "tstring",
        "view_xview",
        "view_wview",
        "tx_unit",
        "argument1",
        "view_yview",
        "view_hview",
        "ty_unit",
        "window_get_height",
        "window_get_width",
        "window_mouse_set",
        "argument",
        "_surface",
        "_x_position",
        "_y_position",
        "_axis",
        "_wavelength",
        "_amplitude",
        "_animation_phase",
        "_pixels",
        "_bleeding",
        "surface_get_width",
        "_width",
        "surface_get_height",
        "_height",
        "_size",
        "_i",
        "sin",
        "_shift",
        "_shift_x",
        "_shift_y",
        "draw_surface_part",
        "drawn",
        "argument6",
        "torder",
        "_x1",
        "_y1",
        "argument2",
        "_x2",
        "argument3",
        "_y2",
        "argument4",
        "_x3",
        "argument5",
        "_y3",
        "power",
        "A",
        "B",
        "D",
        "Bm",
        "a",
        "b",
        "c",
        "tsep",
        "max",
        "min",
        "w",
        "point",
        "draw_line",
        "spark_pos",
        "spark_x",
        "spark_y",
        "abs",
        "is_custom",
        "achievement",
        "tindex",
        "snd_play",
        "give_soul",
        "active_save",
        "ini_write_real",
        "steam_initialised",
        "steam_get_achievement",
        "steam_set_achievement",
        "Розблоковано досягнення: ",
        "show_debug_message",
        "y",
        "x",
        "instance_create",
        "ti",
        "index",
        "ACH_CONQUEST",
        "add_achievement",
        "apt_unlocked",
        "apt_unlocked[",
        "thottest_val",
        "thottest",
        "instance_place",
        "id",
        "share_list",
        "ds_list_find_index",
        "bbox_bottom",
        "bbox_right",
        "bbox_top",
        "bbox_left",
        "rectangle_in_rectangle",
        "heat",
        "tv",
        "ds_list_size",
        "ds_list_find_value",
        "t1",
        "t2",
        "ds_list_add",
        "zone_update",
        "ds_list_delete",
        "can_hear",
        "event_perform",
        "txstart",
        "tystart",
        "txend",
        "tyend",
        "tseg",
        "theta",
        "dtheta",
        "tamp",
        "tcolor",
        "talpha",
        "point_direction",
        "td",
        "point_distance",
        "tl",
        "draw_primitive_begin",
        "tnormal",
        "tl_short",
        "lengthdir_y",
        "degtorad",
        "lengthdir_x",
        "draw_vertex_colour",
        "draw_primitive_end",
        "new_save",
        "reset_stats_all",
        "ds_list_create",
        "primary_list",
        "second_list",
        "Weapon",
        "ini_read_string",
        "ds_list_read",
        "primary_pref",
        "second_pref",
        "s",
        "mission[",
        ",",
        "mission_finished",
        "cheat",
        "mission_star[",
        "mission_star",
        "cassette_number",
        "cassette_unlocked[",
        "cassette_unlocked",
        "souls",
        "total_deaths",
        "var1",
        "open",
        "target_len_max",
        "lock_count_max",
        "lock_count",
        "target_dir_dev",
        "target_len_dev",
        "target_radius",
        "windowed",
        "window_set_fullscreen",
        "init_screen",
        "Prefs.ini",
        "has_seen_custom",
        "Settings",
        "dieg_on",
        "master_gain",
        "music_gain",
        "vsync",
        "interp",
        "graphics",
        "no_flash",
        "Save1.ini",
        "lamp_on",
        "Apartment Settings",
        "gore_on",
        "chand_on",
        "music_on",
        "key_number",
        "control",
        "control[",
        "Керування",
        "control_gamepad",
        "control_gamepad[",
        "refresh_control_string",
        "audio_master_gain",
        "display_reset",
        "refresh_screen",
        "ini_write_string",
        "active_music_name",
        "audio_is_playing",
        "audio_sound_gain",
        "tr",
        "collision_line",
        "image_alpha",
        "direction",
        "angle_diff",
        "cone",
        "vertex_count",
        "vertex_grid",
        "ds_grid_set",
        "vertex_count_max",
        "ds_grid_resize",
        "to",
        "tw",
        "tx",
        "ty",
        "image_yscale",
        "timage_yscale",
        "object_index",
        "tid_new",
        "image_xscale",
        "no_vertex",
        "add_vertex",
        "refresh_lights",
        "baked",
        "nt",
        "hash_offset",
        "M",
        "string_width",
        "ts",
        "found_col",
        "last_space",
        "current_char",
        "jj",
        "string_length",
        "string_char_at",
        "&",
        "#",
        "string_insert",
        "cx",
        "cy",
        "r",
        "theta1",
        "theta2",
        "prec",
        "draw_vertex",
        "dir",
        "kk",
        "draw_sprite",
        "stat_time_run",
        "stat_time_run_save",
        "current_room_string",
        "room_string",
        "Loading MAP: ",
        "fill_left",
        "fill_right",
        "instance_deactivate_object",
        "instance_nearest",
        "instance_activate_object",
        "x1",
        "y1",
        "x2",
        "y2",
        "test_obj",
        "ignored_instances",
        "dx",
        "dy",
        "slope_xy",
        "slope_yx",
        "offset_xy",
        "offset_yx",
        "colliding_instance_count",
        "left",
        "right",
        "top",
        "bottom",
        "collision_rectangle",
        "object_is_ancestor",
        "ignored",
        "array_length_1d",
        "colliding_instances",
        "check_left",
        "check_right",
        "check_top",
        "check_bottom",
        "best_instance",
        "sqr",
        "best_distance_squared",
        "result_x",
        "result_y",
        "did_hit",
        "hit_x",
        "hit_y",
        "collision_point",
        "distance_squared",
        "result",
        "srch",
        "&!&",
        "&b&",
        "&y&",
        "&r&",
        "&dk&",
        "dif",
        "median",
        "string_count",
        "hashcount",
        "string_current",
        "iii",
        "string_pos",
        "string_copy",
        "str_line",
        "hhh",
        "! ",
        "colcount",
        "str_col",
        "string_replace",
        "dcol",
        "string_repeat",
        "dtext",
        "g",
        "or",
        "bl",
        "lt",
        "dk",
        "p",
        "gr",
        "make_color_rgb",
        "current_width",
        "!",
        "draw_text",
        "draw_get_alpha",
        "real",
        "draw_text_colour",
        "obj",
        "notme",
        "first_instance",
        "instance",
        "collision_x",
        "collision_y",
        "d3d_set_fog",
        "image_angle",
        "sprite_index",
        "draw_sprite_ext",
        "argument7",
        "argument8",
        "pause_sprite",
        "sprite_delete",
        "return_xview",
        "return_yview",
        "audio_resume_sound",
        "active_music_namelp",
        "room_return_to",
        "room_goto",
        "room_persistent",
        "room",
        "application_surface",
        "sprite_create_from_surface",
        "audio_pause_sound",
        "running",
        "foot",
        "image_index",
        "floor",
        "team",
        "player",
        "radius",
        "alert",
        "one_target",
        "tsoft",
        "random_range",
        "choose",
        "snd_play_ext",
        "shake",
        "hsp",
        "sprite_run",
        "run_image_speed",
        "image_speed",
        "sprite_door",
        "run_speed",
        "th",
        "sprite_walk",
        "sprite_idle",
        "walk_speed",
        "move_left",
        "instance_exists",
        "type",
        "voice_index",
        "parent",
        "voice_rate",
        "rate",
        "count_max",
        "debug_on",
        "draw_set_alpha",
        "draw_set_color",
        "Попередження: ",
        "Знайдено: ",
        "has_searched",
        "target_y",
        "target_x",
        "draw_circle",
        "aim_target_y",
        "aim_target_x",
        "hurt_dir",
        "draw_arrow",
        "path",
        "draw_path",
        "force_death",
        "stat_kills",
        "enemy_count",
        "tactual_y",
        "collision_line_advanced",
        "headshot",
        "ach_stat_headshot",
        "body_list",
        "ds_list_destroy",
        "trait_list",
        "bstep_default",
        "use",
        "use_alt",
        "ds_list_shuffle",
        "kb_value",
        "head_x",
        "sprite_height",
        "head_y",
        "head_xscale",
        "last_hp",
        "hp",
        "will_alert",
        "reaction_time",
        "bullets",
        "bullets_max",
        "arm_speed",
        "state",
        "free",
        "reload_sound",
        "active_reactor",
        "object_get_parent",
        "move_right",
        "no_door",
        "switch_id",
        "elevator_id",
        "round",
        "image_number",
        "sprite_reload",
        "weapon_current",
        "weapon",
        "crouching",
        "sprite_crouch",
        "sight_range",
        "sprite_sleep",
        "sprite_sit",
        "random",
        "sprite_smoke",
        "step_default",
        "shoot",
        "tis_lit",
        "tlight_id",
        "tlight_with_switch",
        "zone_heat",
        "tic",
        "default_off",
        "bottom_y",
        "in_dark",
        "night_vision",
        "trange_body",
        "sign",
        "alert_counter",
        "trange_op",
        "tnat",
        "ta",
        "reaction",
        "dont_alert",
        "voice",
        "alert_x",
        "alert_y",
        "ach_stat_seen",
        "var2",
        "xstart",
        "aiming",
        "path_find",
        "zone_find",
        "tzone",
        "trait",
        "shoot_pressed",
        "tstair",
        "tsign",
        "find_cover_nearest",
        "tcover",
        "sprite_width",
        "tcover_x",
        "tcover_y",
        "timer",
        "alert_timer",
        "choose_trait",
        "shoot_range",
        "tc",
        "alarm",
        "init_default",
        "name",
        "no_cover",
        "no_kb",
        "no_headshot",
        "no_hearing",
        "hearing_amp",
        "path_add",
        "kb_immune_dur",
        "gib",
        "wander",
        "teleport_target_x",
        "teleport_target_y",
        "teleport_distance",
        "down_timer",
        "focus_object",
        "force_stun",
        "melee_death",
        "ttype",
        "talert_range",
        "timp_amount",
        "tlight",
        "tcasing",
        "arm_index",
        "stat_bullets_fired",
        "pierce",
        "damage",
        "headshot_mult",
        "damage_max",
        "imp_amount",
        "arm_angle",
        "recoil",
        "life_limit",
        "image_blend",
        "physics_apply_local_impulse",
        "controller_shake",
        "tcount",
        "tbullet",
        "tcone",
        "fire_bullet",
        "sp",
        "base_string",
        "Idle",
        "asset_get_index",
        "Walk",
        "Crouch",
        "Climb",
        "sprite_climb",
        "ClimbOver",
        "sprite_climb_over",
        "Run",
        "Jump",
        "sprite_jump",
        "Aim",
        "sprite_aim",
        "AimClimb",
        "sprite_aim_climb",
        "Aim2H",
        "AimClimb2H",
        "AimCrouch",
        "sprite_aim_crouch",
        "Fire",
        "sprite_fire",
        "Smash",
        "1",
        "sprite_smash1",
        "2",
        "sprite_smash2",
        "Hit",
        "sprite_hit",
        "Sit",
        "Sleep",
        "Smoke",
        "Reload",
        "Roll",
        "sprite_roll",
        "weapon_other",
        "bullets_other",
        "swap_weapons",
        "o",
        "tdrop",
        "change_sprite",
        "burst",
        "arm_yo",
        "arm_xo",
        "tarm_angle",
        "arm_check_iteration",
        "arm_check_angle",
        "rotate_direction",
        "arm_l",
        "arm_yscale",
        "txo",
        "tyo",
        "rotate_arm",
        "fire_shotgun",
        "alpha_decay",
        "phy_speed_x",
        "phy_speed_y",
        "damage_gib",
        "phy_rotation",
        "active_arm",
        "check",
        "phy_angular_velocity",
        "on_fire",
        "jump_speed",
        "hp_max",
        "sP",
        "arm_xo_stand",
        "arm_yo_stand",
        "arm_xo_stand_2h",
        "arm_yo_stand_2h",
        "enemy",
        "sprite_mask",
        "sprite_mask_crouch",
        "no_ragdoll",
        "rolling",
        "climbing",
        "vsp",
        "jumps",
        "grav",
        "move_up",
        "move_up_pressed",
        "move_down",
        "move_stairs",
        "last_state",
        "last_frame",
        "body_angle",
        "active_stair",
        "active_fire",
        "blood_type",
        "hurt_force",
        "hurt_x",
        "hurt_y",
        "place_meeting",
        "vsp_last",
        "target",
        "mask_index",
        "sprite_get_height",
        "sprite_get_yoffset",
        "sprite_yoffset",
        "start_walking",
        "walk_x",
        "run_or_walk",
        "delay",
        "depth",
        "light",
        "lerp",
        "tcoeff",
        "use_reactor",
        "use_reactor_alt",
        "hsp_max",
        "object_get_depth",
        "cover_list",
        "sprite_get_number",
        "change_weapons",
        "wep_slot",
        "sprite_exists",
        "stun_dur",
        "motion",
        "shoot_pressed_default",
        "shoot_default",
        "stat_deaths",
        "stat_bullets_headshot",
        "stat_bullets_missed",
        "stat_time",
        "ach_stat_revive",
        "ach_stat_trap_kill",
        "debug",
        "is_last_level",
        "can_hard",
        "Розблокований Пекельний режим! Доступний в 'Новій грі'",
        "tip",
        "souls_gained",
        "stage_progress",
        "objective_list",
        "instance_number",
        "Рівень зачищено. Повертайтеся до вашої &y&машини.&!&",
        "quest",
        "Continue to the &y&exit.&!&",
        "stage_cleared",
        "objective",
        "audio_listener_orientation",
        "hoopter",
        "sound_get_name",
        "tname",
        "load_sound",
        "audio_sound_pitch",
        "audio_play_sound",
        "tsound",
        "jjj",
        "string_key",
        "string_mouse",
        "Колесико вверх",
        "Колесико вниз",
        "string_gamepad",
        "string_stick",
        "gamepad_on",
        "use_key",
        "use_alt_key",
        "stair_key",
        "$$$$temp$$$$",
        "Лівий стік",
        "Правий стік",
        "??",
        "&g&(A)&!&",
        "&r&(B)&!&",
        "&b&(X)&!&",
        "&y&(Y)&!&",
        "Лівий бампер",
        "Правий бампер",
        "Лівий тригер",
        "Правий тригер",
        "Select",
        "Start",
        "Лівий стік",
        "Правий стік",
        "Pad Up",
        "Pad Down",
        "Pad Left",
        "Pad Right",
        "ENTER",
        "SHIFT",
        "CTRL",
        "ПРОБІЛ",
        "PAGE UP",
        "PAGE DOWN",
        "END",
        "HOME",
        "СТРІЛКА ВЛІВО",
        "СТРІЛКА ВПРАВО",
        "СТРІЛКА ВВЕРХ",
        "СТРІЛКА ВНИЗ",
        "INSERT",
        "DELETE",
        "NUM 0",
        "NUM 1",
        "NUM 2",
        "NUM 3",
        "NUM 4",
        "NUM 5",
        "NUM 6",
        "NUM 7",
        "NUM 8",
        "NUM 9",
        "C",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "Ліва кнопка миші",
        "Права кнопка миші",
        "Середня кнопка миші",
        "control_active",
        "souls_max",
        "tlast_dir",
        "tlast_force",
        "tblood_type",
        "tchild",
        "physics_apply_impulse",
        "parent_do",
        "parent_lo",
        "tshadow_yscale",
        "shadow_offset",
        "instance_find",
        "cast",
        "ti2",
        "tfail",
        "trate",
        "ti_elevator",
        "visible",
        "hold_temp",
        "tarm_color",
        "tarm_l",
        "draw_self",
        "draw_line_width_colour",
        "tarm_index1",
        "tarm_index2",
        "twep",
        "tbullets",
        "tbullets_max",
        "bullets_max_other",
        "tang",
        "tpos_j",
        "tang_j",
        "tteam",
        "tsprite",
        "txscale",
        "tyscale",
        "sprite_get_width",
        "tchose",
        "draw_sprite_outline",
        "current_time",
        "gp_pfire3",
        "gp_pfire2",
        "gp_pfire1",
        "gp_system_above",
        "part_particles_create",
        "dsid",
        "this",
        "that",
        "ds_list_empty",
        "max_slp",
        "thsp",
        "ceil",
        "blk",
        "mov",
        "ttarget",
        "y_dis",
        "path_grid",
        "mp_grid_path",
        "can_path",
        "tpace_ahead",
        "path_get_number",
        "tmax_path",
        "path_get_point_x",
        "path_get_point_y",
        "tdis",
        "tx_ahead",
        "ty_ahead",
        "tcan_ahead",
        "ton_elevator",
        "tcol",
        "ty_now",
        "teleport_noise",
        "inspect_timer",
        "cutscene_timeline",
        "mouse_lock",
        "door_open",
        "locked",
        "lock_set",
        "on",
        "active_time",
        "sprite_xoffset",
        "has_elevator",
        "is_open",
        "last_x",
        "last_y",
        "enter_elevator",
        "return_to_apt",
        "finish_level",
        "unlock_apt",
        "owner",
        "tcat",
        "chair",
        "player_x",
        "player_xscale",
        "beep_count",
        "open_door",
        "knock_delay",
        "sprite_right",
        "sprite_left",
        "tparent",
        "tsy",
        "head_sprite",
        "body_sprite",
        "uarm_sprite",
        "larm_sprite",
        "uleg_sprite",
        "lleg_sprite",
        "argument9",
        "argument14",
        "tweight",
        "argument10",
        "hx",
        "argument11",
        "hy",
        "argument12",
        "hd",
        "argument13",
        "hf",
        "argument15",
        "tgib",
        "tjoint",
        "neck_offset",
        "leg_offset",
        "head_h",
        "sprite_get_bbox_bottom",
        "sprite_get_bbox_top",
        "body_h",
        "sprite_get_bbox_right",
        "sprite_get_bbox_left",
        "body_w",
        "uarm_h",
        "uarm_w",
        "larm_h",
        "larm_w",
        "uleg_h",
        "uleg_w",
        "lleg_h",
        "lleg_w",
        "head",
        "body",
        "physics_joint_revolute_create",
        "head_joint",
        "l_u_leg",
        "l_l_leg",
        "r_u_leg",
        "r_l_leg",
        "l_u_arm",
        "l_l_arm",
        "r_u_arm",
        "r_l_arm",
        "chest",
        "tfire",
        "fleg_sprite",
        "bleg_sprite",
        "body1",
        "body2",
        "head1",
        "head2",
        "head3",
        "fuleg1",
        "flleg1",
        "fuleg2",
        "flleg2",
        "buleg1",
        "blleg1",
        "buleg2",
        "blleg2",
        "display_get_width",
        "dw",
        "display_get_height",
        "dh",
        "iw",
        "ih",
        "mag_scale",
        "window_set_size",
        "can_interp",
        "mag scale: ",
        "surface_create",
        "mag_surface",
        "mag surface size: ",
        ", ",
        "part_system_create",
        "gp_system_fire",
        "gp_system_below",
        "gp_system_above2",
        "gp_system_max",
        "gp_system_zero",
        "gp_system_snow1",
        "gp_system_snow2",
        "part_system_depth",
        "part_type_create",
        "gp_rain_splash",
        "part_type_sprite",
        "part_type_life",
        "part_type_direction",
        "part_type_size",
        "part_type_gravity",
        "part_type_speed",
        "gp_rain1",
        "part_type_orientation",
        "gp_rain2",
        "part_type_alpha1",
        "part_type_scale",
        "gp_snow1",
        "gp_snow2",
        "part_type_colour1",
        "gp_firefly",
        "part_type_shape",
        "part_type_alpha3",
        "part_type_blend",
        "gp_ftpink",
        "gp_spark",
        "gp_ft1",
        "gp_ft2",
        "part_type_step",
        "gp_ft3",
        "gp_ft_corpse",
        "gp_ft_corpse_blue",
        "gp_soul",
        "part_type_alpha2",
        "gp_smoke1",
        "gp_smoke2",
        "gp_smoke3",
        "gp_soul_trail",
        "gp_coke",
        "gp_dust1",
        "gp_firetrail1",
        "gp_firetrail2",
        "gp_smoketrail1",
        "gp_smoketrail2",
        "gp_coketrail1",
        "gp_blood",
        "gp_fire1",
        "gp_fire2",
        "gp_fire3",
        "surf",
        "surface_exists",
        "surface_set_target",
        "draw_clear_alpha",
        "draw_set_blend_mode_ext",
        "draw_set_blend_mode",
        "surface_reset_target",
        "surface_free",
        "draw_surface_ext",
        "fix",
        "physics_remove_fixture",
        "physics_fixture_delete",
        "physics_fixture_create",
        "physics_fixture_set_box_shape",
        "physics_fixture_set_density",
        "physics_fixture_set_friction",
        "physics_fixture_bind_ext",
        "&y&'",
        "'&!&: ВІДКРИТИ ДВЕРІ#",
        "text",
        "behind",
        "zone_join",
        "draw_reactor",
        "ts_w",
        "mp_grid_clear_cell",
        "event_inherited",
        "'&!&: CLIMB LADDER#&r&'",
        "'&!&: ВИКЛИКАТИ ЛІФТ",
        "glow",
        "collision_circle",
        "tdiff_parent",
        "tdiff_me",
        "arrive_length",
        "arrive_length_max",
        "open_timer",
        "can_up",
        "room_height",
        "can_down",
        "has_player",
        "'&!&: УВІЙТИ",
        "ds_list_clear",
        "'&!&: УВІЙТИ В ЛІФТ",
        "tblend",
        "merge_colour",
        "sound_index",
        "child1",
        "child2",
        "child_door",
        "hold_timer",
        "want_open",
        "max_speed",
        "can_move",
        "force_up",
        "force_down",
        "signal_x",
        "signal_y",
        "signal_glow",
        "tdoor_exists",
        "phy_position_y",
        "audio_stop_sound",
        "tdiff",
        "check_pressed",
        "has_sound",
        "'&!&: ВІДКРИТИ ДВЕРІ#&r&'",
        "instance_position",
        "point_in_rectangle",
        "tel",
        "instance_activate_region",
        "'&!&: ПОСТУКАТИ",
        "zone_split",
        "'&!&: ЗЛАМАТИ ЗАМОК#&r&'",
        "light_child",
        "'&!&: ЗЛАМАТИ ДВЕРНИЙ ЗАМОК#&r&'",
        "open_direction",
        "door_scale",
        "#&r&'",
        "child_alpha",
        "child_sprite",
        "child_xscale",
        "'&!&: СКОРИСТАТИСЯ СХОДАМИ",
        "init_ai",
        "sZomb1",
        "arm_xo_crouch",
        "arm_yo_crouch",
        "the Punk",
        "spawn_ragdoll",
        "death_ai",
        "drop_cassette",
        "alarm_ai",
        "step_ai",
        "bstep_ai",
        "draw_ai",
        "the Bouncer",
        "sZomb2",
        "ACH_GANG1_2",
        "sZomb3",
        "head_id",
        "the Shambler",
        "tn",
        "body_id",
        "sZomb4",
        "the Bully",
        "bit",
        "hit_max",
        "sound_id",
        "sound_pitch",
        "Роланд",
        "sZombBoss2",
        "blood_decal",
        "physics_apply_torque",
        "phys_blood_spray",
        "sDog1",
        "the Cerberus",
        "spawn_ragdoll_dog",
        "count",
        "len",
        "physics_joint_rope_create",
        "sight_color",
        "sight_cone",
        "alert_lerp",
        "blink",
        "dead",
        "has_screamed",
        "sight_angle",
        "angle_difference",
        "physics_apply_local_force",
        "alert_number_limit",
        "step",
        "jitter",
        "x_orig",
        "y_orig",
        "parent_x",
        "parent_y",
        "Пафф",
        "sprite_change_timer",
        "sprite_change",
        "talert",
        "sZombBoss1",
        "tno_gun",
        "ACH_GANG1_1",
        "Outfit1",
        "outfit",
        "Сукубів",
        "sVamp2",
        "dance",
        "dance_alt",
        "check_dance",
        "ACH_GANG2_1",
        "hit_var",
        "Flip",
        "Dance",
        "Alt",
        "the Incubus",
        "sVamp1",
        "the Bartender",
        "gem_id",
        "sVamp3",
        "tbody",
        "Мадам Стела",
        "sVampBoss2",
        "sine_timer",
        "sVampBoss11",
        "Evelyn",
        "ACH_GANG2_3",
        "soul_alpha",
        "soul_y",
        "draw_circle_colour",
        "soul_x",
        "draw_sine",
        "tlerp",
        "sVampBoss12",
        "Amber",
        "the Nightcrawler",
        "sVamp4",
        "soul_time",
        "soul_time_max",
        "res",
        "death_sprite",
        "res_sprite",
        "res_index",
        "wep_index",
        "play_sound",
        "glow_map",
        "draw_set_colour",
        "pitch",
        "Defend those bottles!",
        "Useless guards!",
        "Kill that reaper!",
        "Guards! What are you doing?",
        "Keep your filthy hands away!",
        "text_position",
        "text_sound_voice",
        "text_portrait",
        "read_speed",
        "action_kill_object",
        "emote_count",
        "emote",
        "irandom",
        "t",
        "Майстер Тімур",
        "cutscene_cd",
        "death_count",
        "sSkeleBoss2",
        "Ібзан",
        "lv4_2.nc",
        "cylinder",
        "sSkeleBoss2Dying",
        "tmax_death",
        "О, ось це як закінчиться...",
        "advance_mission",
        "Поговорити з &y&полум'ям.&!&",
        "ttarget2",
        "tx2",
        "ty2",
        "Погана точність - поганий жнець.",
        "Майже.",
        "Ближнко.",
        "Не зовсім, жнець.",
        "Ти не такий вже й поганий.",
        "Непогано.",
        "Непогано, жнець.",
        "hiding_var",
        "Цього достатньо, жнець.",
        "Цього достатньо, друже.",
        "Цього достатньо.",
        "Я тут не для ТЕБЕ, жнець!",
        "ДОПОМОЖИ МЕНІ, ДРУЖЕ!",
        "ПРОПУСТИ МЕНЕ, ЖНЕЦЬ.",
        "&y&'E'&!&: СПАЛИТИ ТОТЕМ",
        "fire_counter",
        "audio_emitter_create",
        "loop_id",
        "spell_loop",
        "spell_pitch",
        "audio_emitter_position",
        "audio_emitter_falloff",
        "alpha",
        "audio_play_sound_on",
        "flame",
        "x_offset",
        "flame_density",
        "flash_id",
        "coke_target",
        "audio_emitter_free",
        "draw_objective",
        "the Sergeant",
        "sSkele1",
        "ACH_GANG3_1",
        "tmax_speed",
        "taccel_speed",
        "the Grunt",
        "sSkele2",
        "the General",
        "channel_sound",
        "sSkele5",
        "res_target",
        "res_cd",
        "f",
        "tres",
        "res_var",
        "physics_apply_force",
        "tres_index",
        "tspawn_index",
        "tispawn",
        "yo",
        "shader_set",
        "shader_reset",
        "the Technician",
        "sSkele3",
        "mine_cd_max",
        "mine_cd",
        "mine_var",
        "mouse_x",
        "mouse_y",
        "teleport_cd",
        "the Cardinal",
        "sOni1",
        "the Maiden",
        "sOni2",
        "Валл",
        "tglass",
        "the Patriarch",
        "sOni3",
        "spool",
        "spool_max",
        "spool_var",
        "angle",
        "y_end",
        "y_start",
        "has_dropped",
        "phys_index",
        "neither",
        "draw_line_colour",
        "reactor_parent",
        "has_triggered",
        "slack",
        "color",
        "tsucc",
        "draw_curve",
        "draw_line_width",
        "&y&'E'&!&: АКТИВУВАТИ ПАСТКУ",
        "sprite_disarm",
        "has_fired",
        "&y&'E'&!&: РОЗРЯДИТИ ДРОБОВИК",
        "player_y",
        "sniper_cd",
        "can_see",
        "aim",
        "leading",
        "tdelay",
        "is_lit",
        "tsp",
        "jig",
        "incoming backup",
        "countdown",
        "irandom_range",
        "start_delay",
        "has_arrived",
        "lp",
        "spawn_list",
        "y_offset",
        "room_width",
        "ystart",
        "temp_target",
        "&y&'E'&!&: ДОПИТАТИ",
        "emote_timer",
        "emote_base",
        "emote_timer_co",
        "has_hit",
        "hit_index",
        "sprite_death",
        "sprite_threaten_begin",
        "sprite_threaten",
        "player_emote",
        "emote_correct",
        "enemy_emote",
        "emote_list",
        "emote_success",
        "sprite_threaten_end",
        "has_deactivated",
        "wave",
        "'&!& ПОГОВОРИТИ",
        "fade",
        "glow_alpha",
        "has_talked",
        "cos",
        "cd",
        "draw_rectangle",
        "cd_max",
        "'&!&: SNIPE",
        "black_alpha",
        "room_load",
        "crt_surface",
        "cursor_x",
        "cursor_y",
        "save_y",
        "save_x",
        "point_in_circle",
        "tsway_y",
        "tsway_x",
        "find_middle",
        "xmid",
        "ymid",
        "clamp",
        "shake_x",
        "shake_y",
        "ACH_GANG4_1",
        "draw_surface",
        "active_timer",
        "'&!&: АКТИВУВАТИ ПОРТАЛ",
        "q",
        "weapon_carryover",
        "lv4_1_hard.nc",
        "lv4_1.nc",
        "timp",
        "power_on",
        "soul_active_rate",
        "soul_activate",
        "soul_count",
        "ACH_GANG4_2",
        "tscale",
        "time_passed",
        "failed",
        "fail_timer",
        "distance_to_object",
        "timer_max",
        "tall_done",
        "ACH_CASSETTE",
        "draw_set_font",
        "draw_set_halign",
        "draw_set_valign",
        "Касета розблокована",
        "'&!&: ЗЛАМАТИ ЗАМОК",
        "'&!&: ВІДКРИТИ ДВЕРІ",
        "&y&'E'&!&: ОГЛЯНУТИ СВІЧКУ",
        "&y&'E'&!&: ОГЛЯНУТИ ЖНЕЦЯ",
        "'&!&: ОГЛЯНУТИ НАРКОТИКИ",
        "'&!&: ОГЛЯНУТИ МАШИНУ",
        "mission_var",
        "&y&'E'&!&: ЗЛАМАТИ ЗАМОК",
        "&y&'E'&!&: ВІДКРИТИ СЕЙФ",
        "roll_cd",
        "target_angle",
        "target_angle_last",
        "autolock_id",
        "bonus_list",
        "lv0_1.nc",
        "lv0_1_hard.nc",
        "randomize",
        "dead_count",
        "sound_factor_rate",
        "move_down_pressed",
        "cutscene_pending",
        "tsense",
        "gamepad_axis_value",
        "taxis_h",
        "taxis_v",
        "ttarget_x",
        "ttarget_y",
        "window_mouse_get_y",
        "total_scale",
        "window_mouse_get_x",
        "riding",
        "audio_listener_position",
        "cheat_on",
        "counter",
        "force_kb",
        "ttx",
        "tty",
        "ex",
        "ey",
        "tti",
        "tcolour",
        "draw_player",
        "&y&'E'&!&: СПАЛИТИ НАРКОТИКИ",
        "ACH_TOILET",
        "up",
        "down",
        "yprevious",
        "xprevious",
        "draw_sector",
        "has_opened",
        "sprite_block",
        "soul_colour_mix",
        "black_alpha_rate",
        "enemy_count_max",
        "banner_alpha",
        "bar_alpha",
        "restart",
        "last_quest",
        "quest_ticker",
        "quest_ticker_cd",
        "kill_player",
        "gamepad_set_vibration",
        "exit_room",
        "Знайти &b&снайперську гвинтівку.&!&",
        "Знищити всі &b&попелясті тотеми.&!&",
        "all_burnt",
        "Вбити всі &r&цілі.&!&",
        "Вбити &r&",
        "Вбити &r&підкріплення (",
        ")&!&",
        "Зібрати &b&ключ-карти&!&",
        "Відшукати &b&інформацію.&!&",
        "Вбити &r&цілі, що залишилися (",
        "Вбити всю &r&нежить.&!&",
        "Знищити всі &b&сховки попелу.&!&",
        "Знайти &b&наркотики.&!&",
        "all_found",
        "pan_slow",
        "pan_speed",
        "lv4_2_load.nc",
        "lv4_2_hard.nc",
        "lv4_2_hard_load.nc",
        "reset_stats_death",
        "tsoul_x",
        "tsoul_y",
        "tcolor_empty",
        "ttext",
        "tcolor_actual",
        "string_height",
        "tb_max",
        "tb",
        "trow",
        "i_offset",
        "tappend",
        "&g&'",
        "'&!&: ПІДІБРАТИ ",
        "draw_ctext",
        "'&!&: ВИЙТИ З ВЕНТИЛЯЦІЇ ",
        "keyboard_check_pressed",
        "tsize",
        "tan",
        "toff",
        "tquest",
        "ctext_normal",
        "tb_y",
        "tb_w",
        "current_mission_name",
        "ttimer_exists",
        "/",
        " секунд залишилося",
        "car_id",
        "car_countdown",
        "choice",
        "choice_primary_type",
        "choice_second_type",
        "sound_var",
        "'&!&: ЗМІНИТИ ЗБРОЮ",
        "lv1_6.nc",
        "lv1_6_hard.nc",
        "lv3_7.nc",
        "lv3_7_hard.nc",
        "ds_list_set",
        "'&!&: УВІЙТИ В МАШИНУ",
        "tprimary_list",
        "ds_list_copy",
        "&!&: Вийти",
        "thover",
        "thover_type",
        "thover_unlock",
        "thover_price",
        "ray_grid",
        "dynamic",
        "life",
        "can_turn_off",
        "wait",
        "turned_off",
        "ds_exists",
        "ds_grid_destroy",
        "ray_x",
        "ray_y",
        "ray_count",
        "ray_skip",
        "ds_grid_create",
        "ds_grid_get",
        "vertex_x",
        "vertex_y",
        "is_undefined",
        "tdirection",
        "tldirx",
        "tldiry",
        "ds_grid_height",
        "tray_grid_height",
        "ds_grid_sort",
        "ray_len",
        "ray_angle",
        "tray_x",
        "tray_y",
        "flicker",
        "width",
        "xscale",
        "yscale",
        "'&!&: СВІТЛО УВІМК/ВИМК",
        "target_cone",
        "draw_weapon",
        "'&!&: ПІДІБРАТИ НІЖ",
        "force",
        "can_lodge_body",
        "can_lodge_wall",
        "impact_sound",
        "armed",
        "glow_index",
        "radial",
        "tchar_count",
        "phy_bullet",
        "phy_collision_x",
        "phy_collision_y",
        "glow_id",
        "glow_theta",
        "&y&'E'&!&: ПРИДБАТИ ЗБРОЮ",
        "y_theta",
        "ang_theta",
        "y_o",
        "ang_o",
        "tangle",
        "random_set_seed",
        "tlen",
        "has_shake",
        "has_place",
        "pos",
        "walk",
        "last_index",
        "walk_timer",
        "light_glow",
        "'&!&: ВИМКНУТИ",
        "'&!&: ВМИКНУТИ",
        "shadow_jitter",
        "shadow_yscale",
        "flame_level",
        "fire1_loop",
        "flame_theta",
        "flame_alpha",
        "part_system_automatic_draw",
        "fireplace_light",
        "flame_max",
        "flame_width",
        "draw_shadow",
        "part_system_drawit",
        "'&!&: ВИБРАТИ МІСІЮ#&r&'",
        "'&!&: ДОСЯГНЕННЯ",
        "new_mission",
        "'&!&: ВИПРАВИТИ СВІТЛИНУ",
        "back_music_id",
        "audio_sound_length",
        "audio_sound_set_track_position",
        "'&!&: СІСТИ ТА ПОГОВОРИТИ#&r&'",
        "'&!&: СІСТИ",
        "'&!&: СІСТИ ТА ПОГОВОРИТИ",
        "'&!&: ВИЙТИ ДО ПРИЧАЛУ",
        "upgrade_index",
        "show_wep",
        "'&!&: ПРОСЛУХАТИ КАСЕТИ",
        "x_spawn",
        "y_spawn",
        "peck",
        "td_final",
        "can_peck",
        "sp_max",
        "dur",
        "xo",
        "fly_x",
        "fly_y",
        "peck_var",
        "dir_skew",
        "caw_pitch",
        "state_var",
        "see_player",
        "see_distance",
        "leash_distance",
        "flee_distance",
        "caw",
        "dart_count",
        "dart_array",
        "array_height_2d",
        "'&!&: ОГЛЯНУТИ",
        "'&!&: ЗМІНИТИ ТРЕК",
        "music_name",
        "duration",
        "speed",
        "txs",
        "ty1",
        "ty3",
        "ty4",
        "tid2",
        "broken",
        "h",
        "surf_base",
        "surf_xo",
        "surf_yo",
        "parent_wall",
        "draw_surface_part_ext",
        "'&!&: УВІЙТИ В ВЕНТИЛЯЦІЮ",
        "&y&'E'&!&: В УКРИТТЯ#&r&'",
        "'&!&: ПЕРЕВІРИТИ ШУХЛЯДИ",
        "done",
        "&y&'E'&!&: ВІДКРИТИ ВЕНТИЛЬ",
        "refresh_pipe",
        "sprite_active",
        "background_type",
        "'&!&: УВІЙТИ В КОЛОДЯЗЬ",
        "soul_counter",
        "edge_border",
        "sprite_gap",
        "choice_last",
        "choice_chosen",
        "choice_index",
        "disable_mouse",
        "disable_x",
        "disable_y",
        "check_released",
        "tcol_count",
        "tspace",
        "trow_count",
        "draw_border",
        "textra",
        "tx_bar",
        "tw_bar",
        "ty_bar",
        "th_bar",
        "tach_done",
        "% Готово",
        "ticon_x",
        "ticon_y",
        "##НАГОРОДА: ",
        " Душ",
        "tdes",
        "'",
        "yo_extra",
        "Харе смоктати, чувак!",
        "Деякі рівні мають декілька входів - спробуй скористатися іншим.",
        "tip_array",
        "Спробуй змінити зброюz.",
        "Спробуй придбати іншу зброю, якщо маєш гроші.",
        "Не забувай зберігати потужні боєприпаси для сильних ворогів.",
        "Стук в двері може розділити ворогів, полегшивши завдання.",
        "Не забувай використовувати укриття!",
        "Впевніться в цілі місії.",
        "Вентиляції можуть допомогти обійти ворогів ззаду.",
        "Спробуй інший вхід.",
        "Якщо твій план не працює - спробуй щось інше.",
        "Якщо ти не можеш досягти прогресу, зроби перерву та поверніться зі свіжим поглядом.",
        "Пам’ятайте про спокій! Тобі буде важче грати, якщо ти будеш розлючений.",
        "Ти помер",
        " разів. Спробуй іншу стратегію!",
        "string_width_ext",
        "draw_text_ext",
        "candle_count",
        "final",
        "current_target",
        "max_bullets",
        "СНАЙПЕРСЬКА ПІДТРИМКА",
        "xscale_offset",
        "yscale_offset",
        "Ви відкрили теку касет.",
        "seen_secret",
        "ТЕСТОВА ІСТОРІЯ",
        "story",
        "I wake up. Cold water. Docks again. Splinters in my hand. Where am I? Roland's here. He helps. He says we leave. He says we don't have to come back to the docks again. He gives me a hit. Good hit. I feel it in my tongue and my throat and my hands and my feet and my ears and\r\n\r\nI wake up. How much time? Thumping in my ear. Music. I look down, and there's splinters in my hand. Roland's gone. I die again. I overdose again.\r\n\r\nI wake up. Hands wet. Feet wet. Docks again? I'm in living room. I need more ash. Roland? I hear the music again. I hear yelling. The room fills up with cold water. I splinter and we all overdose again. \r\n\r\nI wake up. Knocking at the door. Roland?",
        "Only ash helps. Ash brings a bit of Jacob back to me. What happened to Jacob? I remember. He died. He overdosed. My tongue feels heavy in my mouth. Talking is hard. Thinking is hard. Did Jacob pay rent? I shift the shotgun in my hand. Standing is hard. Roland? Roland says we shouldn't smoke the ash. He says we need it. He says we can leave soon. \r\n\r\nI hear scuttling. I fire my gun and splatter Jacob against the wall. Thought it was the reaper - I'm sorry Jacob. Thick smoke fills the room and Jacob's red and yellow and green corpse is gone. Where's Jacob? I want to be Jacob again.",
        "'Any day now', he says. 'The Dredged have a PLAN! Oh, what is the plan? Sorry, can't tell you. Keep feeding your boys to the reaper though and just sit on the ash.' I hope this is worth it - we're moving huge amounts of ash around, and we're losing members left and right to the reaper. \r\n\r\nDark and stormy said that the ash can be used for more than getting high - but man, was it HARD to convince the boys. I just wanna get everyone to a place where we don't need the high anymore - somewhere where we feel more... alive. We all feelin' like shit here. The boys don't know it, but on the day we lost Stephen I took a bump too. We all did. But I'm trying to be stronger - it's not working yet, but I'm trying to be stronger. They need a leader.\r\n\r\nI hear shifting in my bed - somethin' woke her up. My phone is ringing - Puff? Man, Puff is always calling me for dumb shit - he gets spooked by everything. Amber speaks up, her voice piercing the silence: 'Babe, can you turn that off?' I reply with a whisper, 'Yeah, sorry Am, it's just Puff again. Always callin' me.' I lock the phone and toss it across the dark room. I look back at her pale form - at least there's SOME benefits from working with the vampires. Still, they give me the creeps. I can't wait until this is over. Any day now.",
        "It's night time, but it's always night time here. The moon never shines anymore - not like the night I met him. Not like the night we went home. Not like my last life. \r\n\r\nThe bartender knows me; I've been coming here for weeks, since the day the Bloody Mary opened. Clubs only last a few weeks at best around here; no one really knows why. A man at the bar buys me a drink - it glows like moonlight. I take a sip and I feel the warmth. I shift from one leg to the other. I don't feel like dancing tonight.  \r\n\r\nI take another sip - it's a lot more bitter than I expect. The man at the bar buys me another drink. He scans me, gaze lingering... oh, right. I almost forgot that this is how I died last time. His hands burn where they touch. Let me forget - please make me forget!",
        "We pull up to another club - the music is still playing, but no voices come out. The music pounds in my skull - I'll turn it off as soon as I get inside. 'Another successful harvest,' she would say. Madam Stela says that the ash will help us leave this place, but almost nobody knows that the ash is made from people - from the skeletons and their strange magic.\r\n\r\nThe workers pile out of the car. They've been blinded, so they can't see what happened. One by one, they pile into the club with their shovels and bags and start harvesting the frozen bodies. I promised not to tell. The Stelas' would kill me if I did - last week Logan blabbed to his girls during pillow talk. Big mistake. He's ash now. \r\n\r\nWe've all been betrayed before - that's why we're here. What's one more? I just want to secure my trip to hell, one way or another. Can you blame me?",
        "Oh, I can't wait. This Place is filthy - full of filthy streets and filthy undead and filthy weather. My husband agrees. We HATE this Place. My last husband hated it too - but he also hated dancing. I love dancing. He died. My husband before that actually LIKED the undead - disgusting. He died too. We try so hard to have some resemblence of class in this god-forsaken hole in the ground.\r\n\r\nOne of the Nightcrawlers knocked on our bedroom door (even though we've told them time and time again to NEVER step in the house...disgusting.) My husband opens the door and I hear an exchange. Hushed but excited - must be another successful harvest! He closes the door and walks back towards his desk, trying his hardest to keep his smile hidden. We're only a couple harvests away to having enough ash! \r\n\r\nOh, I wonder what the other Place is like? Does it rain there? How warm is it? The Dredged say it's so warm there - I can't wait to lay in the sun again!",
        "Cold. It's so bitterly cold. In the darkness of my patrol, lights dancing across the waves, the cold bit at my exposed bones. I pry every step off of the pavement - the humidity near the docks freeze my feet to the ground. I can hear Ibzan in the other room - still telling the shamans about the land of warmth and the ash and the portal and blahblahblah. I'm starting to think it's bullshit - but we are all so cold. The idea of a warmer place is so inviting.\r\n'More flesh,' he'd say. 'We need more for the portal; it is so close my brothers! We will soon be embraced by his Warmth, for he loves every one of us!'\r\n\r\nIt's so cruel, isn't it? I wanted to die.. And I still do - but I can't. I have no brain to destroy or nerves to sever. The Generals reassemble me as soon as I rip myself apart - and why is it so GODDAMN cold?",
        "Another one. Thank god, another dead one. \r\nIt starts as a dull chill, originating from my right shoulder. The feeling grows towards my hands, skin tight against the bone. The feeling grows more, a searing hot pain in contrast to the frigid air. \r\n\r\nSuddenly, the cold exits in a brilliant blue flash from my fingertips - and Albina is reconstructed where she last died. Miraculously, the cold subsides for a moment; what a relief. God, what warmth! I know Albina didn't WANT to be reconstructed - she shoots daggers from empty sockets - but the cold was too much to bear. I almost feel sorry and begin to - oh, is that another body?",
        "I stumble through the door, slamming it against the wall. Cold. I fall to my knees and the floor splinters where I land. Cold. Where is he? I feel for the lightswitch on the wall, hands groping. Where was it again? My fingers find their mark and I flick it on. The fluorescent lights spark to life, buzzing.\r\n\r\nMy heart drops through the fucking floor and I lose it, forever. Where's the - where's the fireplace? It was here... wasn't it? It's just wall. It was here. He was HERE. I start clawing, razor sharp bones raking the plaster apart. It was here. I'm so cold. I need my friend. My fingers find a weakness and bust through. Ah, there you are!\r\n\r\nWith frenzy, I rip the plaster down. Dust floats through the air and swirls around my arms. Nothing. There's nothing here but an empty void. No. No. NonononononoNO. Where are you, you son of a bitch?",
        "Splish, splash. The dinghy rocks - we fit fifteen in a boat meant more for two. Splish, splash. We hit an old post in the dark - and Goroduth careens over the edge into the cold dark depths below. We gotta leave him behind - he's Charon's now. Splish, splash.\r\n\r\nAulk pulls the dinghy up to the shore. Charon can't see us here so far from the docks. She lets out a sigh of relief. We all clamber over the edge, boat swaying as it's relieved of demons and ammunition and weaponry. The cold sand is inviting. While none of us would admit it, we were terrified of the deadly dark of the Styx - and of Charon. We've all heard the songs in the birthing chambers... wait, you haven't? Seriously?\r\n\r\n'Splish, splash, in the Styx we go.\r\nCharon's comin', swim real slow.\r\n\r\nSplish, splash, in the Styx we go.\r\nMama's not watching, she doesn't know.\r\n\r\nSplish, splash, in the Styx we go.\r\nOne by one by one he throws.\r\n\r\nSplish, splash in the Styx we go.\r\nAlways remember that we drown slow.'\r\n\r\nSomethin' like that.",
        "Another day of work. It's pouring out today, and the rain soaks through my coat. I go to open the door to my apartment, but it's slightly stuck. 'For hell's sake...' I mutter under my breath. A few good shoulder nudges finally pries the door open, and it swings into the side of my hallway.\r\n\r\nMy room is pitch dark, as usual. And dead empty. The fireplace is off - damn. I was hoping my friend would be here tonight. I've never been much of an interior decorator, but this is a bit... dry. I suppose I don't need much to live - I don't need to eat or drink, and I can't sleep. I still bought a bed anyways. It wasn't until after I got it that I remembered I had no eyelids to close, so now I just stare up into the ceiling while - is that mold growing again?\r\n\r\nHow long have I been in this Place? Months? Years? Decades? Every day is the same - I go out and kill undead and go home and stare at that mold. My friend says nothing to me, just more missions. At least the mold gets to grow and change, slowly inching towards - AH, the fireplace? Is it - oh, wait, it's not on. Damn. I thought I saw you.",
        "-клац-###",
        "cassette_unlocked[11]",
        "tc_max",
        "theight",
        "twidth",
        "trow_max",
        "tcs_x",
        "tcs_y",
        "tx_box",
        "ty_box",
        "twidth_box",
        "theight_box",
        "delete_save",
        "load_game_list",
        "Видалити збереження",
        "Назад до головного меню",
        "mouse_check_button_pressed",
        "write_prefs",
        "load_game",
        "file_delete",
        "preparing to delete",
        "Завантажити гру",
        "tlist_size",
        "thard",
        "format_time",
        "ttime",
        "% Завершено",
        "tprogress",
        "Порожньо",
        "-",
        "Назад",
        "Save1.sav",
        "file_exists",
        "Save",
        ".sav",
        "current_mission_number",
        "current_mission_tab",
        "Save1_hard.sav",
        "_hard.sav",
        "Виберіть складність",
        "Нова гра &y&(Нормальний)&!&",
        "Нова гра &r&(Пекельний)&!&",
        "text_y",
        "ACH_FAMINE",
        "ACH_DEATH",
        "= D E A D B O L T = # # Виробництво Hopoo Games # # Переклад від Damglador (Vsevolod Stopchanskyi) ####= Дизайн гри =#Duncan Drummond #Paul Morse ##= Графіка =#Duncan Drummond ##= Програмування =#Duncan Drummond ##= Звукові ефекти =#Jordan Fehr ##= Музика =#Chris Christodoulou ##= Business Dev =#Paul Morse ##= Тестування =#Duncan Drummond #Paul Morse #Stuart Drummond ##= Особлива подяка =#Steam Dev Crew #SeventeenUncles #vine2D #keepee #Untouch #ghor #kitten #Labyrinth #Typo #Thumbie #Quarry #ryunocore #Slow #Tox #Mung #Omrii #Wabba #Liquorish #Strato #QT #Karl #RBD2 #b #Silpheed #LuckyCassette #Susan L #Tanya L #Stuart D #Zach G#Усім нашим друзям та родинам #І тобі!",
        "load_dir",
        "Для встановлення власних мап перегляньте файл README.txt в теці гри.",
        "scrollbar_active",
        "max_count_page",
        "offset",
        "page_max",
        "max_count",
        "steam_map_downloaded",
        "sub_list",
        "sub_list_size",
        "steam_ugc_get_subscribed_items",
        "tsuc",
        "Sub item list: ",
        "tmap_name",
        "steam_ugc_request_item_details",
        "steam_details",
        "Завантаження інформації про карту '",
        "'...",
        "program_directory",
        "tfile_directory",
        "*.nc",
        "tfile_name",
        "common\\DEADBOLT",
        "workshop\\content\\394970\\",
        "\\*.nc",
        "FS_file_find_first",
        "Файл ",
        " знайдено в ",
        "FS_file_text_open_read",
        "file",
        "FS_file_text_readln",
        "tmission_name",
        "Завантаження...",
        "FS_file_text_close",
        "file_text_open_read",
        "file_text_readln",
        "working_directory",
        "file_text_close",
        "mouse_wheel_down",
        "mouse_wheel_up",
        "filename_path",
        "filename_name",
        "async_load",
        "ds_map_find_value",
        "map_id",
        "published_file_id",
        "tmap_id",
        "title",
        "Отримано: ",
        "Завантажити користувацьку мапу",
        "mouse_check_button",
        "tpos",
        "mouse_check_button_released",
        "tdraw_icon",
        "tmax_len",
        "...",
        "\"",
        "sound_factor",
        "physics_world_create",
        "physics_world_gravity",
        "mp_grid_destroy",
        "mp_grid_create",
        "mp_grid_add_rectangle",
        "tgrid",
        "ds_grid_read",
        "ds_grid_width",
        "file_text_eof",
        "string_delete",
        "oTriggerDelay",
        "oCommandSpawn",
        "oTriggerDestroy",
        "oCommandCutscene",
        "tys",
        "tvar1",
        "oMessage",
        "oLevelTrans",
        "oSnipePickup",
        "tvar2",
        "phy_active",
        "tvar3",
        "tvar4",
        "tvar5",
        "tvar6",
        "var3",
        "var4",
        "var5",
        "var6",
        "room_speed",
        "background_visible",
        "background_htiled",
        "background_vtiled",
        "background_blend",
        "mission_room",
        "room_set_background_colour",
        "background_index",
        "background_colour",
        "background_showcolour",
        "room_instance_clear",
        "room_set_view_enabled",
        "room_set_view",
        "Stages\\",
        "file_name",
        "room_set_width",
        "room_set_height",
        ".ogg",
        "Назва треку: ",
        "Індекс треку: ",
        "flash",
        "shadow_alpha",
        "shadow_theta",
        "window1",
        "shot_count",
        "window_choice",
        "house_choice",
        "max_bullet",
        "knock_count",
        "keyboard_key_press",
        "keyboard_key_release",
        "game_end",
        "button_tx",
        "button_ty",
        "move_mouse",
        "version",
        "logo",
        "logo_max",
        "fade_in",
        "УВАГА",
        "Ця гра містить світло, що швидко блимає. Якщо у вас були судоми або епілепсія, вимкніть \"Миготливі вогні\" в параметрах або проконсультуйтеся з лікарем перед грою.##Ця гра також містить теми смерті та самогубства.",
        "list_main",
        "list_main_mission",
        "main_menu_pointer",
        "Повернутися до гри",
        "Налаштування аудіо",
        "Налаштування відео",
        "Вийти до головного меню",
        "Перезапустити місію",
        "Вийти з місії",
        "list_control",
        "list_control_gamepad",
        "change_key",
        "list_audio",
        "Гучність звукових ефектів: ",
        "Гучність музики: ",
        "Дієгетична музика: ",
        "list_video",
        "Вертикальна синхронізація: ",
        "Графіка: ",
        "Миготливі вогні: ",
        "Super Sampling: ",
        "Кров та кишки: ",
        "Повноекранний режим: ",
        "list_quit_mission",
        "Так, вийти з місії",
        "Ні, повернутися",
        "list_quit",
        "Так, вийти до головного меню",
        "active_list",
        "crt_surface_scale",
        "crt_surface_width",
        "crt_surface_height",
        "samp_CRT",
        "shader_get_sampler_index",
        "surface_get_texture",
        "tex_CRT",
        "textureBaseSize",
        "shader_get_uniform",
        "textureScaledSize",
        "distort",
        "distortion",
        "border",
        "var_distort",
        "var_distortion_ammount",
        "var_border",
        "Рухатися ліворуч: &y&",
        "Рухатися праворуч: &y&",
        "Рухатися вверх: &y&",
        "Рухатися вниз: &y&",
        "Скористатися сходами: &y&",
        "Використати/Увійти: &y&",
        "Використати (Альтернатива): &y&",
        "Підняти зброю: &y&",
        "Стріляти/Увійти: &y&",
        "Змінити зброю: &y&",
        "Змінити зброю (Вверх): &y&",
        "Змінити зброю (Вниз): &y&",
        "Повернути до початкових",
        "Контролер: &y&Увімк.&!&",
        "Контролер: &dk&Вимк.&!&",
        "Загальна гучність: ",
        "¦",
        "Дієгетична музика: &y&Увімк.&!&",
        "Дієгетична музика: &dk&Вимк.&!&",
        "Вертикальна синхронізація: Увімк.",
        "Вертикальна синхронізація: &dk&Вимк.&!&",
        "Кров та кишки: Увімк.",
        "Кров та кишки: &dk&Вимк.&!&",
        "Повноекранний режим: Увімк.",
        "Повноекранний режим: &dk&Вимк.&!&",
        "Графіка: Низька",
        "Графіка: Середня",
        "Графіка: Висока",
        "Миготливі вогні: &dk&Вимк.&!&",
        "Миготливі вогні: Увімк.",
        "Інтерполяція: &dk&Вимк.&!&",
        "Інтерполяція: Увімк.",
        "&dk&Інтерполяція: N/A&!&",
        "Checking for valid inputs",
        "keyboard_lastkey",
        "mouse_lastbutton",
        "control_default",
        "&w&Натисніть будь-яку клавішу&!&",
        "Ready to change keys",
        "gamepad_get_device_count",
        "gamepad",
        "control_gamepad_default",
        "post_return",
        "surface_copy",
        "texture_set_repeat_ext",
        "texture_set_stage",
        "shader_set_uniform_f",
        "current_month",
        "current_day",
        "current_year",
        "КАМЕРА ",
        "current_second",
        "lock_angle",
        "target_dir",
        "target_len",
        "value",
        "pick_bounce",
        "pick_offset",
        "last_mouse_x",
        "last_mouse_y",
        "tta",
        "white_alpha",
        "ACH_COIN",
        "chosen",
        "upgrade_info",
        "+ Bullet count",
        "+ Damage#+ Penetration",
        "+ Accuracy#+ Headshot damage#- Recoil",
        "upgrade_list",
        "primary_grid",
        "second_grid",
        "primary_grid[",
        "second_grid[",
        "ds_list_write",
        "tsoul_count",
        "tunlock",
        "tprice",
        "choice_wep_type",
        "tmouse_x",
        "tmouse_y",
        "#&b&РОЗБЛОКОВАНО&!&",
        "#Ціна: &b&",
        "Osiris",
        "upgrade_info1",
        "&y&12&!& bullets#49 damage#3x headshot multiplier",
        "Sia",
        "upgrade_info2",
        "6 bullets#49 damage#&y&4.5x&y& headshot multiplier",
        "Heka",
        "upgrade_info3",
        "6 bullets#49 damage#3 headshot multiplier#Bullets regenerate over time",
        "ds_list_insert",
        "timeline_index",
        "timeline_running",
        "timeline_speed",
        "text_sound",
        "tforce",
        "tnext_char",
        "tnext_char_2",
        ". ",
        "? ",
        ".",
        "?",
        "ord",
        "choose_voice",
        "skip",
        "end_timer",
        "last_mission",
        "mission_tab",
        "mission_release",
        "mission_x",
        "mission_y",
        "mission_angle",
        "Зомбі Кінгз",
        "gang_name",
        "1000 Річні королівські",
        "Спустошені",
        "Tridead",
        "mission_folder_x",
        "mission_selected",
        "tmission_select",
        "back_x",
        "_hard.nc",
        ".nc",
        "tlocked",
        "tmax_col",
        "tsep_w",
        "tsep_h",
        "tmouse_in",
        "tfactor",
        "draw_sprite_outline_ext",
        "lv",
        "_",
        "sMissionPortrait",
        "tp_x",
        "tp_y",
        "mission_des",
        "Виберіть місію",
        "dialogue_path",
        "fileid",
        "requestResult",
        "json_decode",
        "resultMap",
        "dia_fp.json",
        "map_mission",
        "map_mission0",
        "ds_map_create",
        "topic_map",
        "ds_map_set",
        "Dialogue",
        "format_ctext",
        "dialogue",
        "ds_map_destroy",
        "choice_hover",
        "tborder",
        "topic_width",
        "topic_height",
        "dialogue_width",
        "dialogue_height",
        "Місія розблокована",
        "tblue_text",
        "ds_map_size",
        "tmap",
        "Important",
        "tkey_topic",
        "tbutton_index",
        "Read",
        "Ціль виконано",
        "#&dk&",
        "##&b&*",
        "Name",
        "*&!&#",
        "Description",
        "#&b&[",
        "]&!&",
        "##&y&",
        "&!&#",
        "Child ",
        "ttopic",
        "new string: ",
        "ttext_xoff",
        "ttext_yoff",
        "*",
        "star_flash",
        "show_name",
        "ACH_HEADSHOT",
        "ACH_MELEE",
        "lv1_1.nc",
        "lv1_1_hard.nc",
        "lv1_9.nc",
        "lv1_9_hard.nc",
        "lv2_3.nc",
        "lv2_3_hard.nc",
        "lv2_9.nc",
        "lv2_9_hard.nc",
        "lv3_5.nc",
        "lv3_5_hard.nc",
        "ACH_FIRST",
        "ACH_GANG1_4",
        "ACH_GANG1_3",
        "ACH_GANG2_2",
        "ACH_GANG2_4",
        "ACH_GANG3_3",
        "tacc_percent",
        "theadshot_percent",
        "mission_time",
        "sqrt",
        "ttime_percent",
        "ttime_penalty",
        "tdeath_penalty",
        "star_rank",
        "Ranking: ",
        "progress",
        "tis_not_five_star",
        "ACH_WAR",
        "Натисніть '",
        "', щоб продовжити",
        "Час: &r&",
        "format_time_nohour",
        "Смертей: &r&",
        "Убивств: &r&",
        "Точність: &r&",
        "%&!&",
        "Пострілів в голову: &r&",
        "РАНГ: ",
        "ДУШ ЗІБРАНО: &b&",
        "ВСЬОГО ДУШ: &b&",
        "v1.0.2",
        "window_set_cursor",
        "init_sfx",
        "tint",
        "Steam Failed!",
        "Steam True!",
        "steam_get_app_id",
        "wait_delay",
        "sound_factor_target",
        "music_fade",
        "time_limit",
        "init_particle",
        "secret",
        "Blank",
        "Смертельно просто",
        "Вбий всіх мерців.",
        "Шумні сусіди",
        "Новий максимум",
        "Зомбі продають якийсь дивний наркотик. Дізнайся, що це таке.",
        "Димові сигнали",
        "Привернімо увагу їх лідера. Спали всі їхні наркотики.",
        "Дилер низького рівня, Пафф, може знати про їх постачальника. Вбий його.",
        "Слідуй за псами",
        "Перша адреса веде до фунта пекельних псів. Покінчи з чим.",
        "Страшило",
        "Друга адреса веде до будинку зі зниклою Свічкою.",
        "Вакансій немає",
        "Знайдіть місцезнаходження складу Роланда.",
        "Пропозиція і попит",
        "Знищи склад, де король зомбі зберігає свої наркотики.",
        "Вбий Роланда, лідера Зомбі Кінгз.",
        "Нічний вихів",
        "Вампіри розпочали вечірку - дізнайтеся чому.",
        "Люкс в Тенебрісі",
        "Чисельність вампірів викликає занепокоєння - скороти її.",
        "Кривава Мері",
        "Інший клуб - інший сейф, можливо, тут буде корисна інформація.",
        "Пляшковий сервіс",
        "Що вампіри роблять біля доків?",
        "Ембер та Евелін",
        "Вампірки-близнючки керують борделем. Прикрий його.",
        "Є що віддати",
        "У цьому клубі підозріло тихо, що сталося?",
        "Сер Стела",
        "Лідер вампірів повинен знати про те, що сталося.",
        "Примусове перетворення",
        "Вампірів перетворюють на попіл - зупиніть наступні жнива.",
        "Вона знає про перетворення. Убий її і зупини виробництво попелу.",
        "Нічне перевезення",
        "Скелети збиралися біля доків. Дізнайся чому.",
        "Структурно надійна",
        "Вони намагалися побудувати нову базу. Знищи її мешканців.",
        "Пробіжка по барам",
        "Два бари, спина до спини. Нейтралізуйте обидва.",
        "Шоу жахів",
        "Свічки знайшли місце доставки...",
        "Майстер Тімур",
        "Тимур - високопоставлений Спустошений. Я дізнаюся, що йому відомо.",
        "Проїздка",
        "Я маю знайти де живе Ібзан, лідер Спустошених.",
        "Як скло",
        "Будинок Ібзана знаходиться під посиленою охороною, але має містити важливу інформацію.",
        "Мені потрібні снайпери на даху, але спочатку треба позбутися Валли.",
        "Я маю зупинити Ібзана та Спустошених і не дати їм покинути це місце.",
        "Історія завершена",
        "АВТОМАТИЧНИЙ ГРАНАТОМЕТ",
        "AGl",
        "КОСА",
        "Scythe",
        "Дальнобійна рубаюча зброя. Неможливо кинути.",
        "ДРОБОВИК З ГЛУШНИКОМ",
        "SShotgun",
        "Тихий дробовик. Вміщує 5 набоїв.",
        "НАПІВАВТОМАТИЧНИЙ ДРОБОВИК",
        "AShotgun",
        "Шумний та потужний. Вміщує 4 кулі.",
        "ВІДІРВАНА РУКА ЛІЧА",
        "Plasma",
        "ГРАНАТОМЕТ",
        "Gl",
        "МІНА",
        "Mine",
        "ГВИНТІВКА",
        "M16",
        "Має високу шкоду. Вміщує 30 набоїв.",
        "PDW З ГЛУШНИКОМ",
        "P90",
        "Тиха зброя. Вміщує 30 набоїв.",
        "ГВИНТІВКА СТАРОГО СВІТУ",
        "AK",
        "СЮРІКЕН",
        "Shuri",
        "МУШКЕТ",
        "Buss",
        "Кремнієвий дробовик. Вміщує 1 кулю.",
        "МИШАЧИЙ ПІСТОЛЕТ .25",
        "PPistol",
        "Малопотужний. Має лише 2 кулі.",
        "КУВАЛДА",
        "Sledge",
        "АРБАЛЕТ",
        "Xbow",
        "СЕРП",
        "Sickle",
        "РЕВОЛЬВЕР .32",
        "Revolver",
        "Точний. Вміщує 6 куль.",
        "МИСЛИВЕЦЬ ЗА ГОЛОВАМИ",
        "Revolver3",
        "Дуже велика шкода в голову. Вміщує 5 куль.",
        "REVENANT",
        "Revolver2",
        "Має високу шкоду, але шумний. Вміщує 5 куль.",
        "СМЕРТЬ + ПОДАТКИ",
        "Revolver1",
        "Висока швидкострільність. Вміщує 14 куль.",
        "ПІСТОЛЕТ 9мм",
        "Pistol",
        "Пістолет з великим магазином. Вміщує 10 набоїв.",
        "ПІСТОЛЕТ 9мм З ГЛУШНИКОМ",
        "SPistol",
        "Тиха зброя, але з нижчою шкодою. Вміщує 10 набоїв.",
        "СВІТЛО-ШУМОВА ГРАНАТА",
        "Grenade",
        "Приголомшує всіх ворогів поблизу.",
        "МОЛОТОК",
        "Hammer",
        "Середня швидкість атаки. Можна кинути.",
        "БОЙОВИЙ ДРОБОВИК",
        "PShotgun",
        "Помповий дробовик. Вміщує 5 набоїв.",
        "ПК ТОМПСОНА",
        "Tommy",
        "Висока шкода. Вміщує 40 набоїв.",
        "ПІСТОЛЕТ 10мм",
        "PistolBig",
        "ОБРІЗ",
        "Sawed",
        "ГВИНТІВКА З ЗАТВОРОМ",
        "Rifle",
        "Дуже висока шкода вистрілом в голову. Вміщує 7 набоїв.",
        "НІЖ",
        "Knife",
        "Швидка зброя ближнього бою. Можна кинути.",
        "ТАКТИЧНИЙ ПІСТОЛЕТ-КУЛЕМЕТ",
        "Sub",
        "Тиха зброя з лазерним вказівником. Вміщує 30 набоїв.",
        "ПІСТОЛЕТ-КУЛЕМЕТ 9мм",
        "Uzi",
        "Швидкий, але не точний. Вміщує 30 набоїв.",
        "progress: ",
        "joy_cd",
        "gamepad_is_connected",
        "gamepad_set_axis_deadzone",
        "read_prefs",
        "test name",
        "ACH_",
        "test des",
        "tvar",
        "Завоювання",
        "Отримати всі досягнення.",
        "Голод",
        "Пройти гру за 1 годину не виходячи з неї.",
        "Смерть",
        "Пройти всю гру без смертей та не виходячи.",
        "Війна",
        "Отримати ранг в 5 зірок на всіх рівнях.",
        "Професіонал",
        "Пройти рівень тільки вистрілами в голову.",
        "Зарахований",
        "Пройти першу місію.",
        "Скинутий з престолу",
        "Вбити нежить... використовуючи туалет.",
        "Карбування монет",
        "Кипити зброю у Харона.",
        "Культура касет",
        "Зібрати всі касети пам'яті.",
        "Традиція",
        "Пройти рівень використовуючи лише зброю ближнього бою.",
        "Ні, я в нормі",
        "Вбити Паффа не використовуючи ПК Томпсона.",
        "Боєць без правил",
        "Забити Викидайла в ближньому бою до смерті.",
        "Баба Яга",
        "Пройти \"Страшило\" непомічиним.",
        "Зомбі Кінгз: Пройдено",
        "Пройти всі місії \"Зомбі Кінгз\".",
        "Акробат",
        "Вбити вампіра в повітрі.",
        "Нехай мертві відпочинуть",
        "Пройти \"Криваву Мері\", не давши жодному вампіру відродитися.",
        "Послуга за послугу",
        "Вбити Ембер зброєю ближнього бою, а Евелін - зброєю дальнього бою.",
        "1000 Річні королівські: Пройдено",
        "Пройти всі місії \"1000 Річні королівські\".",
        "Пірует",
        "Вбийте Сержанта під час обертання.",
        "Розкрадач могил",
        "ACH_GANG3_2",
        "Знищити тіло під час відродження.",
        "Побічний збиток",
        "Пройти 'Майстер Тімур' вбиваючи лише пастками.",
        "Спустошені: Пройдено",
        "ACH_GANG3_4",
        "Пройти всі місії \"Спустошені\".",
        "Le Sniper Du Cœur",
        "Зачистіть гніздо Валл вбиваючи тільки в голову.",
        "З тіні",
        "Пройти \"Ібзан\" непоміченим.",
        "cutscene_grid",
        "Reaper",
        "Punk",
        "Bully",
        "Bouncer",
        "Shambler",
        "Succubus",
        "Incubus",
        "Bartender",
        "Nightcrawler",
        "Sergeant",
        "Grunt",
        "Temur",
        "Cardinal",
        "Maiden",
        "Patriarch",
        "Candle",
        "Candle, Low",
        "Candle, Dead",
        "Fireplace",
        "Lighter",
        "Lighter, on",
        "Notes",
        "Notes, Car",
        "Notes, Bloody",
        "background_x",
        "background_y",
        "part_system_position",
        "background_get_height",
        "lv1_2.nc",
        "lv1_4.nc",
        "lv1_7.nc",
        "lv1_8.nc",
        "lv2_1.nc",
        "lv2_4.nc",
        "lv2_5.nc",
        "lv2_6.nc",
        "lv2_7.nc",
        "lv3_8.nc",
        "lv3_8_3.nc",
        "lv3_9.nc",
        "Трек змінено на: ",
        "audio_get_name",
        "_lp",
        "keyboard_check",
        "keyboard_check_released",
        "gamepad_button_check",
        "gamepad_button_check_pressed",
        "gamepad_button_check_released",
        "part_particles_clear",
        "lv1_4_hard.nc",
        "lv2_1_hard.nc",
        "dia_lv1_4.json",
        "dia_lv2_1.json",
        "dia_lv2_3.json",
        "dia_lv3_5.json",
        "dia_lv3_7.json",
        "dia_lv4_2.json",
        "room_exists",
        "pause_game",
        "unpause_game",
        "tshrink_scale",
        "texture_set_interpolation",
        "mp_grid_draw",
        "\\Screenshots\\db_sc",
        ".png",
        "screen_save",
        "next",
        "Stage cleared",
        "NA",
        "target_room",
        "tlife",
        "part_name",
        "ttop",
        "radius_real",
        "draw_ellipse",
        "txpreviouss",
        "typreviouss",
        "txprevious",
        "typrevious",
        "turn_sp",
        "target_jitter",
        "freq",
        "sp_pause",
        "sp_pause_immune",
        "k",
        "x_pos",
        "vx",
        "ax",
        "flame_height",
        "smoke_angle",
        "ff",
        "m",
        "a_theta",
        "a_x",
        "a_y",
        "v_theta",
        "v_x",
        "v_y",
        "target_theta",
        "hit_phys",
        "hit",
        "reflect",
        "trail",
        "dradius",
        "scale",
        "tval",
        "draw_ellipse_colour",
        "alert_number",
        "volume",
        "tt",
        "tammo_missing",
        "lodged",
        "lodged_wall",
        "phy_speed",
        "impact_angle",
        "impact_xo",
        "impact_yo",
        "impact_xs",
        "radtodeg",
        "old_alpha",
        "on_fire_dur",
        "on_fire_max",
        "material",
        "'&!& ЗА УКРИТТЯ",
        "col",
        "hurt_amount",
        "physics_joint_delete",
        "has_parent",
        "tparent_found",
        "tobject_index",
        "child found: ",
        "parent found: ",
        "active: ",
        "#child: ",
        "#var1: ",
        "#var2: ",
        "#var3: ",
        "#var4: ",
        "step_position",
        "has_control",
        "trigger_command",
        "parent_has_spawned",
        "key_frame",
        "draw_fire",
        "'&!&: ПЕРЕМКНУТИ УВІМК/ВИМК",
        "electricity",
        "idle",
        "'&!&: ВІДРІЗАТИ ВСЕ ЖИВЛЕННЯ (ТИМЧАСОВО)",
        "'&!&: ТАЙМЕР ВИМКНЕННЯ#&r&'",
        "'&!&: ТАЙМЕР ВИМКНЕННЯ IN 3с",
        "&y&'E'&!&: СХОВАТИСЯ",
        "bullet_refund",
        "damage_list",
        "hit_head",
        "will_destroy",
        "toughness",
        "tlist",
        "theadshot",
        "sprite_get_name",
        "Mask",
        "tsprite_mask",
        "Testing. And then testing some more.       Big space.",
        "Testing sounds and vooooooooooooooowels. Bimp. Bimp. Banp. Bimp.",
        "Zombie 1 test. I am testing meeee",
        "Zombie 2 test. I am testing meeee",
        "Zombie 3 test. I am testing meeee",
        "...блискітки...",
        "...просто глянь...",
        "Чіпати не можна... Роланд сказав ні..",
        "Ще одна ніч.",
        "О, ти нарешті вернувся.",
        "Тобі не слід було це слухати.",
        "Це не твоє.",
        "Тобі не варто було це брати.",
        "Роланд... Я думаю він тут...!",
        "...Роланд! Бери трубку!",
        "Виглядає не дуже. Свічка стискає записку.",
        "\"ХОЛОДНО. ДЕ ТИ. ЙДИ на 1023 8th NE Highway Ave\"",
        "Дякую.",
        "Роланд сказав... жнець наближається!",
        "Ви чули про... про жнеця..?",
        "*булькання*",
        "Вам потрібно більше людей, які захищатимуть попіл!",
        "Принесіть... сваїх...",
        "Ми маєм стволи на кожному поверсі, жнець. Йди додому.",
        "Йди до боса, жнець.",
        "Ми знаєм, що ти тут, жнець. Йди додому.",
        "Жнець? Зомбі та їхні наркотики...",
        "Жнець? Ха! І страшито теж?",
        "Жнець...? Ви знущаєтесь?",
        "Він... наближається...",
        "Він прийде... і до вас теж...",
        "Напої у мене?",
        "...ти живеш поблизу?",
        "Зазвичай я цього не роблю, але...",
        "ЗАХИСТІТЬ ПОПІЛ. ВІН ВАРТУЄ БІЛЬШЕ ЧИМ ВИ.",
        "tchoice",
        "Сором... ще одна повільна ніч...",
        "Давай! Найцікавіше тільки почалося!",
        "Ти не можеш зупинити... жнива...",
        "ЗАНАДТО ПІЗНО хахаха... жнива...",
        "Вбити його!",
        "Ти добре попрацював, друже. Відчуй гордість за те, що ти допомагаєш створювати.",
        "Всередині прикріплено адресу доставки",
        "Виробнича база Bionatural, SOLID QT: 901",
        "Трупи...?",
        "Я повинен сказати босові. Може, його Свічки щось знають.",
        "БІЛЬШЕ ЧАСУ... МЕНІ ПРОСТО ПОТРІБНО БІЛЬШЕ ЧАСУ.",
        "На борту автомобіля скотчем приклеєний інформаційний лист, з адресою.",
        "\"Адреса: Seven Circles Apt. 1940 Unit No.8\"",
        "Ще один день... і ми отримаєм платню.",
        "Нарешті. Треба повернутися до того, як бос побачить, що ми зникли.",
        "Я хочу бачити тебе в світлі...!",
        "Ой, сором'язливий? Крок в світло!",
        "Не бійся... ступай в світло!",
        "Ми отримали це звідси.",
        "Ого! Я ще ніколи не був так близько до женця!",
        "Ми так близько. У нас скоро буде тепло.",
        "Підходь, не бійся мого справжнього вигляду.",
        "Дозволь побачити тебе, друже. Я просто хочу поговорити.",
        "Я знаю де ти, друже. Я тебе знайду.",
        "Так... тепло...",
        "Вибач мене... друже...",
        "Ні, ви так багато працювали. Думаю, час відпочити.",
        "Натисніть 'Q' над ворогом або світлом, і ми його знищимо!",
        "...свічки виконують роботу жнеців... цього б ніколи не сталося раніше...",
        "_gmfilesystem_initialize",
        "_guess_project_filename",
        "exename",
        "%localappdata%",
        "location",
        "%appdata%",
        "FS_set_gm_save_area",
        "FS_set_working_directory",
        "parameter_count",
        "parameter_string",
        "\\",
        "_string_rpos",
        "Runner.exe",
        "-game",
        "sub",
        "str",
        "ind",
        "FS_unique_fname",
        "fname",
        "buffer_save",
        "FS_export_raw",
        "buffer_save_ext",
        "FS_copy_fast",
        "buffer_load",
        "buffer_load_ext",
        "FS_import_image",
        "background_add",
        "background_replace",
        "background_save",
        "FS_export_image",
        "FS_export_image_adv",
        "d3d_model_load",
        ".txt",
        "d3d_model_save",
        ".bmp",
        "screen_save_part",
        "sound_add",
        "sound_replace",
        "sprite_add",
        "sprite_replace",
        "sprite_save",
        "sprite_save_strip",
        "script_execute",
        "surface_save",
        "surface_save_part",
        "deadbolt_game",
        "Default",
        "DEADBOLT",
        "GMFileSystem",
        "GMFile.dll",
        "FS_directory_create",
        "directory_create",
        "FS_directory_delete",
        "directory_delete",
        "FS_directory_exists",
        "directory_exists",
        "FS_file_attributes",
        "file_attributes",
        "FS_file_text_bad",
        "file_text_bad",
        "FS_file_bin_bad",
        "file_bin_bad",
        "FS_file_bin_close",
        "file_bin_close",
        "FS_file_bin_open",
        "file_bin_open",
        "FS_file_bin_position",
        "file_bin_position",
        "FS_file_bin_read_byte",
        "file_bin_read_byte",
        "FS_file_bin_read_dword",
        "file_bin_read_dword",
        "FS_file_bin_read_word",
        "file_bin_read_word",
        "FS_file_bin_seek",
        "file_bin_seek",
        "FS_file_bin_seek_relative",
        "file_bin_seek_relative",
        "FS_file_bin_size",
        "file_bin_size",
        "FS_file_bin_write_byte",
        "file_bin_write_byte",
        "FS_file_bin_write_dword",
        "file_bin_write_dword",
        "FS_file_bin_write_word",
        "file_bin_write_word",
        "FS_file_copy",
        "file_copy",
        "FS_file_delete",
        "FS_file_text_eof",
        "FS_file_bin_eof",
        "file_bin_eof",
        "FS_file_text_eoln",
        "file_text_eoln",
        "FS_file_exists",
        "FS_file_text_fail",
        "file_text_fail",
        "FS_file_bin_fail",
        "file_bin_fail",
        "FS_file_find_close",
        "FS_file_find_next",
        "FS_file_text_good",
        "file_text_good",
        "FS_file_bin_good",
        "file_bin_good",
        "FS_file_rename",
        "file_rename",
        "FS_file_text_clear_bad",
        "file_text_clear_bad",
        "FS_file_bin_clear_bad",
        "file_bin_clear_bad",
        "FS_file_text_clear_fail",
        "file_text_clear_fail",
        "FS_file_bin_clear_fail",
        "file_bin_clear_fail",
        "FS_file_text_open_append_ext",
        "file_text_open_append_ext",
        "FS_file_text_open_append",
        "file_text_open_append",
        "FS_file_text_open_read_ext",
        "file_text_open_read_ext",
        "FS_file_text_open_write_ext",
        "file_text_open_write_ext",
        "FS_file_text_open_write",
        "file_text_open_write",
        "FS_file_text_read_char",
        "file_text_read_char",
        "FS_file_text_read_real",
        "file_text_read_real",
        "FS_file_text_read_string",
        "file_text_read_string",
        "FS_file_text_unread",
        "file_text_unread",
        "FS_file_text_write_real",
        "file_text_write_real",
        "FS_file_text_write_string",
        "file_text_write_string",
        "FS_file_text_writeln",
        "file_text_writeln",
        "FS_file_text_write_bom",
        "file_text_write_bom",
        "FS_file_text_write_flush",
        "file_text_write_flush",
        "FS_file_bin_write_flush",
        "file_bin_write_flush",
        "FS_max_open",
        "max_open",
        "FS_set_locale",
        "set_locale",
        "FS_file_text_set_endl",
        "file_text_set_endl",
        "FS_file_text_set_endl_windows",
        "file_text_set_endl_windows",
        "FS_file_text_set_endl_posix",
        "file_text_set_endl_posix",
        "FS_current_directory",
        "current_directory",
        "GMResource.dll",
        "FS_clean_temporary",
        "set_working_directory",
        "set_gm_save_area",
        "clean_temporary",
        "import_image",
        "copy_fast",
        "export_image",
        "export_image_adv",
        "FS_export_sound",
        "export_soumd",
        "find_unique_fname",
        "export_raw",
        "GMResources.gml",
        "FS_gmfilesystem_initialize_detail",
        "wVoiceZomb1",
        "wVoiceZomb1.ogg",
        "wVoiceZomb2",
        "wVoiceZomb2.ogg",
        "wVoiceZomb3",
        "wVoiceZomb3.ogg",
        "wVoiceVampM1",
        "wVoiceVampM1.ogg",
        "wVoiceVampM2",
        "wVoiceVampM2.ogg",
        "wVoiceVampM3",
        "wVoiceVampM3.ogg",
        "wVoiceVampM4",
        "wVoiceVampM4.ogg",
        "wVoiceVampF1",
        "wVoiceVampF1.ogg",
        "wVoiceVampF2",
        "wVoiceVampF2.ogg",
        "wVoiceVampF3",
        "wVoiceVampF3.ogg",
        "wVoiceSkele11",
        "wVoiceSkele11.ogg",
        "wVoiceSkele12",
        "wVoiceSkele12.ogg",
        "wVoiceSkele21",
        "wVoiceSkele21.ogg",
        "wVoiceSkele22",
        "wVoiceSkele22.ogg",
        "wSpellChannel",
        "wSpellChannel.ogg",
        "wSpellFinish",
        "wSpellFinish.ogg",
        "wDogBark1",
        "wDogBark1.ogg",
        "wDogBark2",
        "wDogBark2.ogg",
        "wZombAlarm",
        "wZombAlarm.ogg",
        "wStep1",
        "wStep1.ogg",
        "wStep2",
        "wStep2.ogg",
        "wStep3",
        "wStep3.ogg",
        "wStepSnow1",
        "wStepSnow1.ogg",
        "wStepSnow2",
        "wStepSnow2.ogg",
        "wStepSnow3",
        "wStepSnow3.ogg",
        "wTapeRollover",
        "wTapeRollover.ogg",
        "wTapeSelect",
        "wTapeSelect.ogg",
        "wPortalActivate",
        "wPortalActivate.ogg",
        "wPortalOpen",
        "wPortalOpen.ogg",
        "wMinigunClick",
        "wMinigunClick.ogg",
        "wMinigunFire",
        "wMinigunFire.ogg",
        "wGl",
        "wGl.ogg",
        "wM16",
        "wM16.ogg",
        "wM16Ready",
        "wM16Ready.ogg",
        "wMineReady",
        "wMineReady.ogg",
        "wExplosion",
        "wExplosion.ogg",
        "wSniper",
        "wSniper.ogg",
        "wRevolver",
        "wRevolver.ogg",
        "wRevolverReady",
        "wRevolverReady.ogg",
        "wPistol",
        "wPistol.ogg",
        "wPistolReady",
        "wPistolReady.ogg",
        "wUzi",
        "wUzi.ogg",
        "wUziReady",
        "wUziReady.ogg",
        "wPistolBig",
        "wPistolBig.ogg",
        "wPistolBigReady",
        "wPistolBigReady.ogg",
        "wSawed",
        "wSawed.ogg",
        "wSawedReady",
        "wSawedReady.ogg",
        "wPShotgun",
        "wPShotgun.ogg",
        "wPShotgunReady",
        "wPShotgunReady.ogg",
        "wTommy",
        "wTommy.ogg",
        "wTommyReady",
        "wTommyReady.ogg",
        "wRifle",
        "wRifle.ogg",
        "wRifleReady",
        "wRifleReady.ogg",
        "wBPistol",
        "wBPistol.ogg",
        "wBPistolReady",
        "Windows Ding.wav",
        "wSPistol",
        "wSPistol.ogg",
        "wSPistolReady",
        "Windows Ding_0.wav",
        "wSShotgun",
        "Windows Ding_1.wav",
        "wGunEmpty",
        "wGunEmpty.ogg",
        "wSwing",
        "wSwing.ogg",
        "wHitHammer",
        "wHitHammer.ogg",
        "wHeadshot",
        "wHeadshot.ogg",
        "wImpactFlesh",
        "wImpactFlesh.ogg",
        "wElevatorMove",
        "wElevatorMove.ogg",
        "wElevatorDoorClose",
        "wElevatorDoorClose.ogg",
        "wElevatorDoorOpen",
        "wElevatorDoorOpen.ogg",
        "wTrunkOpen",
        "wTrunkOpen.ogg",
        "wTrunkClose",
        "wTrunkClose.ogg",
        "wAchievement",
        "wAchievement.ogg",
        "wCrowCaw",
        "wCrowCaw.ogg",
        "wTakeCover",
        "wTakeCover.ogg",
        "wTimeAlarm1",
        "wTimeAlarm1.ogg",
        "wTimeAlarm2",
        "wTimeAlarm2.ogg",
        "wKnife",
        "wKnife.ogg",
        "wFireAlarm",
        "wFireAlarm.ogg",
        "wBurning",
        "wBurning.ogg",
        "wFireball",
        "wFireball.ogg",
        "wLighter",
        "wLighter.ogg",
        "wZap",
        "wZap.ogg",
        "wGlassShatter",
        "wGlassShatter.ogg",
        "wMicrowaveBeep",
        "wMicrowaveBeep.ogg",
        "wCarLoop",
        "wCarLoop.ogg",
        "wCarStart",
        "wCarStart.ogg",
        "wCarAlarm",
        "wCarAlarm.ogg",
        "wLightswitch",
        "wLightswitch.ogg",
        "wKnock",
        "wKnock.ogg",
        "wDoorOpen",
        "wDoorOpen.ogg",
        "wDoorClose",
        "wDoorClose.ogg",
        "wPage",
        "wPage.ogg",
        "wSawedMuffled",
        "wSawedMuffled.ogg",
        "wKnockMuffled",
        "wKnockMuffled.ogg",
        "wPistolMuffled",
        "wPistolMuffled.ogg",
        "wRevolverMuffled",
        "wRevolverMuffled.ogg",
        "DBR0",
        "DBR0.ogg",
        "DBR0_lp",
        "Windows Ding_2.ogg",
        "DBB1",
        "DBB1.ogg",
        "DBB1_lp",
        "DBB1_lp.ogg",
        "DBB2",
        "DBB2.ogg",
        "DBB2_lp",
        "DBB2_lp.ogg",
        "DBF1",
        "DBF1.ogg",
        "DBF1_lp",
        "DBF1_lp.ogg",
        "DBH3",
        "DBH3.ogg",
        "DBH3_lp",
        "DBH3_lp.ogg",
        "DBH5",
        "DBH5.ogg",
        "DBH5_lp",
        "DBH5_lp.ogg",
        "DBH6",
        "DBH6.ogg",
        "DBH6_lp",
        "DBH6_lp.ogg",
        "DBH7",
        "DBH7.ogg",
        "DBH7_lp",
        "DBH7_lp.ogg",
        "DBV1",
        "DBV1.ogg",
        "DBV1_lp",
        "DBV1_lp.ogg",
        "DBV2",
        "DBV2.ogg",
        "DBV2_lp",
        "DBV2_lp.ogg",
        "DBV4",
        "DBV4.ogg",
        "DBV4_lp",
        "DBV4_lp.ogg",
        "DBX1",
        "DBX1.ogg",
        "DBX1_lp",
        "DBX1_lp.ogg",
        "DBX5",
        "DBX5.ogg",
        "DBX5_lp",
        "DBX5_lp.ogg",
        "DBX6",
        "DBX6.ogg",
        "DBX6_lp",
        "DBX6_lp.ogg",
        "DBV7",
        "DBV7.ogg",
        "DBV7_lp",
        "DBV7_lp.ogg",
        "DBX8",
        "DBX8.ogg",
        "DBX8_lp",
        "DBX8_lp.ogg",
        "DBX9",
        "DBX9.ogg",
        "DBX9_lp",
        "DBX9_lp.ogg",
        "DBX11",
        "DBX11.ogg",
        "DBX11_lp",
        "DBX11_lp.ogg",
        "DBY1",
        "DBY1.ogg",
        "DBY1_lp",
        "DBY1_lp.ogg",
        "sWallpaper1",
        "sWallpaperFront1",
        "sWallpaper2",
        "sWallpaperFront2",
        "sWallpaper3",
        "sWallpaperFront3",
        "sWallpaper4",
        "sWallpaperFront4",
        "sWallpaper5",
        "sWallpaperFront5",
        "sWallpaper6",
        "sWallpaperFront6",
        "sWallpaper7",
        "sWallpaperFront7",
        "sWallpaper8",
        "sWallpaperFront8",
        "sWallpaper9",
        "sWallpaperFront9",
        "sWallpaper10",
        "sWallpaperFront10",
        "sWallpaper11",
        "sWallpaperFront11",
        "sWallpaper12",
        "sWallpaperFront12",
        "sWallpaper13",
        "sWallpaperFront13",
        "sWallpaper14",
        "sWallpaperFront14",
        "sWallpaper15",
        "sWallpaperFront15",
        "sWallpaper16",
        "sWallpapeFront16",
        "sB",
        "sBSlope",
        "sCranePath1",
        "sCraneTower1",
        "sCrate1Behind",
        "sCrate1Front",
        "sCrate2",
        "sBalcony1",
        "sBalcony2",
        "sStair1",
        "sGround1",
        "sGround2",
        "sDock",
        "sElevatorSignal",
        "sElevator1Button",
        "sLadder1",
        "sDoorElevator",
        "sElevator1",
        "sDoor1",
        "sDoor2",
        "sDoor3",
        "sDoor4",
        "sStairwell1",
        "sStairwell2",
        "sZomb1Idle",
        "sZomb1Jump",
        "sZomb1Reload",
        "sZomb1Walk",
        "sZomb1Crouch",
        "sZomb1CrouchMask",
        "sZomb1Aim",
        "sZomb1Fire",
        "sZomb1Sit",
        "sZomb1SitMask",
        "sZomb1Sleep",
        "sZomb1SleepMask",
        "sZomb1Smoke",
        "sZomb1Hit",
        "sZomb1Run",
        "sZomb1MaskCrouch",
        "sZomb1StunnedMask",
        "sPhysHeadZomb1",
        "sPhysBodyZomb1",
        "sPhysULegZomb1",
        "sPhysLLegZomb1",
        "sZomb2Jump",
        "sZomb2Idle",
        "sZomb2IdleMask",
        "sZomb2Hit",
        "sZomb2HitMask",
        "sZomb2Sit",
        "sZomb2SitMask",
        "sZomb2Crouch",
        "sZomb2Walk",
        "sZomb2WalkMask",
        "sZomb2Run",
        "sZomb2Reload",
        "sZomb2ReloadMask",
        "sZomb2Aim",
        "sZomb2AimMask",
        "sZomb2Fire",
        "sPhysLArmZomb2",
        "sPhysUArmZomb2",
        "sPhysHeadZomb2",
        "sPhysBodyZomb2",
        "sZomb2Mask",
        "sZomb3Jump",
        "sZomb3Head",
        "sZomb3Fire",
        "sZomb3Idle",
        "sZomb3Crouch",
        "sZomb3Hit",
        "sZomb3Reload",
        "sZomb3Aim",
        "sZomb3Run",
        "sPhysBodyZomb3",
        "sPhysUArmZomb3",
        "sZomb4Jump",
        "sPhysHeadZomb4",
        "sPhysBodyZomb4",
        "sPhysULegZomb4",
        "sPhysLLegZomb4",
        "sPhysUArmZomb4",
        "sZomb4Idle",
        "sZomb4Crouch",
        "sZomb4Sit",
        "sZomb4SitMask",
        "sZomb4Smash",
        "sZomb4Mask",
        "sZomb4Hit",
        "sZomb4Walk",
        "sZomb4Run",
        "sZomb4RunMask",
        "sPhysHeadZombBoss1",
        "sPhysBodyZombBoss1",
        "sPhysLArmZombBoss1",
        "sPhysUArmZombBoss1",
        "sZombBoss1Death",
        "sZombBoss1ThreatenBegin",
        "sZombBoss1Threaten",
        "sZombBoss1ThreatenEnd",
        "sZombBoss1Hit",
        "sZombBoss1Reload",
        "sZombBoss1Idle",
        "sZombBoss1Fire",
        "sZombBoss1Aim2H",
        "sZombBoss1Crouch",
        "sZombBoss1MaskCrouch",
        "sZombBoss1Walk",
        "sZombBoss1Cover",
        "sZombBoss1Stand",
        "sZombBoss1SitCall",
        "sZombBoss1SitIdle",
        "sZombCamera",
        "sChains",
        "sZombCameraHeadIdle",
        "sZombCameraHeadAlert",
        "sZombBoss2Reload",
        "sZombBoss2Death",
        "sZombBoss2Idle",
        "sZombBoss2Jump",
        "sZombBoss2Hit",
        "sZombBoss2Aim",
        "sZombBoss2Crouch",
        "sZombBoss2Fire",
        "sZombBoss2Walk",
        "sPhysHeadDog1",
        "sPhysBodyDog1",
        "sPhysFLegDog1",
        "sPhysBLegDog1",
        "sPhys",
        "sDog1Alert",
        "sDog1Pounce",
        "sDog1Jump",
        "sDog1PounceMask",
        "sDog1Idle",
        "sDog1Hit",
        "sDog1Crouch",
        "sDog1Door",
        "sDog1Run",
        "sDog1Walk",
        "sDog1Mask",
        "sEmoteAlert",
        "sEmoteAlert2",
        "sEmoteCurious",
        "sEmoteStun1",
        "sEmoteStun2",
        "sEmoteStun",
        "sVamp1Asleep",
        "sVamp1Jump",
        "sVamp1Flip",
        "sVamp1FlipMask",
        "sVamp1Reload",
        "sPhysBodyVamp1",
        "sPhysHeadVamp1",
        "sPhysLLegVamp1",
        "sPhysULegVamp1",
        "sPhysLArmVamp1",
        "sPhysUArmVamp1",
        "sVamp1Fire",
        "sVamp1Dance1",
        "sVamp1Idle",
        "sVamp1IdleMask",
        "sVamp1Walk",
        "sVamp1WalkMask",
        "sVamp1Hit",
        "sVamp1HitMask",
        "sVamp1Crouch",
        "sVamp1CrouchMask",
        "sVamp1Stand",
        "sVamp1Aim",
        "sVamp1AimMask",
        "sVamp1Sit",
        "sVamp1SitMask",
        "sVamp1Aim2H",
        "sVamp2Asleep",
        "sVamp2JumpOutfit1",
        "sVamp2FlipOutfit1",
        "sVamp2FlipOutfit1Mask",
        "sVamp2CrouchOutfit1",
        "sVamp2Dance1Outfit1",
        "sVamp2Dance1AltOutfit1",
        "sVamp2Dance2Outfit1",
        "sVamp2Dance2AltOutfit1",
        "sVamp2IdleOutfit1",
        "sVamp2IdleOutfit1Mask",
        "sVamp2SitOutfit1",
        "sVamp2SitOutfit1Mask",
        "sVamp2RunOutfit1",
        "sVamp2RunOutfit1Mask",
        "sVamp2SmashOutfit1",
        "sVamp2SmashOutfit1Mask",
        "sVamp2WalkOutfit1",
        "sVamp2HitOutfit1",
        "sVamp2HitOutfit1Mask",
        "sPhysHeadVamp2Outfit1",
        "sPhysBodyVamp2Outfit1",
        "sPhysUArmVamp2Outfit1",
        "sPhysLArmVamp2Outfit1",
        "sPhysULegVamp2Outfit1",
        "sPhysLLegVamp2Outfit1",
        "sPhysHeadVamp3",
        "sPhysBodyVamp3",
        "sPhysUArmVamp3",
        "sPhysLArmVamp3",
        "sVamp3Death",
        "sVamp3Res",
        "sVamp3Idle",
        "sVamp3IdleMask",
        "sVamp3Crouch",
        "sVamp3Reload",
        "sVamp3Aim2H",
        "sVamp3Aim2HMask",
        "sVamp3Hit",
        "sVamp3HitMask",
        "sVamp3Walk",
        "sVamp3Mask",
        "sVamp3Jump",
        "sVamp3Pour1",
        "sVamp3Pour2",
        "sVamp3Gem",
        "sVamp3Fire",
        "sBat1Fly",
        "sPhysHeadVamp4",
        "sPhysBodyVamp4",
        "sPhysUArmVamp4",
        "sPhysLArmVamp4",
        "sVamp4Fire",
        "sVamp4Walk",
        "sVamp4WalkMask",
        "sVamp4Jump",
        "sVamp4Hit",
        "sVamp4HitMask",
        "sVamp4Aim",
        "sVamp4AimMask",
        "sVamp4Idle",
        "sVamp4IdleMask",
        "sVamp4Reload",
        "sVamp4ReloadMask",
        "sVamp4Crouch",
        "sVampBoss11Death",
        "sVampBoss11Res",
        "sVampBoss11Crouch",
        "sVampBoss11Walk",
        "sVampBoss11Reload",
        "sVampBoss11Idle",
        "sVampBoss11Jump",
        "sVampBoss11Hit",
        "sVampBoss11Fire",
        "sVampBoss11Aim2H",
        "sVampBoss12Smash",
        "sVampBoss12Death",
        "sVampBoss12Res",
        "sVampBoss12Run",
        "sVampBoss12Walk",
        "sVampBoss12Jump",
        "sVampBoss12Idle",
        "sVampBoss12Hit",
        "sVampBoss2Death",
        "sVampBoss2Gem",
        "sVampBoss2Res",
        "sVampBoss2Fire",
        "sVampBoss2Idle",
        "sVampBoss2Jump",
        "sVampBoss2Crouch",
        "sVampBoss2Reload",
        "sVampBoss2Aim2H",
        "sVampBoss2Walk",
        "sGhostIdle",
        "sPhysHeadSkele1",
        "sPhysBodySkele1",
        "sPhysUArmSkele1",
        "sPhysLArmSkele1",
        "sPhysULegSkele1",
        "sPhysLLegSkele1",
        "sSkele1Spawn",
        "sSkele1Crouch",
        "sSkele1Idle",
        "sSkele1Hit",
        "sSkele1IdleMask",
        "sSkele1Walk",
        "sSkele1WalkMask",
        "sSkele1Jump",
        "sSkele1Smash",
        "sSkele1Run",
        "sSkele1RunMask",
        "sPhysHeadSkele2",
        "sSkele2Spawn",
        "sPhysBodySkele2",
        "sPhysULegSkele2",
        "sPhysLLegSkele2",
        "sPhysUArmSkele2",
        "sPhysLArmSkele2",
        "sSkele2Walk",
        "sSkele2Reload",
        "sSkele2Jump",
        "sSkele2Hit",
        "sSkele2Fire",
        "sSkele2Crouch",
        "sSkele2Idle",
        "sSkele2Sit",
        "sSkele2SitMask",
        "sSkele2Aim2H",
        "sSkele3Mine",
        "sSkele3MineMask",
        "sSkele3Run",
        "sSkele3RunMask",
        "sPhysHeadSkele3",
        "sPhysBodySkele3",
        "sSkele3Reload",
        "sSkele3ReloadMask",
        "sSkele3Hit",
        "sSkele3HitMask",
        "sSkele3Crouch",
        "sSkele3Idle",
        "sSkele3IdleMask",
        "sSkele3Jump",
        "sSkele3Aim",
        "sSkele3AimMask",
        "sSkele3Fire",
        "sPhysHeadSkele5",
        "sSkele5ResEffect",
        "sSkele5Fire",
        "sSkele5Idle",
        "sSkele5IdleMask",
        "sSkele5Aim",
        "sSkele5AimMask",
        "sSkele5Jump",
        "sSkele5Walk",
        "sSkele5WalkMask",
        "sSkele5Reload",
        "sSkele5Crouch",
        "sSkele5Hit",
        "sSkele5HitMask",
        "sSkele5Res",
        "sSkele5ResMask",
        "sTotem1Idle",
        "sSkeleBoss1Dead",
        "sSkeleBoss1Idle",
        "sSkeleBoss2DyingFall",
        "sSkeleBoss2DyingAim2H",
        "sSkeleBoss2DyingIdle",
        "sSkeleBoss2DyingFire",
        "sSkeleBoss2DyingDeath",
        "sSkeleBoss2Stumble1",
        "sSkeleBoss2Stumble1Blood",
        "sSkeleBoss2Death",
        "sSkeleBoss2Teleport",
        "sSkeleBoss2Reload",
        "sSkeleBoss2Jump",
        "sSkeleBoss2Run",
        "sSkeleBoss2Aim2H",
        "sSkeleBoss2Aim2HMask",
        "sSkeleBoss2Crouch",
        "sSkeleBoss2CrouchMask",
        "sSkeleBoss2Fire",
        "sSkeleBoss2Walk",
        "sSkeleBoss2WalkMask",
        "sSkeleBoss2Idle",
        "sSkeleBoss2IdleMask",
        "sPhysHeadOni1",
        "sOni1Teleport",
        "sPhysBodyOni1",
        "sPhysUArmOni1",
        "sPhysLArmOni1",
        "sOni1Idle",
        "sOni1Crouch",
        "sOni1Jump",
        "sOni1Smash",
        "sOni1SmashMask",
        "sOni1Hit",
        "sOni1Run",
        "sOni1Walk",
        "sPhysHeadOni2",
        "sPhysBodyOni2",
        "sPhysLArmOni2",
        "sPhysULegOni2",
        "sPhysLLegOni2",
        "sOni2Fire",
        "sOni2Walk",
        "sOni2Jump",
        "sOni2Hit",
        "sOni2Crouch",
        "sOni2Aim2H",
        "sOni2Idle",
        "sOni2Reload",
        "sPhysHeadOni3",
        "sPhysBodyOni3",
        "sPhysULegOni3",
        "sPhysLLegOni3",
        "sPhysLArmOni3",
        "sPhysUArmOni3",
        "sOni3IdleMask",
        "sOni3WalkMask",
        "sOni3SpoolMask",
        "sOni3FireMask",
        "sOni3Idle",
        "sOni3Crouch",
        "sOni3Reload",
        "sOni3Aim",
        "sOni3Walk",
        "sOni3Run",
        "sOni3Jump",
        "sOni3Spool",
        "sOni3Fire",
        "sOniBoss1Idle",
        "sOniBoss1Death",
        "sOniBoss1Headshot",
        "sTrapPlate",
        "sTrapShotgunIdle",
        "sTrapShotgunDisarm",
        "sCar1",
        "sCar2",
        "sCar3",
        "sPIdleRevolver1",
        "sPRunRevolver1",
        "sPCrouchRevolver1",
        "sPFireRevolver1",
        "sPJumpRevolver1",
        "sPIdleRevolver2",
        "sPJumpRevolver2",
        "sPRunRevolver2",
        "sPCrouchRevolver2",
        "sPFireRevolver2",
        "sPIdleRevolver3",
        "sPRunRevolver3",
        "sPCrouchRevolver3",
        "sPJumpRevolver3",
        "sPFireRevolver3",
        "sPIdleRevolver",
        "sPJumpRevolver",
        "sPWalkRevolver",
        "sPRunRevolver",
        "sPCrouchRevolver",
        "sPFireRevolver",
        "sPIdleSawed",
        "sPJumpSawed",
        "sPRunSawed",
        "sPFireSawed",
        "sPFireBuss",
        "sPCrouchSawed",
        "sPIdleKnife",
        "sPRunKnife",
        "sPJumpKnife",
        "sPCrouchKnife",
        "sPSmashKnife1",
        "sPSmashKnife2",
        "sStabMask",
        "sPFireKnife",
        "sPIdleUzi",
        "sPJumpUzi",
        "sPRunUzi",
        "sPCrouchUzi",
        "sPFireUzi",
        "sPRunGrenade",
        "sPFireGrenade",
        "sPJumpGrenade",
        "sPCrouchGrenade",
        "sPIdleGrenade",
        "sPFirePistol",
        "sPRunPistol",
        "sPIdlePistol",
        "sPJumpPistol",
        "sPCrouchPistol",
        "sPCrouchRifle",
        "sPFireRifle",
        "sPRunRifle",
        "sPIdleRifle",
        "sPJumpRifle",
        "sPCrouchTommy",
        "sPJumpTommy",
        "sPFireTommy",
        "sPRunTommy",
        "sPIdleTommy",
        "sPIdlePShotgun",
        "sPJumpPShotgun",
        "sPRunPShotgun",
        "sPFirePShotgun",
        "sPCrouchPShotgun",
        "sPCrouchPistolBig",
        "sPJumpPistolBig",
        "sPRunPistolBig",
        "sPIdlePistolBig",
        "sPFirePistolBig",
        "sPFireHammer",
        "sPSmashHammer1",
        "sMaskHammer",
        "sPSmashHammer2",
        "sPIdleHammer",
        "sPJumpHammer",
        "sPCrouchHammer",
        "sPRunHammer",
        "sPFireSPistol",
        "sPJumpSPistol",
        "sPRunSPistol",
        "sPCrouchSPistol",
        "sPIdleSPistol",
        "sPRunSickle",
        "sPIdleSickle",
        "sArrow",
        "sPIdleXbow",
        "sPFireXbow",
        "sPRunXbow",
        "sPCrouchXbow",
        "sPJumpSub",
        "sPFireSub",
        "sPIdleSub",
        "sPCrouchSub",
        "sPRunSub",
        "sPIdleSledge",
        "sPJumpSledge",
        "sPCrouchSledge",
        "sPSmashSledge1",
        "sPSmashSledge2",
        "sMaskSledge",
        "sPRunSledge",
        "sPFirePPistol",
        "sPIdlePPistol",
        "sPRunPPistol",
        "sPJumpPPistol",
        "sPCrouchPPistol",
        "sPIdleBuss",
        "sPRunBuss",
        "sPJumpBuss",
        "sPCrouchBuss",
        "sPIdleShuri",
        "sPJumpShuri",
        "sPRunShuri",
        "sPCrouchShuri",
        "sPFireShuri",
        "sPFireAK",
        "sPJumpAK",
        "sPCrouchAK",
        "sPIdleAK",
        "sPRunAK",
        "sPFireP90",
        "sPCrouchP90",
        "sPJumpP90",
        "sPRunP90",
        "sPIdleP90",
        "sPIdleMine",
        "sPJumpMine",
        "sPRunMine",
        "sPCrouchMine",
        "sPSmashMine1",
        "sPSmashMine2",
        "sPIdleGl",
        "sPRunGl",
        "sPJumpGl",
        "sPFireGl",
        "sPCrouchGl",
        "sPRunPlasma",
        "sPFirePlasma",
        "sPCrouchPlasma",
        "sPIdlePlasma",
        "sPJumpPlasma",
        "sPIdleAShotgun",
        "sPJumpAShotgun",
        "sPRunAShotgun",
        "sPCrouchAShotgun",
        "sPFireAShotgun",
        "sPCrouchSShotgun",
        "sPFireSShotgun",
        "sPRunSShotgun",
        "sPJumpSShotgun",
        "sPIdleSShotgun",
        "sPFireM16",
        "sPRunM16",
        "sPJumpM16",
        "sPCrouchM16",
        "sPIdleM16",
        "sPFireScythe",
        "sScytheMask",
        "sPSmashScythe1",
        "sPSmashScythe2",
        "sPRunScythe",
        "sPCrouchScythe",
        "sPJumpScythe",
        "sPIdleScythe",
        "sLevelTrans",
        "sGodIdleFlame",
        "sGodIdle",
        "sPRunAGl",
        "sPFireAGl",
        "sPJumpAGl",
        "sPCrouchAGl",
        "sPIdleAGl",
        "sPMask",
        "sPMaskBlank",
        "sPMaskCrouch",
        "sPTeleportOut",
        "sPlayerSniper",
        "sPLighter",
        "sPSmash1",
        "sPSmash2",
        "sPTeleportIn",
        "sPRoll",
        "sPFire",
        "sPIdle",
        "sPRun",
        "sPJump",
        "sPCrouch",
        "sPWalk",
        "sPAim",
        "sPAim2H",
        "sPClimbOver",
        "sPClimb",
        "sPAimClimb",
        "sPAimClimb2H",
        "sPAimCrouch",
        "sPMaskEmpty",
        "sPKnock",
        "sMeatPortal",
        "sCrateMeatBehind",
        "sCarIbzan",
        "sDeadReaper1",
        "sPhysHeadP",
        "sPhysBodyP",
        "sPhysUArmP",
        "sPhysLArmP",
        "sPhysULegP",
        "sPhysLLegP",
        "sPFireBPistol",
        "sPRunBPistol",
        "sPIdleBPistol",
        "sCarOpen",
        "sCarOpenLight",
        "sCarIdle",
        "sPExecute",
        "sPSmash",
        "sSmallCandle1",
        "sFloodLight1",
        "sConstructionLight1",
        "sConstructionLight2",
        "sLampFloor1",
        "sDockLight",
        "sLightfixture1",
        "sLightfixture2",
        "sLightfixture3",
        "sLightfixture4",
        "sLightfixture5",
        "sLightFixture6",
        "sStrobeLight",
        "sPartySpotlight",
        "sConeMask",
        "sPendantLight1",
        "sPendantLight2",
        "sPendantLight3",
        "sWarehouseLight1",
        "sLightpost2",
        "sLightpost1",
        "sLightswitch1",
        "sAGlPickup",
        "sScythePickup",
        "sScytheSmallPickup",
        "sM16Pickup",
        "sPlasmaPickup",
        "sGlPickup",
        "sGrenade1",
        "sMinePickup",
        "sCassettePickup",
        "sKeycardPickup",
        "sAKPickup",
        "sSledgePickup",
        "sXbowPickup",
        "sPShotgunPickup",
        "sAShotgunPickup",
        "sSShotgunPickup",
        "sSubPickup",
        "sGrenadePickup",
        "sBPistolPickup",
        "sHammerPickup",
        "sKnifeblock",
        "sKnifePickup",
        "sShuriPickup",
        "sPistolPickup",
        "sPPistolPickup",
        "sPistolBigPickup",
        "sRevolverPickup",
        "sRevolver1Pickup",
        "sRevolver2Pickup",
        "sRevolver3Pickup",
        "sSawedPickup",
        "sBussPickup",
        "sSPistolPickup",
        "sTommyPickup",
        "sUziPickup",
        "sP90Pickup",
        "sRiflePickup",
        "sArcade1",
        "sCarCover",
        "sTable7",
        "sTable8",
        "sPoolTable1",
        "sBarChair1",
        "sBarCouch1",
        "sBarCouch2",
        "sDrawer1",
        "sBed1",
        "sBed2",
        "sBed3",
        "sDrugTable",
        "sCouch1",
        "sCouch2",
        "sCouch3",
        "sPartyCouch1",
        "sPartyCouch2",
        "sPartyCouch3",
        "sTV1",
        "sTV2",
        "sprite235",
        "sFridge1",
        "sFilingCabinet1",
        "sTable2Idle",
        "sTable2Left",
        "sBar1",
        "sTable2Right",
        "sCharonIdle",
        "sCharonIdleGlow",
        "sBoat",
        "sCandlePray",
        "sCandleSnipers",
        "sCandleIdle1",
        "sCandleHang1",
        "sCandlePlaceCassette",
        "sCandlePlaceCassetteGlow",
        "sAptBed",
        "sAptMirror",
        "sAptStairwell",
        "sAptChand",
        "sAptLamp",
        "sAptWindows",
        "sFireplace",
        "sAptRack",
        "sAptTable",
        "sAptCassette",
        "sAptBedside",
        "sAptRecord",
        "sAptChair",
        "sAptChairFlame",
        "sAptBox",
        "sAptBoxes",
        "sAptPatch",
        "sAptFurniture",
        "sRavenIdle1",
        "sRavenCaw",
        "sRavenIdle2",
        "sRavenFly",
        "sRavenPeck",
        "sRavenTurn",
        "sCatIdle1",
        "sCatIdle2",
        "sCatIdle3",
        "sCatIdle4",
        "sCatIdle5",
        "sCatWalkTrans",
        "sCatWalk",
        "sJukebox",
        "sDartboard",
        "sSnowSecret",
        "sArch",
        "sCarLift",
        "sCandleHolder",
        "sSnow1",
        "sPortalSign",
        "sBleacher",
        "sSkeleBoss1Scrawl",
        "sWindowSill",
        "sSmallSign1",
        "sSmallSign2",
        "sSmallSign3",
        "sPhoto1",
        "sExitSign",
        "sBackDoor1",
        "sMessVamp",
        "sNotes",
        "sDeadVamp",
        "sBarStool1",
        "sShelf1",
        "sSafe1",
        "sSafe2",
        "sBarTV1",
        "sBarSign1",
        "sBarSign2",
        "sBarShelfLong1",
        "sBarShelfLong3",
        "sBarShelf1",
        "sBarShelf2",
        "sBarShelf3",
        "sBarShelf4",
        "sTrailerWheel",
        "sWallBullet1",
        "sMotelSign",
        "sChair1",
        "sDogCage",
        "sMirror1",
        "sMirror2",
        "sMirror3",
        "sPartyMirror1",
        "sCoke1",
        "sCoke2",
        "sCoke3",
        "sCokeVamp1",
        "sCokeVamp2",
        "sCokeParticle",
        "sTutorial",
        "sWallhole1",
        "sWallhole2",
        "sWallhole3",
        "sCabinet1",
        "sCabinetFront1",
        "sCounter1",
        "sCounterFront1",
        "sWindow1",
        "sWindow2",
        "sWindow3",
        "sWindow4",
        "sWindow5",
        "sWindow6",
        "sWindow7",
        "sTable1",
        "sTable3",
        "sTable4",
        "sTable5",
        "sTable6",
        "sFlower1",
        "sFlower2",
        "sFireplace2",
        "sCoverIndicator",
        "sSink1",
        "sWell",
        "sPipeBlockValve",
        "sPipeBlock1",
        "sToilet1",
        "sBath1",
        "sDetector1Idle",
        "sDetector1Active",
        "sPipe1",
        "sPipe2",
        "sVent1",
        "sVent4",
        "sVent2",
        "sVent3",
        "sSewer",
        "sTip",
        "sSteam",
        "sSniperScope",
        "sSniperCredits",
        "sCassette",
        "sMainWindow1",
        "sMain",
        "sMainButton",
        "sMainOld",
        "sBobbypin",
        "sLockKey",
        "sLockGame",
        "sDialogueBorder",
        "sDialogueButton",
        "sUpgradeWeapon",
        "sSoulDisplay",
        "sUpgradeWeaponLock",
        "sUpgradeWeaponBox",
        "sNewWeapon",
        "sUpgradeWeaponIcon",
        "sMissionFolder",
        "sMissionBack",
        "sprite1003",
        "sMissionFolderStar",
        "sMissionFolderStarSmall",
        "sMissionPaperclip",
        "sGrenadeHUD",
        "sGlHUD",
        "sPlasmaHUD",
        "sMineHUD",
        "sShuriHUD",
        "sBPistolHUD",
        "sXbowHUD",
        "sHammerHUD",
        "sSledgeHUD",
        "sSickleHUD",
        "sScytheHUD",
        "sKnifeHUD",
        "sRevolverHUD",
        "sP90HUD",
        "sAKHUD",
        "sM16HUD",
        "sRevolver3HUD",
        "sRevolver2HUD",
        "sPistolHUD",
        "sSPistolHUD",
        "sPistolBigHUD",
        "sRifleHUD",
        "sSniperHUD",
        "sSawedHUD",
        "sBussHUD",
        "sPShotgunHUD",
        "sAShotgunHUD",
        "sSShotgunHUD",
        "sTommyHUD",
        "sCursor",
        "sMissionFrame",
        "sMissionFinished",
        "sMissionSplatter",
        "sTimerHUD",
        "sMissionPortrait1",
        "sMissionPortrait2",
        "sMissionPortrait3",
        "sMissionPortrait4",
        "sMissionArrow",
        "sChatPortrait",
        "sWeaponArrow",
        "sEfBoneChunks",
        "sEfBloodHeadshot1",
        "sEfBloodDrip1",
        "sEfBloodDrip2",
        "sEfBloodDrip3",
        "sEfBloodDrip4",
        "sEfBloodDrip5",
        "sEfBloodDrip6",
        "sEfBloodDrip7",
        "sEfBloodSpray1",
        "sEfBloodSpray2",
        "sEfBloodSpray3",
        "sEfBloodSpray1old",
        "sEfBloodExplode1",
        "sEfBloodExplode2",
        "sEfBloodExplode3",
        "sEfBloodParticle",
        "sEfBloodParticle2",
        "sEfChar1",
        "sFire1",
        "sEfSpark",
        "sEfFire1",
        "sPFire1",
        "sFire2",
        "sPFire2",
        "sFire3",
        "sPFire3",
        "sPhysPoolBall",
        "sPhysCokeGore",
        "sPhysDebris1",
        "sPhysGore",
        "sPhysHead",
        "sPhysBody",
        "sPhysUArm",
        "sPhysLArm",
        "sPhysULeg",
        "sPhysLLeg",
        "sEfRainSplash",
        "sEfRain",
        "sEfSnow",
        "sEfReflect1",
        "sEfReflect2",
        "sEfFlare",
        "sEfBulletHole1",
        "sEfBulletHole2",
        "sEfBulletHole3",
        "sEfSoul1",
        "sEfFirefly",
        "sEfBubbleEmote",
        "sEfCasings",
        "sEfSoul",
        "sEfSoulTrail",
        "sEfExplode1",
        "sEfExplode2",
        "sEfExplodeCoke",
        "sEfFiretrail",
        "sEfSmoketrail",
        "sEfDust1",
        "sEfSmoke1",
        "sEfSmoke2",
        "sEfSmoke3",
        "sEfAlert",
        "sEfHoleWood",
        "sEfHeadshot1",
        "sEfSpark1",
        "sRadio1",
        "sRadio2",
        "sBoombox1",
        "sBoombox2",
        "sSpeaker1",
        "sSpeaker2",
        "sSpeaker3",
        "sPA2",
        "sPA1",
        "sLogo",
        "sAch",
        "sLightCircle1",
        "sLightFixtureGarage",
        "sLightDoor",
        "sOven1",
        "sCableBox",
        "sManhole",
        "sGenerator1",
        "sMicrowave1",
        "sPantry1",
        "sDoor2Old",
        "sBullet1",
        "sBSlope4",
        "sLightWall",
        "sBSlope1",
        "sBSlope3",
        "sBSlope2",
        "sWall",
        "sBJumpthrough",
        "sGlass",
        "sGlassPieces",
        "bgSkyline1",
        "bgDocks1",
        "bgCandle",
        "bgGodClouds",
        "bgGodMoon",
        "bgGodCubes",
        "bgCandleFlames",
        "background9",
        "bgSkyline1Lights",
        "bAptTile",
        "bGraffiti",
        "bTileApt16",
        "bTileCrack16",
        "bTileOutside",
        "bTileFloor",
        "draw_surface_wave",
        "close",
        "remove_chunk",
        "refresh_lights_all",
        "raycast_aabb",
        "crow_parent",
        "impact_effect",
        "instance_place_list",
        "use_fire",
        "_buffer_save",
        "_buffer_save_ext",
        "_buffer_load",
        "_buffer_load_ext",
        "_background_add",
        "_background_replace",
        "_background_save",
        "_background_save_adv",
        "_d3d_model_load",
        "_d3d_model_save",
        "_screen_save",
        "_screen_save_adv",
        "_screen_save_part",
        "_screen_save_part_adv",
        "_sound_add",
        "_sound_replace",
        "_sprite_add",
        "_sprite_replace",
        "_sprite_save",
        "_sprite_save_adv",
        "_sprite_save_strip",
        "_sprite_save_strip_adv",
        "_std_load",
        "_std_load_arg",
        "_std_save",
        "_std_save_arg",
        "_surface_save",
        "_surface_save_adv",
        "_surface_save_part",
        "_surface_save_part_adv",
        "shd_dodge",
        "#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nuniform mat4 gm_Matrices[MATRICES_MAX]; \r\n\r\nuniform bool gm_LightingEnabled;\r\nuniform bool gm_VS_FogEnabled;\r\nuniform float gm_FogStart;\r\nuniform float gm_RcpFogRange;\r\n\r\n#define MAX_VS_LIGHTS\t8\r\n#define MIRROR_WIN32_LIGHTING_EQUATION\r\n\r\n\r\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\r\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\r\n\r\nfloat CalcFogFactor(vec4 pos)\r\n{\r\n\tif (gm_VS_FogEnabled)\r\n\t{\r\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\r\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\r\n\t\treturn fogfactor;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn 0.0;\r\n\t}\r\n}\r\n\r\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\r\n{\r\n\tfloat dotresult = dot(ws_normal, dir.xyz);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * diffusecol;\r\n}\r\n\r\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\r\n{\r\n\tvec3 diffvec = ws_pos - posrange.xyz;\r\n\tfloat veclen = length(diffvec);\r\n\tdiffvec /= veclen;\t// normalise\r\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\r\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\r\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\r\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\r\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\r\n\tfloat atten = 1.0 / (veclen / posrange.w);\r\n\tif (veclen > posrange.w)\r\n\t{\r\n\t\tatten = 0.0;\r\n\t}\r\n#else\r\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\r\n#endif\r\n\tfloat dotresult = dot(ws_normal, diffvec);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * atten * diffusecol;\r\n}\r\n\r\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\r\n{\r\n\tif (gm_LightingEnabled)\r\n\t{\r\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\r\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\r\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\r\n\t\tvec3 ws_normal;\r\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\r\n\t\tws_normal = -normalize(ws_normal);\r\n\r\n\t\tvec3 ws_pos;\r\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\r\n\r\n\t\t// Accumulate lighting from different light types\r\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\taccumcol *= vertexcolour;\r\n\t\taccumcol += gm_AmbientColour;\r\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\r\n\t\treturn accumcol;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn vertexcolour;\r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\t\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n\r\n",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n// Color Dodge Shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D texColorDodge;\r\n\r\nvoid main()\r\n{\r\n    vec4 inColor = v_vColour * texture2D(gm_BaseTexture, v_vTexcoord);\r\n    vec4 blend = texture2D(texColorDodge, v_vTexcoord);\r\n    vec4 outColor = vec4(inColor.rgb / (1.0 - blend.rgb), inColor.a);\r\n    gl_FragColor = mix(outColor, inColor, 1.0 - blend.a);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nuniform mat4 gm_Matrices[MATRICES_MAX]; \r\n\r\nuniform bool gm_LightingEnabled;\r\nuniform bool gm_VS_FogEnabled;\r\nuniform float gm_FogStart;\r\nuniform float gm_RcpFogRange;\r\n\r\n#define MAX_VS_LIGHTS\t8\r\n#define MIRROR_WIN32_LIGHTING_EQUATION\r\n\r\n\r\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\r\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\r\n\r\nfloat CalcFogFactor(vec4 pos)\r\n{\r\n\tif (gm_VS_FogEnabled)\r\n\t{\r\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\r\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\r\n\t\treturn fogfactor;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn 0.0;\r\n\t}\r\n}\r\n\r\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\r\n{\r\n\tfloat dotresult = dot(ws_normal, dir.xyz);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * diffusecol;\r\n}\r\n\r\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\r\n{\r\n\tvec3 diffvec = ws_pos - posrange.xyz;\r\n\tfloat veclen = length(diffvec);\r\n\tdiffvec /= veclen;\t// normalise\r\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\r\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\r\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\r\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\r\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\r\n\tfloat atten = 1.0 / (veclen / posrange.w);\r\n\tif (veclen > posrange.w)\r\n\t{\r\n\t\tatten = 0.0;\r\n\t}\r\n#else\r\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\r\n#endif\r\n\tfloat dotresult = dot(ws_normal, diffvec);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * atten * diffusecol;\r\n}\r\n\r\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\r\n{\r\n\tif (gm_LightingEnabled)\r\n\t{\r\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\r\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\r\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\r\n\t\tvec3 ws_normal;\r\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\r\n\t\tws_normal = -normalize(ws_normal);\r\n\r\n\t\tvec3 ws_pos;\r\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\r\n\r\n\t\t// Accumulate lighting from different light types\r\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\taccumcol *= vertexcolour;\r\n\t\taccumcol += gm_AmbientColour;\r\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\r\n\t\treturn accumcol;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn vertexcolour;\r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\t\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n\r\n",
        "#version 120\n#define LOWPREC \n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n// Color Dodge Shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D texColorDodge;\r\n\r\nvoid main()\r\n{\r\n    vec4 inColor = v_vColour * texture2D(gm_BaseTexture, v_vTexcoord);\r\n    vec4 blend = texture2D(texColorDodge, v_vTexcoord);\r\n    vec4 outColor = vec4(inColor.rgb / (1.0 - blend.rgb), inColor.a);\r\n    gl_FragColor = mix(outColor, inColor, 1.0 - blend.a);\r\n}\r\n",
        "#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nfloat4x4 \tgm_Matrices[MATRICES_MAX] : register(c0);\r\n\r\nbool \tgm_LightingEnabled;\r\nbool \tgm_VS_FogEnabled;\r\nfloat \tgm_FogStart;\r\nfloat \tgm_RcpFogRange;\r\n\r\n#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nfloat4 gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nfloat3 gm_Lights_Direction[MAX_VS_LIGHTS];\t\t\t// normalised direction\r\nfloat4 gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nfloat4 gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t\t// rgb=colour, a=1\r\n\r\nfloat4 vec4(float x0, float x1, float x2, float x3)\n{\n    return float4(x0, x1, x2, x3);\n}\nfloat4 vec4(float3 x0, float x1)\n{\n    return float4(x0, x1);\n}\n// Attributes\nstatic float4 _in_Colour = {0, 0, 0, 0};\nstatic float3 _in_Position = {0, 0, 0};\nstatic float2 _in_TextureCoord = {0, 0};\n\nstatic float4 gl_Position = float4(0, 0, 0, 0);\n\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nuniform float4 dx_ViewAdjust : register(c1);\n\nuniform float4 _gm_AmbientColour : register(c2);\nuniform float _gm_FogStart : register(c3);\nuniform bool _gm_LightingEnabled : register(c4);\nuniform float4 _gm_Lights_Colour[8] : register(c5);\nuniform float4 _gm_Lights_Direction[8] : register(c13);\nuniform float4 _gm_Lights_PosRange[8] : register(c21);\nuniform float4x4 _gm_Matrices[5] : register(c29);\nuniform float _gm_RcpFogRange : register(c49);\nuniform bool _gm_VS_FogEnabled : register(c50);\n\n;\n;\n;\n;\n;\n;\n;\n;\n;\nfloat _CalcFogFactor(in float4 _pos)\n{\n{\nif(_gm_VS_FogEnabled)\n{\n{\nfloat4 _viewpos = mul(transpose(_gm_Matrices[3]), _pos);\nfloat _fogfactor = ((_viewpos.z - _gm_FogStart) * _gm_RcpFogRange);\nreturn _fogfactor;\n;\n}\n;\n}\nelse\n{\n{\nreturn 0.0;\n;\n}\n;\n}\n;\n}\n}\n;\nfloat4 _DoDirLight(in float3 _ws_normal, in float4 _dir, in float4 _diffusecol)\n{\n{\nfloat _dotresult = dot(_ws_normal, _dir.xyz);\n(_dotresult = max(0.0, _dotresult));\nreturn (_dotresult * _diffusecol);\n;\n}\n}\n;\nfloat4 _DoPointLight(in float3 _ws_pos, in float3 _ws_normal, in float4 _posrange, in float4 _diffusecol)\n{\n{\nfloat3 _diffvec = (_ws_pos - _posrange.xyz);\nfloat _veclen = length(_diffvec);\n(_diffvec /= _veclen);\nfloat _atten = (1.0 / (_veclen / _posrange.w));\nif((_veclen > _posrange.w))\n{\n{\n(_atten = 0.0);\n}\n;\n}\n;\nfloat _dotresult = dot(_ws_normal, _diffvec);\n(_dotresult = max(0.0, _dotresult));\nreturn ((_dotresult * _atten) * _diffusecol);\n;\n}\n}\n;\nfloat4 _DoLighting(in float4 _vertexcolour, in float4 _objectspacepos, in float3 _objectspacenormal)\n{\n{\nif(_gm_LightingEnabled)\n{\n{\nfloat4 _objectspacenormal4 = vec4(_objectspacenormal, 0.0);\nfloat3 _ws_normal = {0, 0, 0};\n(_ws_normal = mul(transpose(_gm_Matrices[3]), _objectspacenormal4).xyz);\n(_ws_normal = (-normalize(_ws_normal)));\nfloat3 _ws_pos = {0, 0, 0};\n(_ws_pos = mul(transpose(_gm_Matrices[2]), _objectspacepos).xyz);\nfloat4 _accumcol = float4(0.0, 0.0, 0.0, 0.0);\n{for(int _i = 0; (_i < 8); (_i++))\n{\n{\n(_accumcol += _DoDirLight(_ws_normal, _gm_Lights_Direction[_i], _gm_Lights_Colour[_i]));\n}\n;}\n}\n;\n{for(int _i = 0; (_i < 8); (_i++))\n{\n{\n(_accumcol += _DoPointLight(_ws_pos, _ws_normal, _gm_Lights_PosRange[_i], _gm_Lights_Colour[_i]));\n}\n;}\n}\n;\n(_accumcol *= _vertexcolour);\n(_accumcol += _gm_AmbientColour);\n(_accumcol = min(float4(1.0, 1.0, 1.0, 1.0), _accumcol));\nreturn _accumcol;\n;\n}\n;\n}\nelse\n{\n{\nreturn _vertexcolour;\n;\n}\n;\n}\n;\n}\n}\n;\n;\n;\n;\n;\n;\nvoid gl_main()\n{\n{\nfloat4 _object_space_pos = vec4(_in_Position.x, _in_Position.y, _in_Position.z, 1.0);\n(gl_Position = mul(transpose(_gm_Matrices[4]), _object_space_pos));\n(_v_vColour = _in_Colour);\n(_v_vTexcoord = _in_TextureCoord);\n}\n}\n;\nstruct VS_INPUT\n{\n    float4 _in_Colour : COLOR0;\n    float3 _in_Position : POSITION;\n    float2 _in_TextureCoord : TEXCOORD0;\n};\n\nstruct VS_OUTPUT\n{\n    float4 gl_Position : POSITION;\n    float4 v0 : TEXCOORD0;\n    float2 v1 : TEXCOORD1;\n};\n\nVS_OUTPUT main(VS_INPUT input)\n{\n    _in_Colour = (input._in_Colour);\n    _in_Position = (input._in_Position);\n    _in_TextureCoord = (input._in_TextureCoord);\n\n    gl_main();\n\n    VS_OUTPUT output;\n    output.gl_Position.x = gl_Position.x;\n    output.gl_Position.y = gl_Position.y;\n    output.gl_Position.z = gl_Position.z;\n    output.gl_Position.w = gl_Position.w;\n    output.v0 = _v_vColour;\n    output.v1 = _v_vTexcoord;\n\n    return output;\n}\n",
        "// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\nfloat4 vec4(float3 x0, float x1)\n{\n    return float4(x0, x1);\n}\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nstatic float4 gl_Color[1] =\n{\n    float4(0, 0, 0, 0)\n};\n\n\nuniform float _gm_AlphaRefValue : register(c3);\nuniform bool _gm_AlphaTestEnabled : register(c4);\nuniform sampler2D _gm_BaseTexture : register(s0);\nuniform float4 _gm_FogColour : register(c5);\nuniform bool _gm_PS_FogEnabled : register(c6);\nuniform sampler2D _texColorDodge : register(s1);\n\nfloat4 gl_texture2D(sampler2D s, float2 t)\n{\n    return tex2D(s, t);\n}\n\n#define GL_USES_FRAG_COLOR\n;\n;\n;\n;\n;\nvoid _DoAlphaTest(in float4 _SrcColour)\n{\n{\nif(_gm_AlphaTestEnabled)\n{\n{\nif((_SrcColour.w <= _gm_AlphaRefValue))\n{\n{\ndiscard;\n;\n}\n;\n}\n;\n}\n;\n}\n;\n}\n}\n;\nvoid _DoFog(inout float4 _SrcColour, in float _fogval)\n{\n{\nif(_gm_PS_FogEnabled)\n{\n{\n(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));\n}\n;\n}\n;\n}\n}\n;\n;\n;\n;\nvoid gl_main()\n{\n{\nfloat4 _inColor = (_v_vColour * gl_texture2D(_gm_BaseTexture, _v_vTexcoord));\nfloat4 _blend = gl_texture2D(_texColorDodge, _v_vTexcoord);\nfloat4 _outColor = vec4((_inColor.xyz / (1.0 - _blend.xyz)), _inColor.w);\n(gl_Color[0] = lerp(_outColor, _inColor, (1.0 - _blend.w)));\n}\n}\n;\nstruct PS_INPUT\n{\n    float4 v0 : TEXCOORD0;\n    float2 v1 : TEXCOORD1;\n};\n\nstruct PS_OUTPUT\n{\n    float4 gl_Color0 : COLOR0;\n};\n\nPS_OUTPUT main(PS_INPUT input)\n{\n    _v_vColour = input.v0;\n    _v_vTexcoord = input.v1.xy;\n\n    gl_main();\n\n    PS_OUTPUT output;\n    output.gl_Color0 = gl_Color[0];\n\n    return output;\n}\n",
        "in_Position",
        "in_Colour",
        "in_TextureCoord",
        "shd_contr",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nfloat brightness = 0.0;\r\nfloat contrast = 0.5;\r\n\r\nvec3 brightnessContrast(vec3 value, float brightness, float contrast)\r\n{\r\n  return (value - 0.5) * contrast + 0.5 + brightness;\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec4 inColor = v_vColour * texture2D(gm_BaseTexture, v_vTexcoord);\r\n    gl_FragColor = vec4(brightnessContrast(inColor.rgb, brightness, contrast), inColor.a);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nfloat brightness = 0.0;\r\nfloat contrast = 0.5;\r\n\r\nvec3 brightnessContrast(vec3 value, float brightness, float contrast)\r\n{\r\n  return (value - 0.5) * contrast + 0.5 + brightness;\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec4 inColor = v_vColour * texture2D(gm_BaseTexture, v_vTexcoord);\r\n    gl_FragColor = vec4(brightnessContrast(inColor.rgb, brightness, contrast), inColor.a);\r\n}\r\n",
        "// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\nfloat4 vec4(float3 x0, float x1)\n{\n    return float4(x0, x1);\n}\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nstatic float4 gl_Color[1] =\n{\n    float4(0, 0, 0, 0)\n};\n\n\nuniform float _gm_AlphaRefValue : register(c3);\nuniform bool _gm_AlphaTestEnabled : register(c4);\nuniform sampler2D _gm_BaseTexture : register(s0);\nuniform float4 _gm_FogColour : register(c5);\nuniform bool _gm_PS_FogEnabled : register(c6);\n\nfloat4 gl_texture2D(sampler2D s, float2 t)\n{\n    return tex2D(s, t);\n}\n\n#define GL_USES_FRAG_COLOR\n;\n;\n;\n;\n;\nvoid _DoAlphaTest(in float4 _SrcColour)\n{\n{\nif(_gm_AlphaTestEnabled)\n{\n{\nif((_SrcColour.w <= _gm_AlphaRefValue))\n{\n{\ndiscard;\n;\n}\n;\n}\n;\n}\n;\n}\n;\n}\n}\n;\nvoid _DoFog(inout float4 _SrcColour, in float _fogval)\n{\n{\nif(_gm_PS_FogEnabled)\n{\n{\n(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));\n}\n;\n}\n;\n}\n}\n;\n;\n;\nstatic float _brightness = 0.0;\nstatic float _contrast = 0.5;\nfloat3 _brightnessContrast(in float3 _value, in float _brightness, in float _contrast)\n{\n{\nreturn ((((_value - 0.5) * _contrast) + 0.5) + _brightness);\n;\n}\n}\n;\nvoid gl_main()\n{\n{\nfloat4 _inColor = (_v_vColour * gl_texture2D(_gm_BaseTexture, _v_vTexcoord));\n(gl_Color[0] = vec4(_brightnessContrast(_inColor.xyz, _brightness, _contrast), _inColor.w));\n}\n}\n;\nstruct PS_INPUT\n{\n    float4 v0 : TEXCOORD0;\n    float2 v1 : TEXCOORD1;\n};\n\nstruct PS_OUTPUT\n{\n    float4 gl_Color0 : COLOR0;\n};\n\nPS_OUTPUT main(PS_INPUT input)\n{\n    _v_vColour = input.v0;\n    _v_vTexcoord = input.v1.xy;\n\n    gl_main();\n\n    PS_OUTPUT output;\n    output.gl_Color0 = gl_Color[0];\n\n    return output;\n}\n",
        "shd_divide",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n// Divide Shader\r\n//\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D texDivide;\r\n\r\nvoid main()\r\n{\r\n    vec4 inColor = v_vColour * texture2D(gm_BaseTexture, v_vTexcoord);\r\n    vec4 blend = texture2D(texDivide, v_vTexcoord);\r\n    vec4 outColor = vec4(inColor.rgb / blend.rgb, inColor.a);\r\n    gl_FragColor = mix(outColor, inColor, 1.0 - blend.a);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n// Divide Shader\r\n//\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D texDivide;\r\n\r\nvoid main()\r\n{\r\n    vec4 inColor = v_vColour * texture2D(gm_BaseTexture, v_vTexcoord);\r\n    vec4 blend = texture2D(texDivide, v_vTexcoord);\r\n    vec4 outColor = vec4(inColor.rgb / blend.rgb, inColor.a);\r\n    gl_FragColor = mix(outColor, inColor, 1.0 - blend.a);\r\n}\r\n",
        "// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\nfloat4 vec4(float3 x0, float x1)\n{\n    return float4(x0, x1);\n}\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nstatic float4 gl_Color[1] =\n{\n    float4(0, 0, 0, 0)\n};\n\n\nuniform float _gm_AlphaRefValue : register(c3);\nuniform bool _gm_AlphaTestEnabled : register(c4);\nuniform sampler2D _gm_BaseTexture : register(s0);\nuniform float4 _gm_FogColour : register(c5);\nuniform bool _gm_PS_FogEnabled : register(c6);\nuniform sampler2D _texDivide : register(s1);\n\nfloat4 gl_texture2D(sampler2D s, float2 t)\n{\n    return tex2D(s, t);\n}\n\n#define GL_USES_FRAG_COLOR\n;\n;\n;\n;\n;\nvoid _DoAlphaTest(in float4 _SrcColour)\n{\n{\nif(_gm_AlphaTestEnabled)\n{\n{\nif((_SrcColour.w <= _gm_AlphaRefValue))\n{\n{\ndiscard;\n;\n}\n;\n}\n;\n}\n;\n}\n;\n}\n}\n;\nvoid _DoFog(inout float4 _SrcColour, in float _fogval)\n{\n{\nif(_gm_PS_FogEnabled)\n{\n{\n(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));\n}\n;\n}\n;\n}\n}\n;\n;\n;\n;\nvoid gl_main()\n{\n{\nfloat4 _inColor = (_v_vColour * gl_texture2D(_gm_BaseTexture, _v_vTexcoord));\nfloat4 _blend = gl_texture2D(_texDivide, _v_vTexcoord);\nfloat4 _outColor = vec4((_inColor.xyz / _blend.xyz), _inColor.w);\n(gl_Color[0] = lerp(_outColor, _inColor, (1.0 - _blend.w)));\n}\n}\n;\nstruct PS_INPUT\n{\n    float4 v0 : TEXCOORD0;\n    float2 v1 : TEXCOORD1;\n};\n\nstruct PS_OUTPUT\n{\n    float4 gl_Color0 : COLOR0;\n};\n\nPS_OUTPUT main(PS_INPUT input)\n{\n    _v_vColour = input.v0;\n    _v_vTexcoord = input.v1.xy;\n\n    gl_main();\n\n    PS_OUTPUT output;\n    output.gl_Color0 = gl_Color[0];\n\n    return output;\n}\n",
        "shd_coke",
        "#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nuniform mat4 gm_Matrices[MATRICES_MAX]; \r\n\r\nuniform bool gm_LightingEnabled;\r\nuniform bool gm_VS_FogEnabled;\r\nuniform float gm_FogStart;\r\nuniform float gm_RcpFogRange;\r\n\r\n#define MAX_VS_LIGHTS\t8\r\n#define MIRROR_WIN32_LIGHTING_EQUATION\r\n\r\n\r\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\r\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\r\n\r\nfloat CalcFogFactor(vec4 pos)\r\n{\r\n\tif (gm_VS_FogEnabled)\r\n\t{\r\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\r\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\r\n\t\treturn fogfactor;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn 0.0;\r\n\t}\r\n}\r\n\r\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\r\n{\r\n\tfloat dotresult = dot(ws_normal, dir.xyz);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * diffusecol;\r\n}\r\n\r\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\r\n{\r\n\tvec3 diffvec = ws_pos - posrange.xyz;\r\n\tfloat veclen = length(diffvec);\r\n\tdiffvec /= veclen;\t// normalise\r\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\r\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\r\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\r\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\r\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\r\n\tfloat atten = 1.0 / (veclen / posrange.w);\r\n\tif (veclen > posrange.w)\r\n\t{\r\n\t\tatten = 0.0;\r\n\t}\r\n#else\r\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\r\n#endif\r\n\tfloat dotresult = dot(ws_normal, diffvec);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * atten * diffusecol;\r\n}\r\n\r\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\r\n{\r\n\tif (gm_LightingEnabled)\r\n\t{\r\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\r\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\r\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\r\n\t\tvec3 ws_normal;\r\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\r\n\t\tws_normal = -normalize(ws_normal);\r\n\r\n\t\tvec3 ws_pos;\r\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\r\n\r\n\t\t// Accumulate lighting from different light types\r\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\taccumcol *= vertexcolour;\r\n\t\taccumcol += gm_AmbientColour;\r\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\r\n\t\treturn accumcol;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn vertexcolour;\r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n\r\n",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 col = texture2D( gm_BaseTexture, v_vTexcoord );\r\n    float brightness = 0.34 * col.r + 0.5 * col.g + 0.16 * col.b;\r\nif (brightness < 0.3) {\r\n        col.rgb = vec3(124.0/255.0, 223.0/255.0, 228.0/255.0);\r\n        //col.a = 1.0;\r\n    }\r\n    else if (brightness < 0.4) {\r\n        col.rgb = vec3(174.0/255.0, 225.0/255.0, 225.0/255.0);\r\n        //col.a = 0.8;\r\n    }\r\n    else {\r\n        col.rgb = vec3(219.0/255.0, 251.0/255.0, 248.0/255.0);\r\n        //col.a = 0.6;\r\n    }\r\n\r\n    gl_FragColor = v_vColour * col;\r\n}\r\n\r\n//0.33 R + 0.5 G + 0.16 B\r\n    /*else if (brightness < 0.9) {\r\n        col.rgb = vec3(51.0/255.0, 71.0/255.0, 75.0/255.0);\r\n        //col.a = 0.4;\r\n    }*/\r\n        /*else if (brightness < 1.0) {\r\n        col.rgb = vec3(51.0/255.0, 71.0/255.0, 75.0/255.0);\r\n        //col.a = 0.4;\r\n    }*/\r\n",
        "#version 120\n#define LOWPREC \n#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nuniform mat4 gm_Matrices[MATRICES_MAX]; \r\n\r\nuniform bool gm_LightingEnabled;\r\nuniform bool gm_VS_FogEnabled;\r\nuniform float gm_FogStart;\r\nuniform float gm_RcpFogRange;\r\n\r\n#define MAX_VS_LIGHTS\t8\r\n#define MIRROR_WIN32_LIGHTING_EQUATION\r\n\r\n\r\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\r\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\r\n\r\nfloat CalcFogFactor(vec4 pos)\r\n{\r\n\tif (gm_VS_FogEnabled)\r\n\t{\r\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\r\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\r\n\t\treturn fogfactor;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn 0.0;\r\n\t}\r\n}\r\n\r\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\r\n{\r\n\tfloat dotresult = dot(ws_normal, dir.xyz);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * diffusecol;\r\n}\r\n\r\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\r\n{\r\n\tvec3 diffvec = ws_pos - posrange.xyz;\r\n\tfloat veclen = length(diffvec);\r\n\tdiffvec /= veclen;\t// normalise\r\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\r\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\r\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\r\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\r\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\r\n\tfloat atten = 1.0 / (veclen / posrange.w);\r\n\tif (veclen > posrange.w)\r\n\t{\r\n\t\tatten = 0.0;\r\n\t}\r\n#else\r\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\r\n#endif\r\n\tfloat dotresult = dot(ws_normal, diffvec);\r\n\tdotresult = max(0.0, dotresult);\r\n\r\n\treturn dotresult * atten * diffusecol;\r\n}\r\n\r\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\r\n{\r\n\tif (gm_LightingEnabled)\r\n\t{\r\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\r\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\r\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\r\n\t\tvec3 ws_normal;\r\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\r\n\t\tws_normal = -normalize(ws_normal);\r\n\r\n\t\tvec3 ws_pos;\r\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\r\n\r\n\t\t// Accumulate lighting from different light types\r\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\r\n\t\t{\r\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\r\n\t\t}\r\n\r\n\t\taccumcol *= vertexcolour;\r\n\t\taccumcol += gm_AmbientColour;\r\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\r\n\t\treturn accumcol;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn vertexcolour;\r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n\r\n",
        "#version 120\n#define LOWPREC \n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 col = texture2D( gm_BaseTexture, v_vTexcoord );\r\n    float brightness = 0.34 * col.r + 0.5 * col.g + 0.16 * col.b;\r\nif (brightness < 0.3) {\r\n        col.rgb = vec3(124.0/255.0, 223.0/255.0, 228.0/255.0);\r\n        //col.a = 1.0;\r\n    }\r\n    else if (brightness < 0.4) {\r\n        col.rgb = vec3(174.0/255.0, 225.0/255.0, 225.0/255.0);\r\n        //col.a = 0.8;\r\n    }\r\n    else {\r\n        col.rgb = vec3(219.0/255.0, 251.0/255.0, 248.0/255.0);\r\n        //col.a = 0.6;\r\n    }\r\n\r\n    gl_FragColor = v_vColour * col;\r\n}\r\n\r\n//0.33 R + 0.5 G + 0.16 B\r\n    /*else if (brightness < 0.9) {\r\n        col.rgb = vec3(51.0/255.0, 71.0/255.0, 75.0/255.0);\r\n        //col.a = 0.4;\r\n    }*/\r\n        /*else if (brightness < 1.0) {\r\n        col.rgb = vec3(51.0/255.0, 71.0/255.0, 75.0/255.0);\r\n        //col.a = 0.4;\r\n    }*/\r\n",
        "// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nstatic float4 gl_Color[1] =\n{\n    float4(0, 0, 0, 0)\n};\n\n\nuniform float _gm_AlphaRefValue : register(c3);\nuniform bool _gm_AlphaTestEnabled : register(c4);\nuniform sampler2D _gm_BaseTexture : register(s0);\nuniform float4 _gm_FogColour : register(c5);\nuniform bool _gm_PS_FogEnabled : register(c6);\n\nfloat4 gl_texture2D(sampler2D s, float2 t)\n{\n    return tex2D(s, t);\n}\n\n#define GL_USES_FRAG_COLOR\n;\n;\n;\n;\n;\nvoid _DoAlphaTest(in float4 _SrcColour)\n{\n{\nif(_gm_AlphaTestEnabled)\n{\n{\nif((_SrcColour.w <= _gm_AlphaRefValue))\n{\n{\ndiscard;\n;\n}\n;\n}\n;\n}\n;\n}\n;\n}\n}\n;\nvoid _DoFog(inout float4 _SrcColour, in float _fogval)\n{\n{\nif(_gm_PS_FogEnabled)\n{\n{\n(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));\n}\n;\n}\n;\n}\n}\n;\n;\n;\nvoid gl_main()\n{\n{\n(gl_Color[0] = (_v_vColour * gl_texture2D(_gm_BaseTexture, _v_vTexcoord)));\nfloat4 _col = gl_texture2D(_gm_BaseTexture, _v_vTexcoord);\nfloat _brightness = (((0.34 * _col.x) + (0.5 * _col.y)) + (0.16 * _col.z));\nif((_brightness < 0.30000001))\n{\n{\n(_col.xyz = float3(0.48627451, 0.87450981, 0.89411765));\n}\n;\n}\nelse\n{\nif((_brightness < 0.40000001))\n{\n{\n(_col.xyz = float3(0.68235296, 0.88235295, 0.88235295));\n}\n;\n}\nelse\n{\n{\n(_col.xyz = float3(0.85882354, 0.98431373, 0.97254902));\n}\n;\n}\n;\n}\n;\n(gl_Color[0] = (_v_vColour * _col));\n}\n}\n;\nstruct PS_INPUT\n{\n    float4 v0 : TEXCOORD0;\n    float2 v1 : TEXCOORD1;\n};\n\nstruct PS_OUTPUT\n{\n    float4 gl_Color0 : COLOR0;\n};\n\nPS_OUTPUT main(PS_INPUT input)\n{\n    _v_vColour = input.v0;\n    _v_vTexcoord = input.v1.xy;\n\n    gl_main();\n\n    PS_OUTPUT output;\n    output.gl_Color0 = gl_Color[0];\n\n    return output;\n}\n",
        "shd_fireplace",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 col = texture2D( gm_BaseTexture, v_vTexcoord );\r\n    float brightness = 0.34 * col.r + 0.5 * col.g + 0.16 * col.b;\r\nif (brightness > 0.5) { //lightest\r\n        col.rgb = vec3(226.0/255.0, 113.0/255.0, 29.0/255.0);\r\n    }\r\n    else if (brightness > 0.4) { //medium\r\n        col.rgb = vec3(184.0/255.0, 90.0/255.0, 29.0/255.0);\r\n    }\r\n    else if (brightness > 0.3) { //darkest\r\n        col.rgb = vec3(160.0/255.0, 40.0/255.0, 27.0/255.0);\r\n    }\r\n    else {\r\n        col.a = 0.0;\r\n    }\r\n    gl_FragColor = v_vColour * col;\r\n}\r\n\r\n//0.33 R + 0.5 G + 0.16 B\r\n    /*else if (brightness < 0.9) {\r\n        col.rgb = vec3(51.0/255.0, 71.0/255.0, 75.0/255.0);\r\n        //col.a = 0.4;\r\n    }*/\r\n        /*else if (brightness < 1.0) {\r\n        col.rgb = vec3(51.0/255.0, 71.0/255.0, 75.0/255.0);\r\n        //col.a = 0.4;\r\n    }*/\r\n",
        "#version 120\n#define LOWPREC \n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 col = texture2D( gm_BaseTexture, v_vTexcoord );\r\n    float brightness = 0.34 * col.r + 0.5 * col.g + 0.16 * col.b;\r\nif (brightness > 0.5) { //lightest\r\n        col.rgb = vec3(226.0/255.0, 113.0/255.0, 29.0/255.0);\r\n    }\r\n    else if (brightness > 0.4) { //medium\r\n        col.rgb = vec3(184.0/255.0, 90.0/255.0, 29.0/255.0);\r\n    }\r\n    else if (brightness > 0.3) { //darkest\r\n        col.rgb = vec3(160.0/255.0, 40.0/255.0, 27.0/255.0);\r\n    }\r\n    else {\r\n        col.a = 0.0;\r\n    }\r\n    gl_FragColor = v_vColour * col;\r\n}\r\n\r\n//0.33 R + 0.5 G + 0.16 B\r\n    /*else if (brightness < 0.9) {\r\n        col.rgb = vec3(51.0/255.0, 71.0/255.0, 75.0/255.0);\r\n        //col.a = 0.4;\r\n    }*/\r\n        /*else if (brightness < 1.0) {\r\n        col.rgb = vec3(51.0/255.0, 71.0/255.0, 75.0/255.0);\r\n        //col.a = 0.4;\r\n    }*/\r\n",
        "// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nstatic float4 gl_Color[1] =\n{\n    float4(0, 0, 0, 0)\n};\n\n\nuniform float _gm_AlphaRefValue : register(c3);\nuniform bool _gm_AlphaTestEnabled : register(c4);\nuniform sampler2D _gm_BaseTexture : register(s0);\nuniform float4 _gm_FogColour : register(c5);\nuniform bool _gm_PS_FogEnabled : register(c6);\n\nfloat4 gl_texture2D(sampler2D s, float2 t)\n{\n    return tex2D(s, t);\n}\n\n#define GL_USES_FRAG_COLOR\n;\n;\n;\n;\n;\nvoid _DoAlphaTest(in float4 _SrcColour)\n{\n{\nif(_gm_AlphaTestEnabled)\n{\n{\nif((_SrcColour.w <= _gm_AlphaRefValue))\n{\n{\ndiscard;\n;\n}\n;\n}\n;\n}\n;\n}\n;\n}\n}\n;\nvoid _DoFog(inout float4 _SrcColour, in float _fogval)\n{\n{\nif(_gm_PS_FogEnabled)\n{\n{\n(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));\n}\n;\n}\n;\n}\n}\n;\n;\n;\nvoid gl_main()\n{\n{\n(gl_Color[0] = (_v_vColour * gl_texture2D(_gm_BaseTexture, _v_vTexcoord)));\nfloat4 _col = gl_texture2D(_gm_BaseTexture, _v_vTexcoord);\nfloat _brightness = (((0.34 * _col.x) + (0.5 * _col.y)) + (0.16 * _col.z));\nif((_brightness > 0.5))\n{\n{\n(_col.xyz = float3(0.88627452, 0.44313726, 0.11372549));\n}\n;\n}\nelse\n{\nif((_brightness > 0.40000001))\n{\n{\n(_col.xyz = float3(0.72156864, 0.35294119, 0.11372549));\n}\n;\n}\nelse\n{\nif((_brightness > 0.30000001))\n{\n{\n(_col.xyz = float3(0.627451, 0.15686275, 0.10588235));\n}\n;\n}\nelse\n{\n{\n(_col.w = 0.0);\n}\n;\n}\n;\n}\n;\n}\n;\n(gl_Color[0] = (_v_vColour * _col));\n}\n}\n;\nstruct PS_INPUT\n{\n    float4 v0 : TEXCOORD0;\n    float2 v1 : TEXCOORD1;\n};\n\nstruct PS_OUTPUT\n{\n    float4 gl_Color0 : COLOR0;\n};\n\nPS_OUTPUT main(PS_INPUT input)\n{\n    _v_vColour = input.v0;\n    _v_vTexcoord = input.v1.xy;\n\n    gl_main();\n\n    PS_OUTPUT output;\n    output.gl_Color0 = gl_Color[0];\n\n    return output;\n}\n",
        "shd_credits",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 col = texture2D( gm_BaseTexture, v_vTexcoord );\r\n    float brightness = 0.34 * col.r + 0.5 * col.g + 0.16 * col.b;\r\nif (brightness > 0.5) { //lightest\r\n        col.rgb = vec3(0.7,0.7,0.7);\r\n    }\r\n    else if (brightness > 0.3) { //medium\r\n        col.rgb = vec3(0.4,0.4,0.4);\r\n    }\r\n    else if (brightness > 0.2) { //medium\r\n        col.rgb = vec3(0.15,0.15,0.15);\r\n    }\r\n    else {\r\n        col.rgb = vec3(0.0,0.0,0.0);\r\n    }\r\n    gl_FragColor = v_vColour * col;\r\n}\r\n\r\n//0.33 R + 0.5 G + 0.16 B\r\n    /*else if (brightness < 0.9) {\r\n        col.rgb = vec3(51.0/255.0, 71.0/255.0, 75.0/255.0);\r\n        //col.a = 0.4;\r\n    }*/\r\n        /*else if (brightness < 1.0) {\r\n        col.rgb = vec3(51.0/255.0, 71.0/255.0, 75.0/255.0);\r\n        //col.a = 0.4;\r\n    }*/\r\n",
        "#version 120\n#define LOWPREC \n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 col = texture2D( gm_BaseTexture, v_vTexcoord );\r\n    float brightness = 0.34 * col.r + 0.5 * col.g + 0.16 * col.b;\r\nif (brightness > 0.5) { //lightest\r\n        col.rgb = vec3(0.7,0.7,0.7);\r\n    }\r\n    else if (brightness > 0.3) { //medium\r\n        col.rgb = vec3(0.4,0.4,0.4);\r\n    }\r\n    else if (brightness > 0.2) { //medium\r\n        col.rgb = vec3(0.15,0.15,0.15);\r\n    }\r\n    else {\r\n        col.rgb = vec3(0.0,0.0,0.0);\r\n    }\r\n    gl_FragColor = v_vColour * col;\r\n}\r\n\r\n//0.33 R + 0.5 G + 0.16 B\r\n    /*else if (brightness < 0.9) {\r\n        col.rgb = vec3(51.0/255.0, 71.0/255.0, 75.0/255.0);\r\n        //col.a = 0.4;\r\n    }*/\r\n        /*else if (brightness < 1.0) {\r\n        col.rgb = vec3(51.0/255.0, 71.0/255.0, 75.0/255.0);\r\n        //col.a = 0.4;\r\n    }*/\r\n",
        "// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nstatic float4 gl_Color[1] =\n{\n    float4(0, 0, 0, 0)\n};\n\n\nuniform float _gm_AlphaRefValue : register(c3);\nuniform bool _gm_AlphaTestEnabled : register(c4);\nuniform sampler2D _gm_BaseTexture : register(s0);\nuniform float4 _gm_FogColour : register(c5);\nuniform bool _gm_PS_FogEnabled : register(c6);\n\nfloat4 gl_texture2D(sampler2D s, float2 t)\n{\n    return tex2D(s, t);\n}\n\n#define GL_USES_FRAG_COLOR\n;\n;\n;\n;\n;\nvoid _DoAlphaTest(in float4 _SrcColour)\n{\n{\nif(_gm_AlphaTestEnabled)\n{\n{\nif((_SrcColour.w <= _gm_AlphaRefValue))\n{\n{\ndiscard;\n;\n}\n;\n}\n;\n}\n;\n}\n;\n}\n}\n;\nvoid _DoFog(inout float4 _SrcColour, in float _fogval)\n{\n{\nif(_gm_PS_FogEnabled)\n{\n{\n(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));\n}\n;\n}\n;\n}\n}\n;\n;\n;\nvoid gl_main()\n{\n{\n(gl_Color[0] = (_v_vColour * gl_texture2D(_gm_BaseTexture, _v_vTexcoord)));\nfloat4 _col = gl_texture2D(_gm_BaseTexture, _v_vTexcoord);\nfloat _brightness = (((0.34 * _col.x) + (0.5 * _col.y)) + (0.16 * _col.z));\nif((_brightness > 0.5))\n{\n{\n(_col.xyz = float3(0.69999999, 0.69999999, 0.69999999));\n}\n;\n}\nelse\n{\nif((_brightness > 0.30000001))\n{\n{\n(_col.xyz = float3(0.40000001, 0.40000001, 0.40000001));\n}\n;\n}\nelse\n{\nif((_brightness > 0.2))\n{\n{\n(_col.xyz = float3(0.15000001, 0.15000001, 0.15000001));\n}\n;\n}\nelse\n{\n{\n(_col.xyz = float3(0.0, 0.0, 0.0));\n}\n;\n}\n;\n}\n;\n}\n;\n(gl_Color[0] = (_v_vColour * _col));\n}\n}\n;\nstruct PS_INPUT\n{\n    float4 v0 : TEXCOORD0;\n    float2 v1 : TEXCOORD1;\n};\n\nstruct PS_OUTPUT\n{\n    float4 gl_Color0 : COLOR0;\n};\n\nPS_OUTPUT main(PS_INPUT input)\n{\n    _v_vColour = input.v0;\n    _v_vTexcoord = input.v1.xy;\n\n    gl_main();\n\n    PS_OUTPUT output;\n    output.gl_Color0 = gl_Color[0];\n\n    return output;\n}\n",
        "shd_fireplace_dark",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 col = texture2D( gm_BaseTexture, v_vTexcoord );\r\n    float brightness = 0.34 * col.r + 0.5 * col.g + 0.16 * col.b;\r\nif (brightness > 0.4) { //lightest\r\n        col.rgb = vec3(226.0/255.0, 113.0/255.0, 29.0/255.0);\r\n    }\r\n    else if (brightness > 0.3) { //medium\r\n        col.rgb = vec3(184.0/255.0, 90.0/255.0, 29.0/255.0);\r\n    }\r\n    else if (brightness > 0.2) { //darkest\r\n        col.rgb = vec3(160.0/255.0, 40.0/255.0, 27.0/255.0);\r\n    }\r\n    else {\r\n        col.a = 0.0;\r\n    }\r\n    gl_FragColor = v_vColour * col;\r\n}\r\n\r\n//0.33 R + 0.5 G + 0.16 B\r\n    /*else if (brightness < 0.9) {\r\n        col.rgb = vec3(51.0/255.0, 71.0/255.0, 75.0/255.0);\r\n        //col.a = 0.4;\r\n    }*/\r\n        /*else if (brightness < 1.0) {\r\n        col.rgb = vec3(51.0/255.0, 71.0/255.0, 75.0/255.0);\r\n        //col.a = 0.4;\r\n    }*/\r\n",
        "#version 120\n#define LOWPREC \n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 col = texture2D( gm_BaseTexture, v_vTexcoord );\r\n    float brightness = 0.34 * col.r + 0.5 * col.g + 0.16 * col.b;\r\nif (brightness > 0.4) { //lightest\r\n        col.rgb = vec3(226.0/255.0, 113.0/255.0, 29.0/255.0);\r\n    }\r\n    else if (brightness > 0.3) { //medium\r\n        col.rgb = vec3(184.0/255.0, 90.0/255.0, 29.0/255.0);\r\n    }\r\n    else if (brightness > 0.2) { //darkest\r\n        col.rgb = vec3(160.0/255.0, 40.0/255.0, 27.0/255.0);\r\n    }\r\n    else {\r\n        col.a = 0.0;\r\n    }\r\n    gl_FragColor = v_vColour * col;\r\n}\r\n\r\n//0.33 R + 0.5 G + 0.16 B\r\n    /*else if (brightness < 0.9) {\r\n        col.rgb = vec3(51.0/255.0, 71.0/255.0, 75.0/255.0);\r\n        //col.a = 0.4;\r\n    }*/\r\n        /*else if (brightness < 1.0) {\r\n        col.rgb = vec3(51.0/255.0, 71.0/255.0, 75.0/255.0);\r\n        //col.a = 0.4;\r\n    }*/\r\n",
        "// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nstatic float4 gl_Color[1] =\n{\n    float4(0, 0, 0, 0)\n};\n\n\nuniform float _gm_AlphaRefValue : register(c3);\nuniform bool _gm_AlphaTestEnabled : register(c4);\nuniform sampler2D _gm_BaseTexture : register(s0);\nuniform float4 _gm_FogColour : register(c5);\nuniform bool _gm_PS_FogEnabled : register(c6);\n\nfloat4 gl_texture2D(sampler2D s, float2 t)\n{\n    return tex2D(s, t);\n}\n\n#define GL_USES_FRAG_COLOR\n;\n;\n;\n;\n;\nvoid _DoAlphaTest(in float4 _SrcColour)\n{\n{\nif(_gm_AlphaTestEnabled)\n{\n{\nif((_SrcColour.w <= _gm_AlphaRefValue))\n{\n{\ndiscard;\n;\n}\n;\n}\n;\n}\n;\n}\n;\n}\n}\n;\nvoid _DoFog(inout float4 _SrcColour, in float _fogval)\n{\n{\nif(_gm_PS_FogEnabled)\n{\n{\n(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));\n}\n;\n}\n;\n}\n}\n;\n;\n;\nvoid gl_main()\n{\n{\n(gl_Color[0] = (_v_vColour * gl_texture2D(_gm_BaseTexture, _v_vTexcoord)));\nfloat4 _col = gl_texture2D(_gm_BaseTexture, _v_vTexcoord);\nfloat _brightness = (((0.34 * _col.x) + (0.5 * _col.y)) + (0.16 * _col.z));\nif((_brightness > 0.40000001))\n{\n{\n(_col.xyz = float3(0.88627452, 0.44313726, 0.11372549));\n}\n;\n}\nelse\n{\nif((_brightness > 0.30000001))\n{\n{\n(_col.xyz = float3(0.72156864, 0.35294119, 0.11372549));\n}\n;\n}\nelse\n{\nif((_brightness > 0.2))\n{\n{\n(_col.xyz = float3(0.627451, 0.15686275, 0.10588235));\n}\n;\n}\nelse\n{\n{\n(_col.w = 0.0);\n}\n;\n}\n;\n}\n;\n}\n;\n(gl_Color[0] = (_v_vColour * _col));\n}\n}\n;\nstruct PS_INPUT\n{\n    float4 v0 : TEXCOORD0;\n    float2 v1 : TEXCOORD1;\n};\n\nstruct PS_OUTPUT\n{\n    float4 gl_Color0 : COLOR0;\n};\n\nPS_OUTPUT main(PS_INPUT input)\n{\n    _v_vColour = input.v0;\n    _v_vTexcoord = input.v1.xy;\n\n    gl_main();\n\n    PS_OUTPUT output;\n    output.gl_Color0 = gl_Color[0];\n\n    return output;\n}\n",
        "sh_CRT",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\nvarying vec2 v_vTexcoord;\r\n\r\nuniform sampler2D samp_CRT;\r\nuniform vec2 textureBaseSize;\r\nuniform vec2 textureScaledSize;\r\n\r\n    #define TEX2D(c) pow(abs(texture2D(samp_CRT, (c))), vec4(inputGamma))          \r\n    float PI = 3.141592653589;\r\n    float inputGamma = 2.4;\r\n    float outputGamma = 2.8;\r\n    uniform float distortion;\r\n    uniform bool distort;\r\n    uniform bool border;\r\n    \r\n    vec4 scanlineWeights(float dist, vec4 col)\r\n    {\r\n        vec4 wid = 1.0 + 2.0 * pow(col, vec4(4.0));\r\n        vec4 weights = vec4(dist * 0.10);                \r\n        return 0.51 * exp(-pow(abs(weights * sqrt(2.0 / wid)), wid)) / (0.18 + 0.06 * wid);\r\n    }\r\n\r\n    vec2 overscan = vec2(0.99, 0.99);\r\n    vec2 aspect = vec2(textureBaseSize.x/textureBaseSize.x, textureBaseSize.y/textureBaseSize.x);\r\n    float cornersize = 0.03;\r\n    float cornersmooth = 80.0;\r\n     \r\n    float corner(vec2 coord)\r\n    {\r\n        coord = (coord - vec2(0.5)) * overscan + vec2(0.5);\r\n        coord = min(coord, vec2(1.0)-coord) * aspect;\r\n        vec2 cdist = vec2(cornersize);\r\n        coord = (cdist - min(coord,cdist));\r\n        float dist = sqrt(dot(coord,coord));\r\n        return clamp((cdist.x-dist)*cornersmooth,0.0, 1.0);\r\n    }\r\n\r\n    vec2 radialDistortion(vec2 coord)\r\n    {\r\n        vec2 cc = coord - 0.5;\r\n        float dist = dot(cc, cc) * distortion;\r\n        return (coord + cc * (1.0 + dist) * dist);\r\n    }\r\n    \r\nvoid main()\r\n{\r\n    vec2 one = 1.0 / textureBaseSize;\r\n    vec2 _xy;\r\n    \r\n    if (distort == true)\r\n        { _xy = radialDistortion(v_vTexcoord); }\r\n    else\r\n        { _xy = v_vTexcoord; }\r\n        \r\n    vec2 uv_ratio = fract(_xy * textureBaseSize) - vec2(0.5);\r\n\r\n    float cval = corner(_xy);\r\n    \r\n    _xy = (floor(_xy * textureBaseSize) + vec2(0.5)) / textureBaseSize;\r\n    \r\n    vec4 coeffs = PI * vec4(1.0 + uv_ratio.x, uv_ratio.x, 1.0 - uv_ratio.x, 2.0 - uv_ratio.x);\r\n    coeffs = max(abs(coeffs), 1e-6);\r\n    coeffs = 2.0 * sin(coeffs) * sin(coeffs / 2.0) / (coeffs * coeffs);     \r\n    coeffs /= dot(coeffs, vec4(1.0));\r\n\r\n    vec4 col  = clamp(coeffs.x * TEX2D(_xy + vec2(-one.x, 0.0))   + coeffs.y * TEX2D(_xy)+ coeffs.z * TEX2D(_xy + vec2(one.x, 0.0)) + coeffs.w * TEX2D(_xy + vec2(2.0 * one.x, 0.0)),   0.0, 1.0);\r\n    vec4 col2 = col;//clamp(coeffs.x * TEX2D(_xy + vec2(-one.x, one.y)) + coeffs.y * TEX2D(_xy + vec2(0.0, one.y)) + coeffs.z * TEX2D(_xy + one)+ coeffs.w * TEX2D(_xy + vec2(2.0 * one.x, one.y)), 0.0, 1.0);\r\n\r\n    vec4 weights  = scanlineWeights(abs(uv_ratio.y) , col);\r\n    vec4 weights2 = scanlineWeights(1.0 - uv_ratio.y, col2);\r\n\r\n    float mod_factor = v_vTexcoord.x * textureScaledSize.x * textureScaledSize.x / textureScaledSize.x;\r\n    vec3 dotMaskWeights = mix( vec3(1.05, 0.75, 1.05), vec3(0.75, 1.05, 0.75), floor(mod(mod_factor, 2.0)) );\r\n    \r\n    vec3 mul_res  = (col * weights + col2 * weights2).xyz;\r\n    mul_res *= dotMaskWeights;\r\n    \r\n    if (border == true)\r\n        { mul_res = pow(abs(mul_res), vec3(1.0 / (2.0 * inputGamma - outputGamma)))* vec3(cval); }\r\n    else\r\n        { mul_res = pow(abs(mul_res), vec3(1.0 / (2.0 * inputGamma - outputGamma))); }\r\n    \r\n    gl_FragColor = vec4(mul_res, 1.0);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\nvarying vec2 v_vTexcoord;\r\n\r\nuniform sampler2D samp_CRT;\r\nuniform vec2 textureBaseSize;\r\nuniform vec2 textureScaledSize;\r\n\r\n    #define TEX2D(c) pow(abs(texture2D(samp_CRT, (c))), vec4(inputGamma))          \r\n    float PI = 3.141592653589;\r\n    float inputGamma = 2.4;\r\n    float outputGamma = 2.8;\r\n    uniform float distortion;\r\n    uniform bool distort;\r\n    uniform bool border;\r\n    \r\n    vec4 scanlineWeights(float dist, vec4 col)\r\n    {\r\n        vec4 wid = 1.0 + 2.0 * pow(col, vec4(4.0));\r\n        vec4 weights = vec4(dist * 0.10);                \r\n        return 0.51 * exp(-pow(abs(weights * sqrt(2.0 / wid)), wid)) / (0.18 + 0.06 * wid);\r\n    }\r\n\r\n    vec2 overscan = vec2(0.99, 0.99);\r\n    vec2 aspect = vec2(textureBaseSize.x/textureBaseSize.x, textureBaseSize.y/textureBaseSize.x);\r\n    float cornersize = 0.03;\r\n    float cornersmooth = 80.0;\r\n     \r\n    float corner(vec2 coord)\r\n    {\r\n        coord = (coord - vec2(0.5)) * overscan + vec2(0.5);\r\n        coord = min(coord, vec2(1.0)-coord) * aspect;\r\n        vec2 cdist = vec2(cornersize);\r\n        coord = (cdist - min(coord,cdist));\r\n        float dist = sqrt(dot(coord,coord));\r\n        return clamp((cdist.x-dist)*cornersmooth,0.0, 1.0);\r\n    }\r\n\r\n    vec2 radialDistortion(vec2 coord)\r\n    {\r\n        vec2 cc = coord - 0.5;\r\n        float dist = dot(cc, cc) * distortion;\r\n        return (coord + cc * (1.0 + dist) * dist);\r\n    }\r\n    \r\nvoid main()\r\n{\r\n    vec2 one = 1.0 / textureBaseSize;\r\n    vec2 _xy;\r\n    \r\n    if (distort == true)\r\n        { _xy = radialDistortion(v_vTexcoord); }\r\n    else\r\n        { _xy = v_vTexcoord; }\r\n        \r\n    vec2 uv_ratio = fract(_xy * textureBaseSize) - vec2(0.5);\r\n\r\n    float cval = corner(_xy);\r\n    \r\n    _xy = (floor(_xy * textureBaseSize) + vec2(0.5)) / textureBaseSize;\r\n    \r\n    vec4 coeffs = PI * vec4(1.0 + uv_ratio.x, uv_ratio.x, 1.0 - uv_ratio.x, 2.0 - uv_ratio.x);\r\n    coeffs = max(abs(coeffs), 1e-6);\r\n    coeffs = 2.0 * sin(coeffs) * sin(coeffs / 2.0) / (coeffs * coeffs);     \r\n    coeffs /= dot(coeffs, vec4(1.0));\r\n\r\n    vec4 col  = clamp(coeffs.x * TEX2D(_xy + vec2(-one.x, 0.0))   + coeffs.y * TEX2D(_xy)+ coeffs.z * TEX2D(_xy + vec2(one.x, 0.0)) + coeffs.w * TEX2D(_xy + vec2(2.0 * one.x, 0.0)),   0.0, 1.0);\r\n    vec4 col2 = col;//clamp(coeffs.x * TEX2D(_xy + vec2(-one.x, one.y)) + coeffs.y * TEX2D(_xy + vec2(0.0, one.y)) + coeffs.z * TEX2D(_xy + one)+ coeffs.w * TEX2D(_xy + vec2(2.0 * one.x, one.y)), 0.0, 1.0);\r\n\r\n    vec4 weights  = scanlineWeights(abs(uv_ratio.y) , col);\r\n    vec4 weights2 = scanlineWeights(1.0 - uv_ratio.y, col2);\r\n\r\n    float mod_factor = v_vTexcoord.x * textureScaledSize.x * textureScaledSize.x / textureScaledSize.x;\r\n    vec3 dotMaskWeights = mix( vec3(1.05, 0.75, 1.05), vec3(0.75, 1.05, 0.75), floor(mod(mod_factor, 2.0)) );\r\n    \r\n    vec3 mul_res  = (col * weights + col2 * weights2).xyz;\r\n    mul_res *= dotMaskWeights;\r\n    \r\n    if (border == true)\r\n        { mul_res = pow(abs(mul_res), vec3(1.0 / (2.0 * inputGamma - outputGamma)))* vec3(cval); }\r\n    else\r\n        { mul_res = pow(abs(mul_res), vec3(1.0 / (2.0 * inputGamma - outputGamma))); }\r\n    \r\n    gl_FragColor = vec4(mul_res, 1.0);\r\n}\r\n",
        "#define\tMATRIX_VIEW \t\t\t\t\t0\r\n#define\tMATRIX_PROJECTION \t\t\t\t1\r\n#define\tMATRIX_WORLD \t\t\t\t\t2\r\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\r\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\r\n#define\tMATRICES_MAX\t\t\t\t\t5\r\n\r\nfloat4x4 \tgm_Matrices[MATRICES_MAX] : register(c0);\r\n\r\nbool \tgm_LightingEnabled;\r\nbool \tgm_VS_FogEnabled;\r\nfloat \tgm_FogStart;\r\nfloat \tgm_RcpFogRange;\r\n\r\n#define\tMAX_VS_LIGHTS\t\t\t\t\t8\r\nfloat4 gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\r\nfloat3 gm_Lights_Direction[MAX_VS_LIGHTS];\t\t\t// normalised direction\r\nfloat4 gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\r\nfloat4 gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t\t// rgb=colour, a=1\r\n\r\nfloat4 vec4(float x0, float x1, float x2, float x3)\n{\n    return float4(x0, x1, x2, x3);\n}\nfloat4 vec4(float3 x0, float x1)\n{\n    return float4(x0, x1);\n}\n// Attributes\nstatic float4 _in_Colour = {0, 0, 0, 0};\nstatic float3 _in_Position = {0, 0, 0};\nstatic float2 _in_TextureCoord = {0, 0};\n\nstatic float4 gl_Position = float4(0, 0, 0, 0);\n\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nuniform float4 dx_ViewAdjust : register(c1);\n\nuniform float4 _gm_AmbientColour : register(c2);\nuniform float _gm_FogStart : register(c3);\nuniform bool _gm_LightingEnabled : register(c4);\nuniform float4 _gm_Lights_Colour[8] : register(c5);\nuniform float4 _gm_Lights_Direction[8] : register(c13);\nuniform float4 _gm_Lights_PosRange[8] : register(c21);\nuniform float4x4 _gm_Matrices[5] : register(c29);\nuniform float _gm_RcpFogRange : register(c49);\nuniform bool _gm_VS_FogEnabled : register(c50);\n\n;\n;\n;\n;\n;\n;\n;\n;\n;\nfloat _CalcFogFactor(in float4 _pos)\n{\n{\nif(_gm_VS_FogEnabled)\n{\n{\nfloat4 _viewpos = mul(transpose(_gm_Matrices[3]), _pos);\nfloat _fogfactor = ((_viewpos.z - _gm_FogStart) * _gm_RcpFogRange);\nreturn _fogfactor;\n;\n}\n;\n}\nelse\n{\n{\nreturn 0.0;\n;\n}\n;\n}\n;\n}\n}\n;\nfloat4 _DoDirLight(in float3 _ws_normal, in float4 _dir, in float4 _diffusecol)\n{\n{\nfloat _dotresult = dot(_ws_normal, _dir.xyz);\n(_dotresult = max(0.0, _dotresult));\nreturn (_dotresult * _diffusecol);\n;\n}\n}\n;\nfloat4 _DoPointLight(in float3 _ws_pos, in float3 _ws_normal, in float4 _posrange, in float4 _diffusecol)\n{\n{\nfloat3 _diffvec = (_ws_pos - _posrange.xyz);\nfloat _veclen = length(_diffvec);\n(_diffvec /= _veclen);\nfloat _atten = (1.0 / (_veclen / _posrange.w));\nif((_veclen > _posrange.w))\n{\n{\n(_atten = 0.0);\n}\n;\n}\n;\nfloat _dotresult = dot(_ws_normal, _diffvec);\n(_dotresult = max(0.0, _dotresult));\nreturn ((_dotresult * _atten) * _diffusecol);\n;\n}\n}\n;\nfloat4 _DoLighting(in float4 _vertexcolour, in float4 _objectspacepos, in float3 _objectspacenormal)\n{\n{\nif(_gm_LightingEnabled)\n{\n{\nfloat4 _objectspacenormal4 = vec4(_objectspacenormal, 0.0);\nfloat3 _ws_normal = {0, 0, 0};\n(_ws_normal = mul(transpose(_gm_Matrices[3]), _objectspacenormal4).xyz);\n(_ws_normal = (-normalize(_ws_normal)));\nfloat3 _ws_pos = {0, 0, 0};\n(_ws_pos = mul(transpose(_gm_Matrices[2]), _objectspacepos).xyz);\nfloat4 _accumcol = float4(0.0, 0.0, 0.0, 0.0);\n{for(int _i = 0; (_i < 8); (_i++))\n{\n{\n(_accumcol += _DoDirLight(_ws_normal, _gm_Lights_Direction[_i], _gm_Lights_Colour[_i]));\n}\n;}\n}\n;\n{for(int _i = 0; (_i < 8); (_i++))\n{\n{\n(_accumcol += _DoPointLight(_ws_pos, _ws_normal, _gm_Lights_PosRange[_i], _gm_Lights_Colour[_i]));\n}\n;}\n}\n;\n(_accumcol *= _vertexcolour);\n(_accumcol += _gm_AmbientColour);\n(_accumcol = min(float4(1.0, 1.0, 1.0, 1.0), _accumcol));\nreturn _accumcol;\n;\n}\n;\n}\nelse\n{\n{\nreturn _vertexcolour;\n;\n}\n;\n}\n;\n}\n}\n;\n;\n;\n;\n;\n;\nvoid gl_main()\n{\n{\nfloat4 _object_space_pos = vec4(_in_Position.x, _in_Position.y, _in_Position.z, 1.0);\n(gl_Position = mul(transpose(_gm_Matrices[4]), _object_space_pos));\n(_v_vColour = _in_Colour);\n(_v_vTexcoord = _in_TextureCoord);\n}\n}\n;\nstruct VS_INPUT\n{\n    float4 _in_Colour : COLOR0;\n    float3 _in_Position : POSITION;\n    float2 _in_TextureCoord : TEXCOORD0;\n};\n\nstruct VS_OUTPUT\n{\n    float4 gl_Position : POSITION;\n    float2 v0 : TEXCOORD0;\n};\n\nVS_OUTPUT main(VS_INPUT input)\n{\n    _in_Colour = (input._in_Colour);\n    _in_Position = (input._in_Position);\n    _in_TextureCoord = (input._in_TextureCoord);\n\n    gl_main();\n\n    VS_OUTPUT output;\n    output.gl_Position.x = gl_Position.x;\n    output.gl_Position.y = gl_Position.y;\n    output.gl_Position.z = gl_Position.z;\n    output.gl_Position.w = gl_Position.w;\n    output.v0 = _v_vTexcoord;\n\n    return output;\n}\n",
        "// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\nfloat2 vec2(float x0)\n{\n    return float2(x0, x0);\n}\nfloat2 vec2(float x0, float x1)\n{\n    return float2(x0, x1);\n}\nfloat3 vec3(float x0)\n{\n    return float3(x0, x0, x0);\n}\nfloat4 vec4(float x0)\n{\n    return float4(x0, x0, x0, x0);\n}\nfloat4 vec4(float x0, float x1, float x2, float x3)\n{\n    return float4(x0, x1, x2, x3);\n}\nfloat4 vec4(float3 x0, float x1)\n{\n    return float4(x0, x1);\n}\n// Varyings\nstatic float2 _v_vTexcoord = {0, 0};\n\nstatic float4 gl_Color[1] =\n{\n    float4(0, 0, 0, 0)\n};\n\n\nuniform bool _border : register(c3);\nuniform bool _distort : register(c4);\nuniform float _distortion : register(c5);\nuniform float _gm_AlphaRefValue : register(c6);\nuniform bool _gm_AlphaTestEnabled : register(c7);\nuniform float4 _gm_FogColour : register(c8);\nuniform bool _gm_PS_FogEnabled : register(c9);\nuniform sampler2D _samp_CRT : register(s0);\nuniform float2 _textureBaseSize : register(c10);\nuniform float2 _textureScaledSize : register(c11);\n\nfloat4 gl_texture2D(sampler2D s, float2 t)\n{\n    return tex2D(s, t);\n}\n\n#define GL_USES_FRAG_COLOR\nfloat mod(float x, float y)\n{\n    return x - y * floor(x / y);\n}\n\n;\n;\n;\n;\n;\nvoid _DoAlphaTest(in float4 _SrcColour)\n{\n{\nif(_gm_AlphaTestEnabled)\n{\n{\nif((_SrcColour.w <= _gm_AlphaRefValue))\n{\n{\ndiscard;\n;\n}\n;\n}\n;\n}\n;\n}\n;\n}\n}\n;\nvoid _DoFog(inout float4 _SrcColour, in float _fogval)\n{\n{\nif(_gm_PS_FogEnabled)\n{\n{\n(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));\n}\n;\n}\n;\n}\n}\n;\n;\n;\n;\n;\nstatic float _PI = 3.1415927;\nstatic float _inputGamma = 2.4000001;\nstatic float _outputGamma = 2.8;\n;\n;\n;\nfloat4 _scanlineWeights(in float _dist, in float4 _col)\n{\n{\nfloat4 _wid = (1.0 + (2.0 * pow(_col, float4(4.0, 4.0, 4.0, 4.0))));\nfloat4 _weights = vec4((_dist * 0.1));\nreturn ((0.50999999 * exp((-pow(abs((_weights * sqrt((2.0 / _wid)))), _wid)))) / (0.18000001 + (0.059999999 * _wid)));\n;\n}\n}\n;\nstatic float2 _overscan = float2(0.99000001, 0.99000001);\nstatic float2 _aspect = vec2((_textureBaseSize.x / _textureBaseSize.x), (_textureBaseSize.y / _textureBaseSize.x));\nstatic float _cornersize = 0.029999999;\nstatic float _cornersmooth = 80.0;\nfloat _corner(in float2 _coord)\n{\n{\n(_coord = (((_coord - float2(0.5, 0.5)) * _overscan) + float2(0.5, 0.5)));\n(_coord = (min(_coord, (float2(1.0, 1.0) - _coord)) * _aspect));\nfloat2 _cdist = vec2(_cornersize);\n(_coord = (_cdist - min(_coord, _cdist)));\nfloat _dist = sqrt(dot(_coord, _coord));\nreturn clamp(((_cdist.x - _dist) * _cornersmooth), 0.0, 1.0);\n;\n}\n}\n;\nfloat2 _radialDistortion(in float2 _coord)\n{\n{\nfloat2 _cc = (_coord - 0.5);\nfloat _dist = (dot(_cc, _cc) * _distortion);\nreturn (_coord + ((_cc * (1.0 + _dist)) * _dist));\n;\n}\n}\n;\nvoid gl_main()\n{\n{\nfloat2 _one = (1.0 / _textureBaseSize);\nfloat2 __xy = {0, 0};\nif((_distort == true))\n{\n{\n(__xy = _radialDistortion(_v_vTexcoord));\n}\n;\n}\nelse\n{\n{\n(__xy = _v_vTexcoord);\n}\n;\n}\n;\nfloat2 _uv_ratio = (frac((__xy * _textureBaseSize)) - float2(0.5, 0.5));\nfloat _cval = _corner(__xy);\n(__xy = ((floor((__xy * _textureBaseSize)) + float2(0.5, 0.5)) / _textureBaseSize));\nfloat4 _coeffs = (_PI * vec4((1.0 + _uv_ratio.x), _uv_ratio.x, (1.0 - _uv_ratio.x), (2.0 - _uv_ratio.x)));\n(_coeffs = max(abs(_coeffs), 1e-006));\n(_coeffs = (((2.0 * sin(_coeffs)) * sin((_coeffs / 2.0))) / (_coeffs * _coeffs)));\n(_coeffs /= dot(_coeffs, float4(1.0, 1.0, 1.0, 1.0)));\nfloat4 _col = clamp(((((_coeffs.x * pow(abs(gl_texture2D(_samp_CRT, (__xy + vec2((-_one.x), 0.0)))), vec4(_inputGamma))) + (_coeffs.y * pow(abs(gl_texture2D(_samp_CRT, __xy)), vec4(_inputGamma)))) + (_coeffs.z * pow(abs(gl_texture2D(_samp_CRT, (__xy + vec2(_one.x, 0.0)))), vec4(_inputGamma)))) + (_coeffs.w * pow(abs(gl_texture2D(_samp_CRT, (__xy + vec2((2.0 * _one.x), 0.0)))), vec4(_inputGamma)))), 0.0, 1.0);\nfloat4 _col2 = _col;\nfloat4 _weights = _scanlineWeights(abs(_uv_ratio.y), _col);\nfloat4 _weights2 = _scanlineWeights((1.0 - _uv_ratio.y), _col2);\nfloat _mod_factor = (((_v_vTexcoord.x * _textureScaledSize.x) * _textureScaledSize.x) / _textureScaledSize.x);\nfloat3 _dotMaskWeights = lerp(float3(1.05, 0.75, 1.05), float3(0.75, 1.05, 0.75), floor(mod(_mod_factor, 2.0)));\nfloat3 _mul_res = ((_col * _weights) + (_col2 * _weights2)).xyz;\n(_mul_res *= _dotMaskWeights);\nif((_border == true))\n{\n{\n(_mul_res = (pow(abs(_mul_res), vec3((1.0 / ((2.0 * _inputGamma) - _outputGamma)))) * vec3(_cval)));\n}\n;\n}\nelse\n{\n{\n(_mul_res = pow(abs(_mul_res), vec3((1.0 / ((2.0 * _inputGamma) - _outputGamma)))));\n}\n;\n}\n;\n(gl_Color[0] = vec4(_mul_res, 1.0));\n}\n}\n;\nstruct PS_INPUT\n{\n    float2 v0 : TEXCOORD0;\n};\n\nstruct PS_OUTPUT\n{\n    float4 gl_Color0 : COLOR0;\n};\n\nPS_OUTPUT main(PS_INPUT input)\n{\n    _v_vTexcoord = input.v0.xy;\n\n    gl_main();\n\n    PS_OUTPUT output;\n    output.gl_Color0 = gl_Color[0];\n\n    return output;\n}\n",
        "shd_blank",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n}\r\n\r\n",
        "#version 120\n#define LOWPREC \n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n}\r\n\r\n",
        "// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nstatic float4 gl_Color[1] =\n{\n    float4(0, 0, 0, 0)\n};\n\n\nuniform float _gm_AlphaRefValue : register(c3);\nuniform bool _gm_AlphaTestEnabled : register(c4);\nuniform sampler2D _gm_BaseTexture : register(s0);\nuniform float4 _gm_FogColour : register(c5);\nuniform bool _gm_PS_FogEnabled : register(c6);\n\nfloat4 gl_texture2D(sampler2D s, float2 t)\n{\n    return tex2D(s, t);\n}\n\n#define GL_USES_FRAG_COLOR\n;\n;\n;\n;\n;\nvoid _DoAlphaTest(in float4 _SrcColour)\n{\n{\nif(_gm_AlphaTestEnabled)\n{\n{\nif((_SrcColour.w <= _gm_AlphaRefValue))\n{\n{\ndiscard;\n;\n}\n;\n}\n;\n}\n;\n}\n;\n}\n}\n;\nvoid _DoFog(inout float4 _SrcColour, in float _fogval)\n{\n{\nif(_gm_PS_FogEnabled)\n{\n{\n(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));\n}\n;\n}\n;\n}\n}\n;\n;\n;\nvoid gl_main()\n{\n{\n(gl_Color[0] = (_v_vColour * gl_texture2D(_gm_BaseTexture, _v_vTexcoord)));\n}\n}\n;\nstruct PS_INPUT\n{\n    float4 v0 : TEXCOORD0;\n    float2 v1 : TEXCOORD1;\n};\n\nstruct PS_OUTPUT\n{\n    float4 gl_Color0 : COLOR0;\n};\n\nPS_OUTPUT main(PS_INPUT input)\n{\n    _v_vColour = input.v0;\n    _v_vTexcoord = input.v1.xy;\n\n    gl_main();\n\n    PS_OUTPUT output;\n    output.gl_Color0 = gl_Color[0];\n\n    return output;\n}\n",
        "shd_bw",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvoid main()\r\n{\r\n    vec4 col = texture2D(gm_BaseTexture, v_vTexcoord);\r\n    vec3 lum = vec3(0.299, 0.587, 0.114);\r\n    float gray = dot(col.xyz, lum);\r\n    gl_FragColor = vec4(gray, gray, gray, col.a * v_vColour.a);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvoid main()\r\n{\r\n    vec4 col = texture2D(gm_BaseTexture, v_vTexcoord);\r\n    vec3 lum = vec3(0.299, 0.587, 0.114);\r\n    float gray = dot(col.xyz, lum);\r\n    gl_FragColor = vec4(gray, gray, gray, col.a * v_vColour.a);\r\n}\r\n",
        "// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\nfloat4 vec4(float x0, float x1, float x2, float x3)\n{\n    return float4(x0, x1, x2, x3);\n}\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nstatic float4 gl_Color[1] =\n{\n    float4(0, 0, 0, 0)\n};\n\n\nuniform float _gm_AlphaRefValue : register(c3);\nuniform bool _gm_AlphaTestEnabled : register(c4);\nuniform sampler2D _gm_BaseTexture : register(s0);\nuniform float4 _gm_FogColour : register(c5);\nuniform bool _gm_PS_FogEnabled : register(c6);\n\nfloat4 gl_texture2D(sampler2D s, float2 t)\n{\n    return tex2D(s, t);\n}\n\n#define GL_USES_FRAG_COLOR\n;\n;\n;\n;\n;\nvoid _DoAlphaTest(in float4 _SrcColour)\n{\n{\nif(_gm_AlphaTestEnabled)\n{\n{\nif((_SrcColour.w <= _gm_AlphaRefValue))\n{\n{\ndiscard;\n;\n}\n;\n}\n;\n}\n;\n}\n;\n}\n}\n;\nvoid _DoFog(inout float4 _SrcColour, in float _fogval)\n{\n{\nif(_gm_PS_FogEnabled)\n{\n{\n(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));\n}\n;\n}\n;\n}\n}\n;\n;\n;\nvoid gl_main()\n{\n{\nfloat4 _col = gl_texture2D(_gm_BaseTexture, _v_vTexcoord);\nfloat3 _lum = float3(0.29899999, 0.58700001, 0.114);\nfloat _gray = dot(_col.xyz, _lum);\n(gl_Color[0] = vec4(_gray, _gray, _gray, (_col.w * _v_vColour.w)));\n}\n}\n;\nstruct PS_INPUT\n{\n    float4 v0 : TEXCOORD0;\n    float2 v1 : TEXCOORD1;\n};\n\nstruct PS_OUTPUT\n{\n    float4 gl_Color0 : COLOR0;\n};\n\nPS_OUTPUT main(PS_INPUT input)\n{\n    _v_vColour = input.v0;\n    _v_vTexcoord = input.v1.xy;\n\n    gl_main();\n\n    PS_OUTPUT output;\n    output.gl_Color0 = gl_Color[0];\n\n    return output;\n}\n",
        "shd_desat",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvoid main()\r\n{\r\n    vec4 col = texture2D(gm_BaseTexture, v_vTexcoord);\r\n    vec3 lum = vec3(0.299, 0.587, 0.114);\r\n    float gray = dot(col.xyz, lum);\r\n    gl_FragColor = vec4((gray + col.r) * 0.5, (gray + col.g) * 0.5, (gray + col.b) * 0.5, col.a * v_vColour.a);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvoid main()\r\n{\r\n    vec4 col = texture2D(gm_BaseTexture, v_vTexcoord);\r\n    vec3 lum = vec3(0.299, 0.587, 0.114);\r\n    float gray = dot(col.xyz, lum);\r\n    gl_FragColor = vec4((gray + col.r) * 0.5, (gray + col.g) * 0.5, (gray + col.b) * 0.5, col.a * v_vColour.a);\r\n}\r\n",
        "// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\nfloat4 vec4(float x0, float x1, float x2, float x3)\n{\n    return float4(x0, x1, x2, x3);\n}\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nstatic float4 gl_Color[1] =\n{\n    float4(0, 0, 0, 0)\n};\n\n\nuniform float _gm_AlphaRefValue : register(c3);\nuniform bool _gm_AlphaTestEnabled : register(c4);\nuniform sampler2D _gm_BaseTexture : register(s0);\nuniform float4 _gm_FogColour : register(c5);\nuniform bool _gm_PS_FogEnabled : register(c6);\n\nfloat4 gl_texture2D(sampler2D s, float2 t)\n{\n    return tex2D(s, t);\n}\n\n#define GL_USES_FRAG_COLOR\n;\n;\n;\n;\n;\nvoid _DoAlphaTest(in float4 _SrcColour)\n{\n{\nif(_gm_AlphaTestEnabled)\n{\n{\nif((_SrcColour.w <= _gm_AlphaRefValue))\n{\n{\ndiscard;\n;\n}\n;\n}\n;\n}\n;\n}\n;\n}\n}\n;\nvoid _DoFog(inout float4 _SrcColour, in float _fogval)\n{\n{\nif(_gm_PS_FogEnabled)\n{\n{\n(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));\n}\n;\n}\n;\n}\n}\n;\n;\n;\nvoid gl_main()\n{\n{\nfloat4 _col = gl_texture2D(_gm_BaseTexture, _v_vTexcoord);\nfloat3 _lum = float3(0.29899999, 0.58700001, 0.114);\nfloat _gray = dot(_col.xyz, _lum);\n(gl_Color[0] = vec4(((_gray + _col.x) * 0.5), ((_gray + _col.y) * 0.5), ((_gray + _col.z) * 0.5), (_col.w * _v_vColour.w)));\n}\n}\n;\nstruct PS_INPUT\n{\n    float4 v0 : TEXCOORD0;\n    float2 v1 : TEXCOORD1;\n};\n\nstruct PS_OUTPUT\n{\n    float4 gl_Color0 : COLOR0;\n};\n\nPS_OUTPUT main(PS_INPUT input)\n{\n    _v_vColour = input.v0;\n    _v_vTexcoord = input.v1.xy;\n\n    gl_main();\n\n    PS_OUTPUT output;\n    output.gl_Color0 = gl_Color[0];\n\n    return output;\n}\n",
        "shd_hell",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvoid main()\r\n{\r\n    vec4 col = texture2D(gm_BaseTexture, v_vTexcoord);\r\n    vec3 lum = vec3(0.299, 0.587, 0.114);\r\n    float brightness = 0.34 * col.r + 0.5 * col.g + 0.16 * col.b;\r\n    float gray = dot(col.xyz, lum);\r\n    if (brightness > 0.8)\r\n    {\r\n        col.rgba = vec4(1.0,1.0,1.0,1.0);\r\n    }\r\n    else\r\n    {\r\n        gl_FragColor = vec4((gray + col.r) * 0.5, (gray + col.g) * 0.5, (gray + col.b) * 0.5, col.a * v_vColour.a);\r\n    }\r\n}\r\n",
        "#version 120\n#define LOWPREC \n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nvoid main()\r\n{\r\n    vec4 col = texture2D(gm_BaseTexture, v_vTexcoord);\r\n    vec3 lum = vec3(0.299, 0.587, 0.114);\r\n    float brightness = 0.34 * col.r + 0.5 * col.g + 0.16 * col.b;\r\n    float gray = dot(col.xyz, lum);\r\n    if (brightness > 0.8)\r\n    {\r\n        col.rgba = vec4(1.0,1.0,1.0,1.0);\r\n    }\r\n    else\r\n    {\r\n        gl_FragColor = vec4((gray + col.r) * 0.5, (gray + col.g) * 0.5, (gray + col.b) * 0.5, col.a * v_vColour.a);\r\n    }\r\n}\r\n",
        "// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\nfloat4 vec4(float x0, float x1, float x2, float x3)\n{\n    return float4(x0, x1, x2, x3);\n}\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nstatic float4 gl_Color[1] =\n{\n    float4(0, 0, 0, 0)\n};\n\n\nuniform float _gm_AlphaRefValue : register(c3);\nuniform bool _gm_AlphaTestEnabled : register(c4);\nuniform sampler2D _gm_BaseTexture : register(s0);\nuniform float4 _gm_FogColour : register(c5);\nuniform bool _gm_PS_FogEnabled : register(c6);\n\nfloat4 gl_texture2D(sampler2D s, float2 t)\n{\n    return tex2D(s, t);\n}\n\n#define GL_USES_FRAG_COLOR\n;\n;\n;\n;\n;\nvoid _DoAlphaTest(in float4 _SrcColour)\n{\n{\nif(_gm_AlphaTestEnabled)\n{\n{\nif((_SrcColour.w <= _gm_AlphaRefValue))\n{\n{\ndiscard;\n;\n}\n;\n}\n;\n}\n;\n}\n;\n}\n}\n;\nvoid _DoFog(inout float4 _SrcColour, in float _fogval)\n{\n{\nif(_gm_PS_FogEnabled)\n{\n{\n(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));\n}\n;\n}\n;\n}\n}\n;\n;\n;\nvoid gl_main()\n{\n{\nfloat4 _col = gl_texture2D(_gm_BaseTexture, _v_vTexcoord);\nfloat3 _lum = float3(0.29899999, 0.58700001, 0.114);\nfloat _brightness = (((0.34 * _col.x) + (0.5 * _col.y)) + (0.16 * _col.z));\nfloat _gray = dot(_col.xyz, _lum);\nif((_brightness > 0.80000001))\n{\n{\n(_col.xyzw = float4(1.0, 1.0, 1.0, 1.0));\n}\n;\n}\nelse\n{\n{\n(gl_Color[0] = vec4(((_gray + _col.x) * 0.5), ((_gray + _col.y) * 0.5), ((_gray + _col.z) * 0.5), (_col.w * _v_vColour.w)));\n}\n;\n}\n;\n}\n}\n;\nstruct PS_INPUT\n{\n    float4 v0 : TEXCOORD0;\n    float2 v1 : TEXCOORD1;\n};\n\nstruct PS_OUTPUT\n{\n    float4 gl_Color0 : COLOR0;\n};\n\nPS_OUTPUT main(PS_INPUT input)\n{\n    _v_vColour = input.v0;\n    _v_vTexcoord = input.v1.xy;\n\n    gl_main();\n\n    PS_OUTPUT output;\n    output.gl_Color0 = gl_Color[0];\n\n    return output;\n}\n",
        "shd_overlay",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n// Overlay Shader\r\n//\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D texOverlay;\r\n\r\nvoid main()\r\n{\r\n    vec4 inColor = v_vColour * texture2D(gm_BaseTexture, v_vTexcoord);\r\n    vec4 outColor = vec4(0.0, 0.0, 0.0, inColor.a);\r\n    vec4 overlay = texture2D(texOverlay, v_vTexcoord);\r\n      \r\n    if (inColor.r > 0.5)\r\n    {\r\n        outColor.r = (1.0 - (1.0 - 2.0 * (inColor.r - 0.5)) * (1.0 - overlay.r));\r\n    }\r\n    else\r\n    {   \r\n        outColor.r = ((2.0 * inColor.r) * overlay.r);\r\n    }\r\n\r\n    if (inColor.g > 0.5)\r\n    {\r\n        outColor.g = (1.0 - (1.0 - 2.0 * (inColor.g - 0.5)) * (1.0 - overlay.g));\r\n    }\r\n    else\r\n    {   \r\n        outColor.g = ((2.0 * inColor.g) * overlay.g);\r\n    }\r\n\r\n    if (inColor.b > 0.5)\r\n    {\r\n        outColor.b = (1.0 - (1.0 - 2.0 * (inColor.b - 0.5)) * (1.0 - overlay.b));\r\n    }\r\n    else\r\n    {   \r\n        outColor.b = ((2.0 * inColor.b) * overlay.b);\r\n    }\r\n    gl_FragColor = mix(outColor, inColor,1.0 - overlay.a);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n// Overlay Shader\r\n//\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D texOverlay;\r\n\r\nvoid main()\r\n{\r\n    vec4 inColor = v_vColour * texture2D(gm_BaseTexture, v_vTexcoord);\r\n    vec4 outColor = vec4(0.0, 0.0, 0.0, inColor.a);\r\n    vec4 overlay = texture2D(texOverlay, v_vTexcoord);\r\n      \r\n    if (inColor.r > 0.5)\r\n    {\r\n        outColor.r = (1.0 - (1.0 - 2.0 * (inColor.r - 0.5)) * (1.0 - overlay.r));\r\n    }\r\n    else\r\n    {   \r\n        outColor.r = ((2.0 * inColor.r) * overlay.r);\r\n    }\r\n\r\n    if (inColor.g > 0.5)\r\n    {\r\n        outColor.g = (1.0 - (1.0 - 2.0 * (inColor.g - 0.5)) * (1.0 - overlay.g));\r\n    }\r\n    else\r\n    {   \r\n        outColor.g = ((2.0 * inColor.g) * overlay.g);\r\n    }\r\n\r\n    if (inColor.b > 0.5)\r\n    {\r\n        outColor.b = (1.0 - (1.0 - 2.0 * (inColor.b - 0.5)) * (1.0 - overlay.b));\r\n    }\r\n    else\r\n    {   \r\n        outColor.b = ((2.0 * inColor.b) * overlay.b);\r\n    }\r\n    gl_FragColor = mix(outColor, inColor,1.0 - overlay.a);\r\n}\r\n",
        "// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\nfloat4 vec4(float x0, float x1, float x2, float x3)\n{\n    return float4(x0, x1, x2, x3);\n}\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nstatic float4 gl_Color[1] =\n{\n    float4(0, 0, 0, 0)\n};\n\n\nuniform float _gm_AlphaRefValue : register(c3);\nuniform bool _gm_AlphaTestEnabled : register(c4);\nuniform sampler2D _gm_BaseTexture : register(s0);\nuniform float4 _gm_FogColour : register(c5);\nuniform bool _gm_PS_FogEnabled : register(c6);\nuniform sampler2D _texOverlay : register(s1);\n\nfloat4 gl_texture2D(sampler2D s, float2 t)\n{\n    return tex2D(s, t);\n}\n\n#define GL_USES_FRAG_COLOR\n;\n;\n;\n;\n;\nvoid _DoAlphaTest(in float4 _SrcColour)\n{\n{\nif(_gm_AlphaTestEnabled)\n{\n{\nif((_SrcColour.w <= _gm_AlphaRefValue))\n{\n{\ndiscard;\n;\n}\n;\n}\n;\n}\n;\n}\n;\n}\n}\n;\nvoid _DoFog(inout float4 _SrcColour, in float _fogval)\n{\n{\nif(_gm_PS_FogEnabled)\n{\n{\n(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));\n}\n;\n}\n;\n}\n}\n;\n;\n;\n;\nvoid gl_main()\n{\n{\nfloat4 _inColor = (_v_vColour * gl_texture2D(_gm_BaseTexture, _v_vTexcoord));\nfloat4 _outColor = vec4(0.0, 0.0, 0.0, _inColor.w);\nfloat4 _overlay = gl_texture2D(_texOverlay, _v_vTexcoord);\nif((_inColor.x > 0.5))\n{\n{\n(_outColor.x = (1.0 - ((1.0 - (2.0 * (_inColor.x - 0.5))) * (1.0 - _overlay.x))));\n}\n;\n}\nelse\n{\n{\n(_outColor.x = ((2.0 * _inColor.x) * _overlay.x));\n}\n;\n}\n;\nif((_inColor.y > 0.5))\n{\n{\n(_outColor.y = (1.0 - ((1.0 - (2.0 * (_inColor.y - 0.5))) * (1.0 - _overlay.y))));\n}\n;\n}\nelse\n{\n{\n(_outColor.y = ((2.0 * _inColor.y) * _overlay.y));\n}\n;\n}\n;\nif((_inColor.z > 0.5))\n{\n{\n(_outColor.z = (1.0 - ((1.0 - (2.0 * (_inColor.z - 0.5))) * (1.0 - _overlay.z))));\n}\n;\n}\nelse\n{\n{\n(_outColor.z = ((2.0 * _inColor.z) * _overlay.z));\n}\n;\n}\n;\n(gl_Color[0] = lerp(_outColor, _inColor, (1.0 - _overlay.w)));\n}\n}\n;\nstruct PS_INPUT\n{\n    float4 v0 : TEXCOORD0;\n    float2 v1 : TEXCOORD1;\n};\n\nstruct PS_OUTPUT\n{\n    float4 gl_Color0 : COLOR0;\n};\n\nPS_OUTPUT main(PS_INPUT input)\n{\n    _v_vColour = input.v0;\n    _v_vTexcoord = input.v1.xy;\n\n    gl_main();\n\n    PS_OUTPUT output;\n    output.gl_Color0 = gl_Color[0];\n\n    return output;\n}\n",
        "shd_multiply",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n// Multiply Shader\r\n//\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D texMultiply;\r\n\r\nvoid main()\r\n{\r\n    vec4 inColor = v_vColour * texture2D(gm_BaseTexture, v_vTexcoord);\r\n    vec4 blend = texture2D(texMultiply, v_vTexcoord);\r\n    vec4 outColor = vec4(blend.rgb * inColor.rgb, inColor.a);\r\n    gl_FragColor =  mix(outColor, inColor, 1.0 - blend.a);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n// Multiply Shader\r\n//\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D texMultiply;\r\n\r\nvoid main()\r\n{\r\n    vec4 inColor = v_vColour * texture2D(gm_BaseTexture, v_vTexcoord);\r\n    vec4 blend = texture2D(texMultiply, v_vTexcoord);\r\n    vec4 outColor = vec4(blend.rgb * inColor.rgb, inColor.a);\r\n    gl_FragColor =  mix(outColor, inColor, 1.0 - blend.a);\r\n}\r\n",
        "// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\nfloat4 vec4(float3 x0, float x1)\n{\n    return float4(x0, x1);\n}\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nstatic float4 gl_Color[1] =\n{\n    float4(0, 0, 0, 0)\n};\n\n\nuniform float _gm_AlphaRefValue : register(c3);\nuniform bool _gm_AlphaTestEnabled : register(c4);\nuniform sampler2D _gm_BaseTexture : register(s0);\nuniform float4 _gm_FogColour : register(c5);\nuniform bool _gm_PS_FogEnabled : register(c6);\nuniform sampler2D _texMultiply : register(s1);\n\nfloat4 gl_texture2D(sampler2D s, float2 t)\n{\n    return tex2D(s, t);\n}\n\n#define GL_USES_FRAG_COLOR\n;\n;\n;\n;\n;\nvoid _DoAlphaTest(in float4 _SrcColour)\n{\n{\nif(_gm_AlphaTestEnabled)\n{\n{\nif((_SrcColour.w <= _gm_AlphaRefValue))\n{\n{\ndiscard;\n;\n}\n;\n}\n;\n}\n;\n}\n;\n}\n}\n;\nvoid _DoFog(inout float4 _SrcColour, in float _fogval)\n{\n{\nif(_gm_PS_FogEnabled)\n{\n{\n(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));\n}\n;\n}\n;\n}\n}\n;\n;\n;\n;\nvoid gl_main()\n{\n{\nfloat4 _inColor = (_v_vColour * gl_texture2D(_gm_BaseTexture, _v_vTexcoord));\nfloat4 _blend = gl_texture2D(_texMultiply, _v_vTexcoord);\nfloat4 _outColor = vec4((_blend.xyz * _inColor.xyz), _inColor.w);\n(gl_Color[0] = lerp(_outColor, _inColor, (1.0 - _blend.w)));\n}\n}\n;\nstruct PS_INPUT\n{\n    float4 v0 : TEXCOORD0;\n    float2 v1 : TEXCOORD1;\n};\n\nstruct PS_OUTPUT\n{\n    float4 gl_Color0 : COLOR0;\n};\n\nPS_OUTPUT main(PS_INPUT input)\n{\n    _v_vColour = input.v0;\n    _v_vTexcoord = input.v1.xy;\n\n    gl_main();\n\n    PS_OUTPUT output;\n    output.gl_Color0 = gl_Color[0];\n\n    return output;\n}\n",
        "shd_test",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n// Multiply Shader\r\n//\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D texMultiply;\r\n\r\nvoid main()\r\n{\r\n    vec4 inColor = v_vColour * texture2D(gm_BaseTexture, v_vTexcoord);\r\n    vec4 blend = texture2D(texMultiply, v_vTexcoord);\r\n    vec4 outColor = vec4(blend.rgb * inColor.rgb, inColor.a);\r\n    gl_FragColor =  mix(outColor, inColor, 1.0 - blend.a);\r\n    vec4 col = texture2D(gm_BaseTexture, v_vTexcoord);\r\n\r\n    vec3 lum = vec3(0.299, 0.587, 0.114);\r\n    float gray = dot(col.xyz, lum);\r\n    float factor = col.b; //factor to preserve gray\r\n    gl_FragColor = vec4((gray * factor) + (col.r * (1.0-factor)), (gray * factor) + (col.g * (1.0-factor)), (gray * factor) + (col.b * (1.0-factor)), col.a*v_vColour.a);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n// Multiply Shader\r\n//\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D texMultiply;\r\n\r\nvoid main()\r\n{\r\n    vec4 inColor = v_vColour * texture2D(gm_BaseTexture, v_vTexcoord);\r\n    vec4 blend = texture2D(texMultiply, v_vTexcoord);\r\n    vec4 outColor = vec4(blend.rgb * inColor.rgb, inColor.a);\r\n    gl_FragColor =  mix(outColor, inColor, 1.0 - blend.a);\r\n    vec4 col = texture2D(gm_BaseTexture, v_vTexcoord);\r\n\r\n    vec3 lum = vec3(0.299, 0.587, 0.114);\r\n    float gray = dot(col.xyz, lum);\r\n    float factor = col.b; //factor to preserve gray\r\n    gl_FragColor = vec4((gray * factor) + (col.r * (1.0-factor)), (gray * factor) + (col.g * (1.0-factor)), (gray * factor) + (col.b * (1.0-factor)), col.a*v_vColour.a);\r\n}\r\n",
        "// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\nfloat4 vec4(float x0, float x1, float x2, float x3)\n{\n    return float4(x0, x1, x2, x3);\n}\nfloat4 vec4(float3 x0, float x1)\n{\n    return float4(x0, x1);\n}\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nstatic float4 gl_Color[1] =\n{\n    float4(0, 0, 0, 0)\n};\n\n\nuniform float _gm_AlphaRefValue : register(c3);\nuniform bool _gm_AlphaTestEnabled : register(c4);\nuniform sampler2D _gm_BaseTexture : register(s0);\nuniform float4 _gm_FogColour : register(c5);\nuniform bool _gm_PS_FogEnabled : register(c6);\nuniform sampler2D _texMultiply : register(s1);\n\nfloat4 gl_texture2D(sampler2D s, float2 t)\n{\n    return tex2D(s, t);\n}\n\n#define GL_USES_FRAG_COLOR\n;\n;\n;\n;\n;\nvoid _DoAlphaTest(in float4 _SrcColour)\n{\n{\nif(_gm_AlphaTestEnabled)\n{\n{\nif((_SrcColour.w <= _gm_AlphaRefValue))\n{\n{\ndiscard;\n;\n}\n;\n}\n;\n}\n;\n}\n;\n}\n}\n;\nvoid _DoFog(inout float4 _SrcColour, in float _fogval)\n{\n{\nif(_gm_PS_FogEnabled)\n{\n{\n(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));\n}\n;\n}\n;\n}\n}\n;\n;\n;\n;\nvoid gl_main()\n{\n{\nfloat4 _inColor = (_v_vColour * gl_texture2D(_gm_BaseTexture, _v_vTexcoord));\nfloat4 _blend = gl_texture2D(_texMultiply, _v_vTexcoord);\nfloat4 _outColor = vec4((_blend.xyz * _inColor.xyz), _inColor.w);\n(gl_Color[0] = lerp(_outColor, _inColor, (1.0 - _blend.w)));\nfloat4 _col = gl_texture2D(_gm_BaseTexture, _v_vTexcoord);\nfloat3 _lum = float3(0.29899999, 0.58700001, 0.114);\nfloat _gray = dot(_col.xyz, _lum);\nfloat _factor = _col.z;\n(gl_Color[0] = vec4(((_gray * _factor) + (_col.x * (1.0 - _factor))), ((_gray * _factor) + (_col.y * (1.0 - _factor))), ((_gray * _factor) + (_col.z * (1.0 - _factor))), (_col.w * _v_vColour.w)));\n}\n}\n;\nstruct PS_INPUT\n{\n    float4 v0 : TEXCOORD0;\n    float2 v1 : TEXCOORD1;\n};\n\nstruct PS_OUTPUT\n{\n    float4 gl_Color0 : COLOR0;\n};\n\nPS_OUTPUT main(PS_INPUT input)\n{\n    _v_vColour = input.v0;\n    _v_vTexcoord = input.v1.xy;\n\n    gl_main();\n\n    PS_OUTPUT output;\n    output.gl_Color0 = gl_Color[0];\n\n    return output;\n}\n",
        "shd_flash",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 col = texture2D( gm_BaseTexture, v_vTexcoord );\r\n    col.r = 255.0;\r\n    col.g = 255.0;\r\n    col.b = 255.0;\r\n    gl_FragColor = v_vColour * col;\r\n}\r\n\r\n//0.33 R + 0.5 G + 0.16 B\r\n",
        "#version 120\n#define LOWPREC \n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\r\n\r\nuniform sampler2D gm_BaseTexture;\r\n\r\nuniform bool gm_PS_FogEnabled;\r\nuniform vec4 gm_FogColour;\r\nuniform bool gm_AlphaTestEnabled;\r\nuniform float gm_AlphaRefValue;\r\n\r\nvoid DoAlphaTest(vec4 SrcColour)\r\n{\r\n\tif (gm_AlphaTestEnabled)\r\n\t{\r\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid DoFog(inout vec4 SrcColour, float fogval)\r\n{\r\n\tif (gm_PS_FogEnabled)\r\n\t{\r\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \r\n\t}\r\n}\r\n\r\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 col = texture2D( gm_BaseTexture, v_vTexcoord );\r\n    col.r = 255.0;\r\n    col.g = 255.0;\r\n    col.b = 255.0;\r\n    gl_FragColor = v_vColour * col;\r\n}\r\n\r\n//0.33 R + 0.5 G + 0.16 B\r\n",
        "// GameMaker reserved and common types/inputs\r\n\r\nsampler2D gm_BaseTexture : register(S0);\r\n\r\nbool \tgm_PS_FogEnabled;\r\nfloat4 \tgm_FogColour;\r\nbool \tgm_AlphaTestEnabled;\r\nfloat4\tgm_AlphaRefValue;\r\n// Varyings\nstatic float4 _v_vColour = {0, 0, 0, 0};\nstatic float2 _v_vTexcoord = {0, 0};\n\nstatic float4 gl_Color[1] =\n{\n    float4(0, 0, 0, 0)\n};\n\n\nuniform float _gm_AlphaRefValue : register(c3);\nuniform bool _gm_AlphaTestEnabled : register(c4);\nuniform sampler2D _gm_BaseTexture : register(s0);\nuniform float4 _gm_FogColour : register(c5);\nuniform bool _gm_PS_FogEnabled : register(c6);\n\nfloat4 gl_texture2D(sampler2D s, float2 t)\n{\n    return tex2D(s, t);\n}\n\n#define GL_USES_FRAG_COLOR\n;\n;\n;\n;\n;\nvoid _DoAlphaTest(in float4 _SrcColour)\n{\n{\nif(_gm_AlphaTestEnabled)\n{\n{\nif((_SrcColour.w <= _gm_AlphaRefValue))\n{\n{\ndiscard;\n;\n}\n;\n}\n;\n}\n;\n}\n;\n}\n}\n;\nvoid _DoFog(inout float4 _SrcColour, in float _fogval)\n{\n{\nif(_gm_PS_FogEnabled)\n{\n{\n(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));\n}\n;\n}\n;\n}\n}\n;\n;\n;\nvoid gl_main()\n{\n{\n(gl_Color[0] = (_v_vColour * gl_texture2D(_gm_BaseTexture, _v_vTexcoord)));\nfloat4 _col = gl_texture2D(_gm_BaseTexture, _v_vTexcoord);\n(_col.x = 255.0);\n(_col.y = 255.0);\n(_col.z = 255.0);\n(gl_Color[0] = (_v_vColour * _col));\n}\n}\n;\nstruct PS_INPUT\n{\n    float4 v0 : TEXCOORD0;\n    float2 v1 : TEXCOORD1;\n};\n\nstruct PS_OUTPUT\n{\n    float4 gl_Color0 : COLOR0;\n};\n\nPS_OUTPUT main(PS_INPUT input)\n{\n    _v_vColour = input.v0;\n    _v_vTexcoord = input.v1.xy;\n\n    gl_main();\n\n    PS_OUTPUT output;\n    output.gl_Color0 = gl_Color[0];\n\n    return output;\n}\n",
        "fontTiny",
        "NBP Informa FiveSix",
        "fontSmall",
        "Windows Command Prompt",
        "fontMedium",
        "tl_test",
        "tl_lv1_2_1",
        "tl_intro",
        "tl_first_mission",
        "tl_warning",
        "tl_lv1_4_1",
        "tl_lv1_6_1",
        "tl_lv1_7_1",
        "tl_lv1_8_1",
        "tl_lv1_10_1",
        "tl_lv2_1_1",
        "tl_lv2_3_1",
        "tl_lv2_4_1",
        "tl_lv2_5_1",
        "tl_lv2_5_boss11",
        "tl_lv2_5_boss12",
        "tl_lv2_6_1",
        "tl_lv2_7_1",
        "tl_lv3_1_1",
        "tl_lv3_4_1",
        "tl_lv3_5_1",
        "tl_lv3_6_1",
        "tl_lv3_7_1",
        "tl_lv3_8_1",
        "tl_lv3_8_2",
        "tl_lv3_9_1",
        "tl_lv4_2_1",
        "tl_lv4_2_2",
        "tl_lv4_2_3",
        "tl_lv4_2_4",
        "timeline23",
        "oWallpaperFront",
        "oWallpaper",
        "oB",
        "oBDoor",
        "oCraneTower1",
        "oCrate1",
        "oCrate2",
        "oGround1",
        "oGround2",
        "oDock",
        "oBalcony1",
        "oBalcony2",
        "oCranePath1",
        "oStair1",
        "oLadder1",
        "oElevator1Button",
        "oElevatorDoor1",
        "oElevator1",
        "oDoorElevator",
        "oDoor1",
        "oDoor2",
        "oDoor3",
        "oDoor4",
        "oStairwell1",
        "oStairwell2",
        "oZomb1",
        "oZomb2",
        "oZomb3",
        "oZomb4",
        "oZombBoss2",
        "oDog1",
        "oZomb3Head",
        "oZombCamera",
        "oZombCameraHead",
        "oRope",
        "oZombBoss1Spawn",
        "oZombBoss1",
        "oVamp2",
        "oVamp1",
        "oVamp3",
        "oVampBoss2",
        "oVampBoss11",
        "oVampBoss12",
        "oVamp4",
        "oVamp3Body",
        "oVampBoss11Body",
        "oVampBoss12Body",
        "oVampBoss2Body",
        "oVamp3Gem",
        "oVampBoss2Gem",
        "oEmote",
        "oEmoteStun",
        "oGhost",
        "oSkeleBoss1",
        "oSkeleBoss2",
        "oSkeleBoss2Dying",
        "oSkeleBoss2Body",
        "oTotem1",
        "oSkele1",
        "oSkele2",
        "oSkele5",
        "oSkele3",
        "oSkele4",
        "oOni1",
        "oOni2",
        "oOniBoss1",
        "oOni3",
        "oTrapGrenade",
        "oTrapReactor",
        "oTrapPlate",
        "oTrapShotgun",
        "oSniperEnemy",
        "oCar1",
        "oCar2",
        "oCar3",
        "oThreatenBody",
        "oDeadBody",
        "oKill",
        "oDelaySpawn",
        "oGod",
        "oRollBar",
        "oSniperPlayer",
        "oSniperCredits",
        "oMeatPortal",
        "oTimer",
        "oPortal",
        "oKeycard",
        "oCassettePickup",
        "oCrateMeat",
        "oDeadReaper1",
        "oNotes",
        "oTest",
        "oTarget",
        "oLevelEnd",
        "oCokeInspect",
        "oCarIbzan",
        "oSafe1",
        "oSafe2",
        "oP",
        "oCokeBurn",
        "oCokeBurnLarge",
        "oPPipe",
        "oPControl",
        "oCar",
        "oLightGlow",
        "oLightfixtureGarage",
        "oLightDynamic",
        "oLightDynamicAdd",
        "oLightStrip",
        "oLightFlash",
        "oLightFade",
        "pLight",
        "pLightAdd",
        "oLighting",
        "oSmallCandle1",
        "oPendantLight1",
        "oPendantLight2",
        "oPendantLight3",
        "oFloodLight1",
        "oDimLight",
        "oPartyLight",
        "oLightpost1",
        "oLightpost2",
        "oWall",
        "oWarehouseLight1",
        "oLightswitch1",
        "oLightfixture1",
        "oLightfixture2",
        "oLightfixture3",
        "oLightfixture4",
        "oLightfixture5",
        "oLightfixture6",
        "oConstructionLight1",
        "oConstructionLight2",
        "oDockLight",
        "oLampFloor1",
        "oStrobeLight",
        "oPartySpotlight",
        "oXbow",
        "oSPistol",
        "oM16",
        "oKnifeblock",
        "oKnife",
        "oShuri",
        "oArrow",
        "oHammer",
        "oSledge",
        "oScythe",
        "oPistol",
        "oPlasma",
        "oGl",
        "oAGl",
        "oMine",
        "oMineDetonate",
        "oPPistol",
        "oPistolBig",
        "oPShotgun",
        "oAShotgun",
        "oSShotgun",
        "oGrenade",
        "oGrenadeActive",
        "oUzi",
        "oP90",
        "oSub",
        "oAK",
        "oRevolver",
        "oRevolver1",
        "oRevolver2",
        "oRevolver3",
        "oSawed",
        "oBuss",
        "oRifle",
        "oCharon",
        "oBoat",
        "oCandlePlaceCassette",
        "oCandleHang1",
        "oCandleSnipers",
        "oCandleIdle1",
        "oCandleWarning",
        "oCandlePray",
        "oCat",
        "oAptLamp",
        "oAptChand",
        "oFireplace",
        "oAptWindows",
        "oAptTable",
        "oAptBedside",
        "oAptRecord",
        "oAptChair",
        "oAptChair2",
        "oAptStairwell",
        "oAptRack",
        "oAptCassette",
        "oAptBox",
        "oAptMirror",
        "oAptBed",
        "oAptFurniture",
        "oAptPatch",
        "oRavenFeast",
        "oRavenFly",
        "oRaven",
        "oDartboard",
        "oSnowSecret",
        "oJukebox",
        "oArch",
        "oCarLift",
        "oChair1",
        "oSkeleBoss1Scrawl",
        "oBleacher",
        "oPhoto1",
        "oExitSign",
        "oBackDoor1",
        "oBackDoor2",
        "oMessVamp",
        "oDeadVamp",
        "oVamp1Asleep",
        "oVamp2Asleep",
        "oFirefly",
        "oShelf1",
        "oWindowCut",
        "oBarTV1",
        "oBarShelf1",
        "oBarShelf2",
        "oBarShelf3",
        "oBarShelf4",
        "oBarShelfLong1",
        "oBarShelfLong3",
        "oBarSign1",
        "oBarSign2",
        "oSmallSign1",
        "oSmallSign2",
        "oSmallSign3",
        "oTrailerWheel",
        "oWallBullet1",
        "oMotelSign",
        "oSign",
        "oDogCage",
        "oBarStool1",
        "oMirror1",
        "oMirror2",
        "oMirror3",
        "oPartyMirror1",
        "oCoke1",
        "oPortalSign",
        "oCokeVamp1",
        "oCokeVamp2",
        "oCoke2",
        "oTutorial",
        "oWallHole1",
        "oWallHole2",
        "oWallHole3",
        "oWindow1",
        "oWindow2",
        "oWindow3",
        "oWindow4",
        "oWindow5",
        "oWindow6",
        "oWindow7",
        "oTable1",
        "oTable3",
        "oTable4",
        "oTable5",
        "oTable6",
        "oFlower1",
        "oFlower2",
        "oCabinet1",
        "oCabinetFront1",
        "oCounter1",
        "oCounterFront1",
        "oSnow1",
        "oCandleHolder",
        "oFireplace2",
        "oSewer",
        "oCarCover",
        "oArcade1",
        "oCouch1",
        "oCouch3",
        "oBar1",
        "oPoolTable1",
        "oDrugTable",
        "oBed1",
        "oTable7",
        "oTable8",
        "oBed2",
        "oBed3",
        "oBed4",
        "oChair2",
        "oDrawer1",
        "oPartyCouch1",
        "oPartyCouch2",
        "oPartyCouch3",
        "oZombBoss1Cover",
        "oBarChair1",
        "oBarCouch1",
        "oBarCouch2",
        "oCouch2",
        "oTV1",
        "oTV2",
        "oFridge1",
        "oFilingCabinet1",
        "oTable2",
        "oPipeBlock1",
        "oDetector1",
        "oPipe",
        "oVent1",
        "oVent2",
        "oVent3",
        "oVent4",
        "oToilet1",
        "oWell",
        "oBath1",
        "oSink1",
        "oBoombox1",
        "oGramo",
        "oBoombox2",
        "oRadio1",
        "oRadio2",
        "oSpeaker1",
        "oSpeaker2",
        "oSpeaker3",
        "oPA1",
        "oPA2",
        "oGiveSoul",
        "oAchievementScreen",
        "oAchievement",
        "oTip",
        "oWhiteFlash",
        "oEndGame",
        "oSniper",
        "oSniperDot",
        "oCassette",
        "oLoadGame",
        "oNewGame",
        "oCredits",
        "oLoadCustom",
        "oLoadRoom",
        "oMain",
        "oLogo",
        "oPause",
        "oLockGame",
        "oNewWeapon",
        "oUpgradeWeapon",
        "oUpgrade",
        "oUpgradeWeaponOld",
        "oCutscene",
        "oCutsceneCustom",
        "oCutsceneSmall",
        "oMissionSelect",
        "oDialogueTree",
        "oAptControl",
        "oStat",
        "oInit",
        "oStartTimer",
        "oChangeRoom",
        "oVoice",
        "oEfFlare",
        "oCokePerson",
        "oExplosion",
        "oWater",
        "oEfCircleFlash",
        "oSoulBall",
        "oEfFirefly",
        "oFire",
        "oEfSmokeSmall",
        "oEfBulletRefund",
        "oEfBubble",
        "oSoul",
        "oBehind",
        "oMask",
        "oMaskReflect",
        "oAlert",
        "oAlertLocation",
        "oFlash",
        "oEffect",
        "oEffectAdd",
        "oDecal",
        "pWindow",
        "pTrigger",
        "pTrap",
        "pCar",
        "pMusic",
        "pNoHud",
        "pEnemySpawn",
        "pVent",
        "pDoor",
        "pFire",
        "pDestruct",
        "oBJumpthrough",
        "pAlerting",
        "pWeapon",
        "pMelee",
        "pReactor",
        "pBlood",
        "pFixture",
        "pPhys",
        "pNPC",
        "pCollision",
        "pFriend",
        "pCover",
        "pEnemy",
        "pB",
        "oPhysBlood",
        "oPhysCasing",
        "oPhysPoolBall",
        "oPhysHuman",
        "oPhysDog",
        "oPhysGlass",
        "oPhysGore",
        "oPhysCokeGore",
        "oPhysDebris",
        "oPhysSparks",
        "oPhysDebrisFlaming",
        "oPhysHead",
        "oPhysBody",
        "oPhysUArm",
        "oPhysDogBody",
        "oPhysLArm",
        "oPhysULeg",
        "oPhysLLeg",
        "pLogic",
        "oOven1",
        "oCableBox",
        "oManhole",
        "oGenerator1",
        "oMicrowave1",
        "oStairHelp",
        "oBPistol",
        "oTommy",
        "oPantry1",
        "oBSlope2",
        "oBSlope1",
        "oBJumpT",
        "oBBullet",
        "oGrenade1",
        "oGrenade2",
        "oBullet1",
        "oGlass",
        "rInit",
        "rm_logo",
        "rm_main",
        "rm_load",
        "rm_ng",
        "rm_load_custom",
        "rm_mission",
        "rm_apt",
        "rm_credits",
        "rm_dock",
        "rm_stats",
        "rm_pause",
        "rm_ingame",
        "gml_Script_trigger_command",
        "gml_Script_load_game_list",
        "gml_Script_format_time",
        "gml_Script_format_time_nohour",
        "gml_Script_move_mouse",
        "gml_Script_draw_surface_wave",
        "gml_Script_draw_curve",
        "gml_Script_close",
        "gml_Script_add_achievement",
        "gml_Script_unlock_apt",
        "gml_Script_zone_find",
        "gml_Script_zone_heat",
        "gml_Script_zone_join",
        "gml_Script_zone_split",
        "gml_Script_zone_update",
        "gml_Script_draw_sine",
        "gml_Script_load_game",
        "gml_Script_open_door",
        "gml_Script_lock_set",
        "gml_Script_refresh_screen",
        "gml_Script_read_prefs",
        "gml_Script_write_prefs",
        "gml_Script_is_lit",
        "gml_Script_add_vertex",
        "gml_Script_remove_chunk",
        "gml_Script_refresh_lights",
        "gml_Script_refresh_lights_all",
        "gml_Script_format_ctext",
        "gml_Script_draw_sector",
        "gml_Script_draw_border",
        "gml_Script_room_load",
        "gml_Script_find_cover_nearest",
        "gml_Script_raycast_aabb",
        "gml_Script_ctext_normal",
        "gml_Script_find_middle",
        "gml_Script_rotate_direction",
        "gml_Script_angle_diff",
        "gml_Script_draw_ctext",
        "gml_Script_collision_line_advanced",
        "gml_Script_draw_sprite_outline",
        "gml_Script_draw_sprite_outline_ext",
        "gml_Script_unpause_game",
        "gml_Script_pause_game",
        "gml_Script_run_or_walk",
        "gml_Script_voice",
        "gml_Script_draw_ai",
        "gml_Script_death_ai",
        "gml_Script_bstep_ai",
        "gml_Script_choose_trait",
        "gml_Script_step_ai",
        "gml_Script_alarm_ai",
        "gml_Script_init_ai",
        "gml_Script_fire_bullet",
        "gml_Script_fire_shotgun",
        "gml_Script_change_sprite",
        "gml_Script_change_weapons",
        "gml_Script_rotate_arm",
        "gml_Script_shoot_pressed_default",
        "gml_Script_shoot_default",
        "gml_Script_init_default",
        "gml_Script_bstep_default",
        "gml_Script_step_default",
        "gml_Script_reset_stats_all",
        "gml_Script_reset_stats_death",
        "gml_Script_exit_room",
        "gml_Script_advance_mission",
        "gml_Script_init_sfx",
        "gml_Script_snd_play",
        "gml_Script_snd_play_ext",
        "gml_Script_control_default",
        "gml_Script_control_gamepad_default",
        "gml_Script_refresh_control_string",
        "gml_Script_string_stick",
        "gml_Script_string_gamepad",
        "gml_Script_string_key",
        "gml_Script_string_mouse",
        "gml_Script_check",
        "gml_Script_check_pressed",
        "gml_Script_check_released",
        "gml_Script_choose_voice",
        "gml_Script_give_soul",
        "gml_Script_phys_blood_spray",
        "gml_Script_crow_parent",
        "gml_Script_draw_shadow",
        "gml_Script_fail_timer",
        "gml_Script_coke_target",
        "gml_Script_drop_cassette",
        "gml_Script_refresh_pipe",
        "gml_Script_enter_elevator",
        "gml_Script_impact_effect",
        "gml_Script_draw_player",
        "gml_Script_swap_weapons",
        "gml_Script_blood_decal",
        "gml_Script_draw_weapon",
        "gml_Script_draw_reactor",
        "gml_Script_draw_objective",
        "gml_Script_draw_fire",
        "gml_Script_instance_place_list",
        "gml_Script_motion",
        "gml_Script_path_find",
        "gml_Script_use_reactor",
        "gml_Script_use_reactor_alt",
        "gml_Script_use_fire",
        "gml_Script_spawn_ragdoll",
        "gml_Script_spawn_ragdoll_dog",
        "gml_Script_init_screen",
        "gml_Script_init_particle",
        "gml_Object_oWallpaperFront_Alarm_0",
        "gml_Object_oWallpaper_Create_0",
        "gml_Object_oWallpaper_Alarm_0",
        "gml_Object_oWallpaper_Step_2",
        "gml_Object_oWallpaper_Other_5",
        "gml_Object_oWallpaper_Draw_0",
        "gml_Object_oB_Create_0",
        "gml_Object_oB_Destroy_0",
        "gml_Object_oB_Alarm_1",
        "gml_Object_oBDoor_Create_0",
        "gml_Object_oBDoor_Destroy_0",
        "gml_Object_oBDoor_Alarm_1",
        "gml_Object_oCrate1_Create_0",
        "gml_Object_oCrate1_Alarm_0",
        "gml_Object_oCrate1_Step_2",
        "gml_Object_oCrate1_Draw_0",
        "gml_Object_oCrate2_Create_0",
        "gml_Object_oCrate2_Alarm_0",
        "gml_Object_oGround1_Create_0",
        "gml_Object_oGround1_Alarm_1",
        "gml_Object_oGround2_Create_0",
        "gml_Object_oGround2_Alarm_1",
        "gml_Object_oDock_Create_0",
        "gml_Object_oDock_Alarm_1",
        "gml_Object_oBalcony1_Create_0",
        "gml_Object_oBalcony1_Alarm_1",
        "gml_Object_oBalcony2_Create_0",
        "gml_Object_oBalcony2_Alarm_1",
        "gml_Object_oCranePath1_Create_0",
        "gml_Object_oCranePath1_Alarm_1",
        "gml_Object_oStair1_Create_0",
        "gml_Object_oStair1_Alarm_1",
        "gml_Object_oLadder1_Create_0",
        "gml_Object_oElevator1Button_Create_0",
        "gml_Object_oElevator1Button_Step_2",
        "gml_Object_oElevatorDoor1_Create_0",
        "gml_Object_oElevatorDoor1_Step_2",
        "gml_Object_oElevatorDoor1_Draw_0",
        "gml_Object_oElevator1_Create_0",
        "gml_Object_oElevator1_Alarm_1",
        "gml_Object_oElevator1_Step_2",
        "gml_Object_oElevator1_Draw_73",
        "gml_Object_oElevator1_Draw_0",
        "gml_Object_oDoorElevator_Create_0",
        "gml_Object_oDoorElevator_Alarm_0",
        "gml_Object_oDoorElevator_Step_2",
        "gml_Object_oDoorElevator_Draw_0",
        "gml_Object_oDoor1_Create_0",
        "gml_Object_oDoor1_Alarm_0",
        "gml_Object_oDoor1_Step_2",
        "gml_Object_oDoor1_Other_5",
        "gml_Object_oDoor1_Draw_0",
        "gml_Object_oDoor2_Create_0",
        "gml_Object_oDoor2_Alarm_0",
        "gml_Object_oDoor2_Step_2",
        "gml_Object_oDoor2_Other_5",
        "gml_Object_oDoor2_Draw_0",
        "gml_Object_oDoor3_Create_0",
        "gml_Object_oDoor3_Alarm_0",
        "gml_Object_oDoor3_Step_2",
        "gml_Object_oDoor3_Draw_0",
        "gml_Object_oDoor4_Create_0",
        "gml_Object_oDoor4_Alarm_0",
        "gml_Object_oDoor4_Step_2",
        "gml_Object_oDoor4_Other_5",
        "gml_Object_oDoor4_Draw_0",
        "gml_Object_oStairwell1_Create_0",
        "gml_Object_oStairwell1_Alarm_1",
        "gml_Object_oStairwell1_Alarm_0",
        "gml_Object_oStairwell1_Step_2",
        "gml_Object_oStairwell1_Draw_0",
        "gml_Object_oZomb1_Create_0",
        "gml_Object_oZomb1_Destroy_0",
        "gml_Object_oZomb1_Alarm_11",
        "gml_Object_oZomb1_Alarm_0",
        "gml_Object_oZomb1_Step_2",
        "gml_Object_oZomb1_Step_1",
        "gml_Object_oZomb1_Draw_0",
        "gml_Object_oZomb2_Create_0",
        "gml_Object_oZomb2_Destroy_0",
        "gml_Object_oZomb2_Alarm_11",
        "gml_Object_oZomb2_Alarm_0",
        "gml_Object_oZomb2_Step_2",
        "gml_Object_oZomb2_Step_1",
        "gml_Object_oZomb2_Draw_0",
        "gml_Object_oZomb3_Create_0",
        "gml_Object_oZomb3_Destroy_0",
        "gml_Object_oZomb3_Alarm_11",
        "gml_Object_oZomb3_Alarm_0",
        "gml_Object_oZomb3_Step_2",
        "gml_Object_oZomb3_Step_1",
        "gml_Object_oZomb3_Draw_0",
        "gml_Object_oZomb4_Create_0",
        "gml_Object_oZomb4_Destroy_0",
        "gml_Object_oZomb4_Alarm_11",
        "gml_Object_oZomb4_Alarm_0",
        "gml_Object_oZomb4_Step_2",
        "gml_Object_oZomb4_Step_1",
        "gml_Object_oZomb4_Draw_0",
        "gml_Object_oZombBoss2_Create_0",
        "gml_Object_oZombBoss2_Destroy_0",
        "gml_Object_oZombBoss2_Alarm_11",
        "gml_Object_oZombBoss2_Alarm_0",
        "gml_Object_oZombBoss2_Step_2",
        "gml_Object_oZombBoss2_Step_1",
        "gml_Object_oZombBoss2_Draw_0",
        "gml_Object_oDog1_Create_0",
        "gml_Object_oDog1_Destroy_0",
        "gml_Object_oDog1_Alarm_11",
        "gml_Object_oDog1_Alarm_1",
        "gml_Object_oDog1_Alarm_0",
        "gml_Object_oDog1_Step_2",
        "gml_Object_oDog1_Step_1",
        "gml_Object_oDog1_Draw_0",
        "gml_Object_oZomb3Head_Create_0",
        "gml_Object_oZomb3Head_Alarm_0",
        "gml_Object_oZomb3Head_Step_2",
        "gml_Object_oZomb3Head_Other_7",
        "gml_Object_oZomb3Head_Draw_0",
        "gml_Object_oZombCamera_Create_0",
        "gml_Object_oZombCamera_Alarm_0",
        "gml_Object_oZombCameraHead_Create_0",
        "gml_Object_oZombCameraHead_Alarm_1",
        "gml_Object_oZombCameraHead_Alarm_0",
        "gml_Object_oZombCameraHead_Step_2",
        "gml_Object_oZombCameraHead_Other_7",
        "gml_Object_oZombCameraHead_Draw_73",
        "gml_Object_oZombCameraHead_Draw_0",
        "gml_Object_oRope_Create_0",
        "gml_Object_oRope_Alarm_0",
        "gml_Object_oRope_Collision_402",
        "gml_Object_oRope_Collision_34",
        "gml_Object_oRope_Draw_0",
        "gml_Object_oZombBoss1Spawn_Create_0",
        "gml_Object_oZombBoss1Spawn_Alarm_0",
        "gml_Object_oZombBoss1Spawn_Step_2",
        "gml_Object_oZombBoss1Spawn_Other_7",
        "gml_Object_oZombBoss1_Create_0",
        "gml_Object_oZombBoss1_Destroy_0",
        "gml_Object_oZombBoss1_Alarm_11",
        "gml_Object_oZombBoss1_Alarm_0",
        "gml_Object_oZombBoss1_Step_2",
        "gml_Object_oZombBoss1_Step_1",
        "gml_Object_oZombBoss1_Draw_0",
        "gml_Object_oVamp2_Create_0",
        "gml_Object_oVamp2_Destroy_0",
        "gml_Object_oVamp2_Alarm_11",
        "gml_Object_oVamp2_Alarm_0",
        "gml_Object_oVamp2_Step_2",
        "gml_Object_oVamp2_Step_1",
        "gml_Object_oVamp2_Draw_0",
        "gml_Object_oVamp1_Create_0",
        "gml_Object_oVamp1_Destroy_0",
        "gml_Object_oVamp1_Alarm_11",
        "gml_Object_oVamp1_Alarm_0",
        "gml_Object_oVamp1_Step_2",
        "gml_Object_oVamp1_Step_1",
        "gml_Object_oVamp1_Draw_0",
        "gml_Object_oVamp3_Create_0",
        "gml_Object_oVamp3_Destroy_0",
        "gml_Object_oVamp3_Alarm_11",
        "gml_Object_oVamp3_Alarm_0",
        "gml_Object_oVamp3_Step_2",
        "gml_Object_oVamp3_Step_1",
        "gml_Object_oVamp3_Draw_0",
        "gml_Object_oVampBoss2_Create_0",
        "gml_Object_oVampBoss2_Destroy_0",
        "gml_Object_oVampBoss2_Alarm_11",
        "gml_Object_oVampBoss2_Alarm_0",
        "gml_Object_oVampBoss2_Step_2",
        "gml_Object_oVampBoss2_Step_1",
        "gml_Object_oVampBoss2_Draw_0",
        "gml_Object_oVampBoss11_Create_0",
        "gml_Object_oVampBoss11_Destroy_0",
        "gml_Object_oVampBoss11_Alarm_11",
        "gml_Object_oVampBoss11_Alarm_0",
        "gml_Object_oVampBoss11_Step_2",
        "gml_Object_oVampBoss11_Step_1",
        "gml_Object_oVampBoss11_Draw_73",
        "gml_Object_oVampBoss11_Draw_0",
        "gml_Object_oVampBoss12_Create_0",
        "gml_Object_oVampBoss12_Destroy_0",
        "gml_Object_oVampBoss12_Alarm_11",
        "gml_Object_oVampBoss12_Alarm_0",
        "gml_Object_oVampBoss12_Step_2",
        "gml_Object_oVampBoss12_Step_1",
        "gml_Object_oVampBoss12_Draw_73",
        "gml_Object_oVampBoss12_Draw_0",
        "gml_Object_oVamp4_Create_0",
        "gml_Object_oVamp4_Destroy_0",
        "gml_Object_oVamp4_Alarm_11",
        "gml_Object_oVamp4_Alarm_0",
        "gml_Object_oVamp4_Step_2",
        "gml_Object_oVamp4_Step_1",
        "gml_Object_oVamp4_Draw_0",
        "gml_Object_oVamp3Body_Create_0",
        "gml_Object_oVamp3Body_Step_2",
        "gml_Object_oVamp3Body_Other_7",
        "gml_Object_oVamp3Body_Draw_73",
        "gml_Object_oVamp3Body_Draw_0",
        "gml_Object_oVampBoss11Body_Create_0",
        "gml_Object_oVampBoss12Body_Create_0",
        "gml_Object_oVampBoss2Body_Create_0",
        "gml_Object_oVampBoss2Body_Destroy_0",
        "gml_Object_oVampBoss2Body_Step_2",
        "gml_Object_oVamp3Gem_Create_0",
        "gml_Object_oVamp3Gem_Step_2",
        "gml_Object_oVamp3Gem_Draw_73",
        "gml_Object_oVamp3Gem_Draw_0",
        "gml_Object_oVampBoss2Gem_Create_0",
        "gml_Object_oVampBoss2Gem_Destroy_0",
        "gml_Object_oVampBoss2Gem_Step_2",
        "gml_Object_oVampBoss2Gem_Draw_73",
        "gml_Object_oVampBoss2Gem_Draw_0",
        "gml_Object_oEmote_Create_0",
        "gml_Object_oEmote_Alarm_0",
        "gml_Object_oEmote_Step_2",
        "gml_Object_oEmote_Other_7",
        "gml_Object_oEmoteStun_Create_0",
        "gml_Object_oEmoteStun_Alarm_0",
        "gml_Object_oEmoteStun_Step_2",
        "gml_Object_oEmoteStun_Other_7",
        "gml_Object_oEmoteStun_Draw_0",
        "gml_Object_oGhost_Create_0",
        "gml_Object_oGhost_Step_2",
        "gml_Object_oGhost_Draw_73",
        "gml_Object_oSkeleBoss1_Create_0",
        "gml_Object_oSkeleBoss1_Step_0",
        "gml_Object_oSkeleBoss2_Create_0",
        "gml_Object_oSkeleBoss2_Destroy_0",
        "gml_Object_oSkeleBoss2_Alarm_11",
        "gml_Object_oSkeleBoss2_Alarm_1",
        "gml_Object_oSkeleBoss2_Alarm_0",
        "gml_Object_oSkeleBoss2_Step_2",
        "gml_Object_oSkeleBoss2_Step_1",
        "gml_Object_oSkeleBoss2_Draw_0",
        "gml_Object_oSkeleBoss2Dying_Create_0",
        "gml_Object_oSkeleBoss2Dying_Destroy_0",
        "gml_Object_oSkeleBoss2Dying_Alarm_11",
        "gml_Object_oSkeleBoss2Dying_Alarm_0",
        "gml_Object_oSkeleBoss2Dying_Step_2",
        "gml_Object_oSkeleBoss2Dying_Step_1",
        "gml_Object_oSkeleBoss2Dying_Draw_0",
        "gml_Object_oSkeleBoss2Body_Create_0",
        "gml_Object_oSkeleBoss2Body_Other_7",
        "gml_Object_oTotem1_Create_0",
        "gml_Object_oTotem1_Step_2",
        "gml_Object_oTotem1_Other_10",
        "gml_Object_oTotem1_Other_5",
        "gml_Object_oTotem1_Draw_0",
        "gml_Object_oSkele1_Create_0",
        "gml_Object_oSkele1_Destroy_0",
        "gml_Object_oSkele1_Alarm_11",
        "gml_Object_oSkele1_Alarm_0",
        "gml_Object_oSkele1_Step_2",
        "gml_Object_oSkele1_Step_1",
        "gml_Object_oSkele1_Draw_0",
        "gml_Object_oSkele2_Create_0",
        "gml_Object_oSkele2_Destroy_0",
        "gml_Object_oSkele2_Alarm_11",
        "gml_Object_oSkele2_Alarm_0",
        "gml_Object_oSkele2_Step_2",
        "gml_Object_oSkele2_Step_1",
        "gml_Object_oSkele2_Draw_0",
        "gml_Object_oSkele5_Create_0",
        "gml_Object_oSkele5_Destroy_0",
        "gml_Object_oSkele5_Alarm_11",
        "gml_Object_oSkele5_Alarm_0",
        "gml_Object_oSkele5_Step_2",
        "gml_Object_oSkele5_Step_1",
        "gml_Object_oSkele5_Other_5",
        "gml_Object_oSkele5_Draw_0",
        "gml_Object_oSkele3_Create_0",
        "gml_Object_oSkele3_Destroy_0",
        "gml_Object_oSkele3_Alarm_11",
        "gml_Object_oSkele3_Alarm_0",
        "gml_Object_oSkele3_Step_2",
        "gml_Object_oSkele3_Step_1",
        "gml_Object_oSkele3_Draw_0",
        "gml_Object_oSkele4_Create_0",
        "gml_Object_oSkele4_Step_2",
        "gml_Object_oOni1_Create_0",
        "gml_Object_oOni1_Destroy_0",
        "gml_Object_oOni1_Alarm_11",
        "gml_Object_oOni1_Alarm_0",
        "gml_Object_oOni1_Step_2",
        "gml_Object_oOni1_Step_1",
        "gml_Object_oOni1_Draw_0",
        "gml_Object_oOni2_Create_0",
        "gml_Object_oOni2_Destroy_0",
        "gml_Object_oOni2_Alarm_11",
        "gml_Object_oOni2_Alarm_10",
        "gml_Object_oOni2_Alarm_0",
        "gml_Object_oOni2_Step_2",
        "gml_Object_oOni2_Step_1",
        "gml_Object_oOni2_Draw_0",
        "gml_Object_oOniBoss1_Create_0",
        "gml_Object_oOniBoss1_Step_2",
        "gml_Object_oOniBoss1_Other_7",
        "gml_Object_oOni3_Create_0",
        "gml_Object_oOni3_Destroy_0",
        "gml_Object_oOni3_Alarm_11",
        "gml_Object_oOni3_Alarm_0",
        "gml_Object_oOni3_Step_2",
        "gml_Object_oOni3_Step_1",
        "gml_Object_oOni3_Draw_0",
        "gml_Object_oTrapGrenade_Create_0",
        "gml_Object_oTrapGrenade_Alarm_0",
        "gml_Object_oTrapGrenade_Step_2",
        "gml_Object_oTrapGrenade_Draw_0",
        "gml_Object_oTrapReactor_Create_0",
        "gml_Object_oTrapReactor_Alarm_1",
        "gml_Object_oTrapReactor_Alarm_0",
        "gml_Object_oTrapReactor_Step_0",
        "gml_Object_oTrapReactor_Draw_73",
        "gml_Object_oTrapReactor_Draw_0",
        "gml_Object_oTrapPlate_Create_0",
        "gml_Object_oTrapPlate_Alarm_1",
        "gml_Object_oTrapPlate_Step_2",
        "gml_Object_oTrapPlate_Draw_0",
        "gml_Object_oTrapShotgun_Create_0",
        "gml_Object_oTrapShotgun_Step_2",
        "gml_Object_oTrapShotgun_Other_7",
        "gml_Object_oSniperEnemy_Create_0",
        "gml_Object_oSniperEnemy_Alarm_1",
        "gml_Object_oSniperEnemy_Alarm_0",
        "gml_Object_oSniperEnemy_Step_2",
        "gml_Object_oSniperEnemy_Other_10",
        "gml_Object_oSniperEnemy_Draw_0",
        "gml_Object_oCar3_Create_0",
        "gml_Object_oCar3_Step_2",
        "gml_Object_oCar3_Step_1",
        "gml_Object_oCar3_Other_5",
        "gml_Object_oThreatenBody_Create_0",
        "gml_Object_oThreatenBody_Step_2",
        "gml_Object_oThreatenBody_Draw_0",
        "gml_Object_oDeadBody_Create_0",
        "gml_Object_oDeadBody_Alarm_0",
        "gml_Object_oDeadBody_Step_2",
        "gml_Object_oDeadBody_Other_7",
        "gml_Object_oKill_Create_0",
        "gml_Object_oKill_Step_2",
        "gml_Object_oDelaySpawn_Create_0",
        "gml_Object_oDelaySpawn_Step_2",
        "gml_Object_oGod_Create_0",
        "gml_Object_oGod_Step_2",
        "gml_Object_oGod_Draw_73",
        "gml_Object_oGod_Draw_0",
        "gml_Object_oRollBar_Step_2",
        "gml_Object_oRollBar_Draw_73",
        "gml_Object_oSnipePickup_Create_0",
        "gml_Object_oSnipePickup_Step_2",
        "gml_Object_oSnipePickup_Other_7",
        "gml_Object_oSnipePickup_Draw_0",
        "gml_Object_oSniperPlayer_Create_0",
        "gml_Object_oSniperPlayer_Alarm_1",
        "gml_Object_oSniperPlayer_Step_0",
        "gml_Object_oSniperPlayer_Mouse_53",
        "gml_Object_oSniperPlayer_Other_10",
        "gml_Object_oSniperPlayer_Other_5",
        "gml_Object_oSniperPlayer_Draw_73",
        "gml_Object_oSniperPlayer_Draw_0",
        "gml_Object_oSniperCredits_Create_0",
        "gml_Object_oSniperCredits_Step_0",
        "gml_Object_oSniperCredits_Mouse_53",
        "gml_Object_oSniperCredits_Other_10",
        "gml_Object_oSniperCredits_Draw_0",
        "gml_Object_oMeatPortal_Create_0",
        "gml_Object_oMeatPortal_Alarm_2",
        "gml_Object_oMeatPortal_Alarm_1",
        "gml_Object_oMeatPortal_Alarm_0",
        "gml_Object_oMeatPortal_Step_2",
        "gml_Object_oMeatPortal_Other_10",
        "gml_Object_oMeatPortal_Draw_73",
        "gml_Object_oMeatPortal_Draw_0",
        "gml_Object_oTimer_Create_0",
        "gml_Object_oTimer_Alarm_0",
        "gml_Object_oPortal_Create_0",
        "gml_Object_oKeycard_Create_0",
        "gml_Object_oKeycard_Step_2",
        "gml_Object_oKeycard_Collision_402",
        "gml_Object_oKeycard_Collision_396",
        "gml_Object_oKeycard_Draw_0",
        "gml_Object_oCassettePickup_Create_0",
        "gml_Object_oCassettePickup_Destroy_0",
        "gml_Object_oCassettePickup_Step_2",
        "gml_Object_oCassettePickup_Draw_0",
        "gml_Object_oCrateMeat_Create_0",
        "gml_Object_oCrateMeat_Alarm_0",
        "gml_Object_oCrateMeat_Step_2",
        "gml_Object_oCrateMeat_Draw_0",
        "gml_Object_oDeadReaper1_Create_0",
        "gml_Object_oDeadReaper1_Step_2",
        "gml_Object_oDeadReaper1_Draw_0",
        "gml_Object_oNotes_Create_0",
        "gml_Object_oNotes_Step_2",
        "gml_Object_oNotes_Draw_0",
        "gml_Object_oTarget_Create_0",
        "gml_Object_oTarget_Destroy_0",
        "gml_Object_oTarget_Step_2",
        "gml_Object_oLevelTrans_Create_0",
        "gml_Object_oLevelTrans_Step_2",
        "gml_Object_oLevelTrans_Draw_73",
        "gml_Object_oLevelEnd_Create_0",
        "gml_Object_oLevelEnd_Step_2",
        "gml_Object_oLevelEnd_Draw_73",
        "gml_Object_oCokeInspect_Create_0",
        "gml_Object_oCokeInspect_Step_2",
        "gml_Object_oCokeInspect_Other_10",
        "gml_Object_oCokeInspect_Draw_0",
        "gml_Object_oCarIbzan_Create_0",
        "gml_Object_oCarIbzan_Step_2",
        "gml_Object_oCarIbzan_Draw_0",
        "gml_Object_oSafe1_Create_0",
        "gml_Object_oSafe1_Step_2",
        "gml_Object_oSafe1_Other_7",
        "gml_Object_oSafe1_Draw_0",
        "gml_Object_oSafe2_Create_0",
        "gml_Object_oSafe2_Step_2",
        "gml_Object_oSafe2_Other_7",
        "gml_Object_oSafe2_Draw_0",
        "gml_Object_oP_Create_0",
        "gml_Object_oP_Destroy_0",
        "gml_Object_oP_Alarm_11",
        "gml_Object_oP_Alarm_10",
        "gml_Object_oP_Alarm_2",
        "gml_Object_oP_Step_2",
        "gml_Object_oP_Step_1",
        "gml_Object_oP_Draw_73",
        "gml_Object_oP_Draw_0",
        "gml_Object_oP_KeyPress_113",
        "gml_Object_oP_KeyPress_51",
        "gml_Object_oCokeBurn_Create_0",
        "gml_Object_oCokeBurn_Step_2",
        "gml_Object_oCokeBurn_Other_10",
        "gml_Object_oCokeBurn_Other_5",
        "gml_Object_oCokeBurn_Draw_0",
        "gml_Object_oPPipe_Create_0",
        "gml_Object_oPPipe_Step_0",
        "gml_Object_oPPipe_Draw_0",
        "gml_Object_oPControl_Create_0",
        "gml_Object_oPControl_Alarm_1",
        "gml_Object_oPControl_Step_2",
        "gml_Object_oPControl_Draw_73",
        "gml_Object_oPControl_Draw_0",
        "gml_Object_oPControl_KeyPress_27",
        "gml_Object_oCar_Create_0",
        "gml_Object_oCar_Step_2",
        "gml_Object_oCar_Mouse_53",
        "gml_Object_oCar_Other_5",
        "gml_Object_oCar_Draw_73",
        "gml_Object_oCar_Draw_0",
        "gml_Object_oLightGlow_Create_0",
        "gml_Object_oLightGlow_Draw_72",
        "gml_Object_oLightGlow_Draw_0",
        "gml_Object_oLightfixtureGarage_Create_0",
        "gml_Object_oLightfixtureGarage_Step_2",
        "gml_Object_oLightDynamic_Create_0",
        "gml_Object_oLightDynamic_Destroy_0",
        "gml_Object_oLightDynamic_Step_2",
        "gml_Object_oLightDynamic_Other_5",
        "gml_Object_oLightDynamic_Draw_0",
        "gml_Object_oLightDynamicAdd_Create_0",
        "gml_Object_oLightDynamicAdd_Destroy_0",
        "gml_Object_oLightDynamicAdd_Step_2",
        "gml_Object_oLightDynamicAdd_Other_5",
        "gml_Object_oLightDynamicAdd_Draw_0",
        "gml_Object_oLightStrip_Create_0",
        "gml_Object_oLightStrip_Step_2",
        "gml_Object_oLightStrip_Draw_0",
        "gml_Object_oLightFlash_Create_0",
        "gml_Object_oLightFlash_Alarm_0",
        "gml_Object_oLightFlash_Draw_0",
        "gml_Object_oLightFade_Create_0",
        "gml_Object_oLightFade_Step_2",
        "gml_Object_oLightFade_Draw_0",
        "gml_Object_pLight_Create_0",
        "gml_Object_pLightAdd_Create_0",
        "gml_Object_oLighting_Create_0",
        "gml_Object_oLighting_Alarm_0",
        "gml_Object_oLighting_Step_2",
        "gml_Object_oLighting_Other_5",
        "gml_Object_oLighting_Draw_0",
        "gml_Object_oSmallCandle1_Create_0",
        "gml_Object_oSmallCandle1_Alarm_0",
        "gml_Object_oSmallCandle1_Step_2",
        "gml_Object_oSmallCandle1_Draw_73",
        "gml_Object_oPendantLight1_Create_0",
        "gml_Object_oPendantLight1_Draw_73",
        "gml_Object_oPendantLight1_Draw_0",
        "gml_Object_oFloodLight1_Create_0",
        "gml_Object_oDimLight_Create_0",
        "gml_Object_oDimLight_Alarm_0",
        "gml_Object_oPartyLight_Create_0",
        "gml_Object_oPartyLight_Alarm_1",
        "gml_Object_oPartyLight_Alarm_0",
        "gml_Object_oLightpost1_Create_0",
        "gml_Object_oLightpost1_Step_2",
        "gml_Object_oLightpost1_Draw_73",
        "gml_Object_oLightpost1_Draw_0",
        "gml_Object_oLightpost2_Create_0",
        "gml_Object_oLightpost2_Step_2",
        "gml_Object_oLightpost2_Draw_73",
        "gml_Object_oLightpost2_Draw_0",
        "gml_Object_oWall_Create_0",
        "gml_Object_oWall_Destroy_0",
        "gml_Object_oWall_Alarm_0",
        "gml_Object_oWall_Step_2",
        "gml_Object_oWall_Other_5",
        "gml_Object_oWall_Draw_0",
        "gml_Object_oWarehouseLight1_Create_0",
        "gml_Object_oWarehouseLight1_Step_2",
        "gml_Object_oWarehouseLight1_Draw_73",
        "gml_Object_oWarehouseLight1_Draw_0",
        "gml_Object_oLightswitch1_Create_0",
        "gml_Object_oLightswitch1_Alarm_1",
        "gml_Object_oLightswitch1_Alarm_0",
        "gml_Object_oLightswitch1_Step_2",
        "gml_Object_oLightswitch1_Draw_0",
        "gml_Object_oLightfixture1_Create_0",
        "gml_Object_oLightfixture1_Step_2",
        "gml_Object_oLightfixture1_Draw_73",
        "gml_Object_oLightfixture2_Create_0",
        "gml_Object_oLightfixture2_Step_2",
        "gml_Object_oLightfixture2_Draw_73",
        "gml_Object_oLightfixture3_Create_0",
        "gml_Object_oLightfixture3_Step_2",
        "gml_Object_oLightfixture3_Draw_73",
        "gml_Object_oLightfixture4_Create_0",
        "gml_Object_oLightfixture4_Step_2",
        "gml_Object_oLightfixture4_Draw_73",
        "gml_Object_oLightfixture5_Create_0",
        "gml_Object_oLightfixture5_Step_2",
        "gml_Object_oLightfixture5_Draw_73",
        "gml_Object_oLightfixture6_Create_0",
        "gml_Object_oLightfixture6_Step_2",
        "gml_Object_oLightfixture6_Draw_73",
        "gml_Object_oConstructionLight1_Create_0",
        "gml_Object_oConstructionLight1_Step_2",
        "gml_Object_oConstructionLight1_Draw_73",
        "gml_Object_oConstructionLight2_Create_0",
        "gml_Object_oConstructionLight2_Step_2",
        "gml_Object_oConstructionLight2_Draw_73",
        "gml_Object_oDockLight_Create_0",
        "gml_Object_oDockLight_Step_2",
        "gml_Object_oDockLight_Draw_73",
        "gml_Object_oLampFloor1_Create_0",
        "gml_Object_oLampFloor1_Step_2",
        "gml_Object_oLampFloor1_Draw_73",
        "gml_Object_oStrobeLight_Create_0",
        "gml_Object_oStrobeLight_Alarm_1",
        "gml_Object_oStrobeLight_Step_2",
        "gml_Object_oStrobeLight_Draw_73",
        "gml_Object_oPartySpotlight_Create_0",
        "gml_Object_oPartySpotlight_Alarm_1",
        "gml_Object_oPartySpotlight_Step_2",
        "gml_Object_oPartySpotlight_Draw_73",
        "gml_Object_oPartySpotlight_Draw_0",
        "gml_Object_oXbow_Create_0",
        "gml_Object_oXbow_Collision_402",
        "gml_Object_oXbow_Draw_0",
        "gml_Object_oSPistol_Create_0",
        "gml_Object_oSPistol_Collision_2",
        "gml_Object_oSPistol_Draw_0",
        "gml_Object_oM16_Create_0",
        "gml_Object_oM16_Collision_402",
        "gml_Object_oM16_Draw_0",
        "gml_Object_oKnifeblock_Create_0",
        "gml_Object_oKnifeblock_Step_2",
        "gml_Object_oKnifeblock_Draw_0",
        "gml_Object_oKnife_Create_0",
        "gml_Object_oShuri_Create_0",
        "gml_Object_oArrow_Create_0",
        "gml_Object_oArrow_Step_2",
        "gml_Object_oHammer_Create_0",
        "gml_Object_oSledge_Create_0",
        "gml_Object_oSledge_Draw_0",
        "gml_Object_oScythe_Create_0",
        "gml_Object_oScythe_Draw_0",
        "gml_Object_oPistol_Create_0",
        "gml_Object_oPistol_Collision_2",
        "gml_Object_oPistol_Draw_0",
        "gml_Object_oPlasma_Create_0",
        "gml_Object_oPlasma_Collision_402",
        "gml_Object_oPlasma_Draw_0",
        "gml_Object_oGl_Create_0",
        "gml_Object_oGl_Collision_402",
        "gml_Object_oGl_Draw_0",
        "gml_Object_oAGl_Create_0",
        "gml_Object_oAGl_Collision_402",
        "gml_Object_oAGl_Draw_0",
        "gml_Object_oMine_Create_0",
        "gml_Object_oMine_Destroy_0",
        "gml_Object_oMine_Step_2",
        "gml_Object_oMine_Collision_402",
        "gml_Object_oMine_Draw_73",
        "gml_Object_oMine_Draw_0",
        "gml_Object_oMineDetonate_Create_0",
        "gml_Object_oMineDetonate_Step_2",
        "gml_Object_oMineDetonate_Collision_392",
        "gml_Object_oPPistol_Create_0",
        "gml_Object_oPPistol_Collision_2",
        "gml_Object_oPPistol_Draw_0",
        "gml_Object_oPistolBig_Create_0",
        "gml_Object_oPistolBig_Collision_2",
        "gml_Object_oPistolBig_Draw_0",
        "gml_Object_oPShotgun_Create_0",
        "gml_Object_oPShotgun_Collision_2",
        "gml_Object_oPShotgun_Draw_0",
        "gml_Object_oAShotgun_Create_0",
        "gml_Object_oAShotgun_Collision_402",
        "gml_Object_oAShotgun_Draw_0",
        "gml_Object_oSShotgun_Create_0",
        "gml_Object_oSShotgun_Collision_402",
        "gml_Object_oSShotgun_Draw_0",
        "gml_Object_oGrenade_Create_0",
        "gml_Object_oGrenade_Collision_402",
        "gml_Object_oGrenade_Draw_0",
        "gml_Object_oGrenadeActive_Create_0",
        "gml_Object_oGrenadeActive_Destroy_0",
        "gml_Object_oGrenadeActive_Collision_402",
        "gml_Object_oUzi_Create_0",
        "gml_Object_oUzi_Collision_2",
        "gml_Object_oUzi_Draw_0",
        "gml_Object_oP90_Create_0",
        "gml_Object_oP90_Collision_2",
        "gml_Object_oP90_Draw_0",
        "gml_Object_oSub_Create_0",
        "gml_Object_oSub_Collision_2",
        "gml_Object_oSub_Draw_0",
        "gml_Object_oAK_Create_0",
        "gml_Object_oAK_Collision_2",
        "gml_Object_oAK_Draw_0",
        "gml_Object_oRevolver_Create_0",
        "gml_Object_oRevolver_Collision_402",
        "gml_Object_oRevolver_Draw_0",
        "gml_Object_oRevolver1_Create_0",
        "gml_Object_oRevolver1_Collision_402",
        "gml_Object_oRevolver1_Draw_0",
        "gml_Object_oRevolver2_Create_0",
        "gml_Object_oRevolver2_Collision_402",
        "gml_Object_oRevolver2_Draw_0",
        "gml_Object_oRevolver3_Create_0",
        "gml_Object_oRevolver3_Collision_402",
        "gml_Object_oRevolver3_Draw_0",
        "gml_Object_oSawed_Create_0",
        "gml_Object_oSawed_Collision_402",
        "gml_Object_oSawed_Draw_0",
        "gml_Object_oBuss_Create_0",
        "gml_Object_oBuss_Collision_402",
        "gml_Object_oBuss_Draw_0",
        "gml_Object_oRifle_Create_0",
        "gml_Object_oRifle_Collision_402",
        "gml_Object_oRifle_Draw_0",
        "gml_Object_oCharon_Create_0",
        "gml_Object_oCharon_Step_2",
        "gml_Object_oCharon_Draw_0",
        "gml_Object_oBoat_Create_0",
        "gml_Object_oBoat_Step_2",
        "gml_Object_oBoat_Draw_0",
        "gml_Object_oCandlePlaceCassette_Create_0",
        "gml_Object_oCandlePlaceCassette_Step_2",
        "gml_Object_oCandlePlaceCassette_Other_7",
        "gml_Object_oCandleHang1_Create_0",
        "gml_Object_oCandleHang1_Step_2",
        "gml_Object_oCandleSnipers_Create_0",
        "gml_Object_oCandleSnipers_Step_2",
        "gml_Object_oCandleIdle1_Create_0",
        "gml_Object_oCandleIdle1_Step_2",
        "gml_Object_oCandleWarning_Create_0",
        "gml_Object_oCandleWarning_Step_2",
        "gml_Object_oCandlePray_Create_0",
        "gml_Object_oCat_Create_0",
        "gml_Object_oCat_Alarm_0",
        "gml_Object_oCat_Step_2",
        "gml_Object_oCat_Other_7",
        "gml_Object_oAptLamp_Create_0",
        "gml_Object_oAptLamp_Step_2",
        "gml_Object_oAptLamp_Draw_0",
        "gml_Object_oAptChand_Create_0",
        "gml_Object_oAptChand_Step_2",
        "gml_Object_oAptChand_Draw_0",
        "gml_Object_oFireplace_Create_0",
        "gml_Object_oFireplace_Step_2",
        "gml_Object_oFireplace_Other_5",
        "gml_Object_oFireplace_Other_4",
        "gml_Object_oFireplace_Draw_0",
        "gml_Object_oAptWindows_Create_0",
        "gml_Object_oAptTable_Create_0",
        "gml_Object_oAptTable_Step_2",
        "gml_Object_oAptTable_Other_7",
        "gml_Object_oAptTable_Draw_0",
        "gml_Object_oAptBedside_Create_0",
        "gml_Object_oAptBedside_Step_2",
        "gml_Object_oAptBedside_Draw_0",
        "gml_Object_oAptRecord_Create_0",
        "gml_Object_oAptRecord_Step_2",
        "gml_Object_oAptRecord_Other_5",
        "gml_Object_oAptRecord_Draw_0",
        "gml_Object_oAptChair_Create_0",
        "gml_Object_oAptChair_Alarm_1",
        "gml_Object_oAptChair_Alarm_0",
        "gml_Object_oAptChair_Step_2",
        "gml_Object_oAptChair_Other_7",
        "gml_Object_oAptChair_Draw_0",
        "gml_Object_oAptChair2_Create_0",
        "gml_Object_oAptChair2_Alarm_1",
        "gml_Object_oAptChair2_Alarm_0",
        "gml_Object_oAptChair2_Step_2",
        "gml_Object_oAptChair2_Other_7",
        "gml_Object_oAptChair2_Draw_0",
        "gml_Object_oAptStairwell_Create_0",
        "gml_Object_oAptStairwell_Step_2",
        "gml_Object_oAptStairwell_Draw_0",
        "gml_Object_oAptRack_Create_0",
        "gml_Object_oAptRack_Draw_0",
        "gml_Object_oAptCassette_Create_0",
        "gml_Object_oAptCassette_Alarm_0",
        "gml_Object_oAptCassette_Step_2",
        "gml_Object_oAptCassette_Other_7",
        "gml_Object_oAptCassette_Draw_0",
        "gml_Object_oAptBox_Create_0",
        "gml_Object_oAptBox_Draw_0",
        "gml_Object_oAptMirror_Create_0",
        "gml_Object_oAptBed_Create_0",
        "gml_Object_oAptFurniture_Create_0",
        "gml_Object_oRavenFeast_Create_0",
        "gml_Object_oRavenFeast_Alarm_0",
        "gml_Object_oRavenFeast_Step_2",
        "gml_Object_oRavenFeast_Other_0",
        "gml_Object_oRavenFly_Create_0",
        "gml_Object_oRavenFly_Step_2",
        "gml_Object_oRavenFly_Other_0",
        "gml_Object_oRaven_Create_0",
        "gml_Object_oRaven_Alarm_0",
        "gml_Object_oRaven_Step_2",
        "gml_Object_oDartboard_Create_0",
        "gml_Object_oDartboard_Draw_0",
        "gml_Object_oSnowSecret_Create_0",
        "gml_Object_oSnowSecret_Alarm_0",
        "gml_Object_oSnowSecret_Step_2",
        "gml_Object_oJukebox_Create_0",
        "gml_Object_oJukebox_Alarm_1",
        "gml_Object_oJukebox_Alarm_0",
        "gml_Object_oJukebox_Step_2",
        "gml_Object_oArch_Create_0",
        "gml_Object_oArch_Alarm_0",
        "gml_Object_oArch_Draw_0",
        "gml_Object_oChair1_Create_0",
        "gml_Object_oChair1_Step_2",
        "gml_Object_oSkeleBoss1Scrawl_Create_0",
        "gml_Object_oPhoto1_Create_0",
        "gml_Object_oPhoto1_Collision_370",
        "gml_Object_oExitSign_Create_0",
        "gml_Object_oExitSign_Alarm_0",
        "gml_Object_oBackDoor2_Create_0",
        "gml_Object_oMessVamp_Create_0",
        "gml_Object_oMessVamp_Draw_0",
        "gml_Object_oDeadVamp_Create_0",
        "gml_Object_oDeadVamp_Step_2",
        "gml_Object_oVamp1Asleep_Create_0",
        "gml_Object_oVamp2Asleep_Create_0",
        "gml_Object_oFirefly_Create_0",
        "gml_Object_oFirefly_Step_2",
        "gml_Object_oFirefly_Draw_73",
        "gml_Object_oWindowCut_Create_0",
        "gml_Object_oWindowCut_Alarm_0",
        "gml_Object_oWindowCut_Draw_0",
        "gml_Object_oBarTV1_Create_0",
        "gml_Object_oBarTV1_Alarm_0",
        "gml_Object_oBarShelf1_Create_0",
        "gml_Object_oBarShelf1_Alarm_0",
        "gml_Object_oBarShelf1_Other_10",
        "gml_Object_oBarShelf4_Create_0",
        "gml_Object_oBarSign1_Create_0",
        "gml_Object_oBarSign1_Alarm_0",
        "gml_Object_oBarSign1_Step_2",
        "gml_Object_oBarSign1_Other_10",
        "gml_Object_oWallBullet1_Create_0",
        "gml_Object_oMotelSign_Create_0",
        "gml_Object_oSign_Create_0",
        "gml_Object_oSign_Alarm_0",
        "gml_Object_oSign_Step_2",
        "gml_Object_oSign_Other_10",
        "gml_Object_oDogCage_Create_0",
        "gml_Object_oBarStool1_Create_0",
        "gml_Object_oMirror1_Create_0",
        "gml_Object_oMirror1_Alarm_0",
        "gml_Object_oMirror1_Step_2",
        "gml_Object_oMirror1_Other_5",
        "gml_Object_oMirror1_Draw_73",
        "gml_Object_oMirror1_Draw_0",
        "gml_Object_oMirror3_Create_0",
        "gml_Object_oPartyMirror1_Create_0",
        "gml_Object_oCoke1_Create_0",
        "gml_Object_oCoke1_Step_2",
        "gml_Object_oCoke1_Other_10",
        "gml_Object_oCoke1_Draw_0",
        "gml_Object_oPortalSign_Create_0",
        "gml_Object_oPortalSign_Step_2",
        "gml_Object_oPortalSign_Other_10",
        "gml_Object_oPortalSign_Draw_0",
        "gml_Object_oCokeVamp1_Create_0",
        "gml_Object_oCokeVamp1_Alarm_0",
        "gml_Object_oCokeVamp1_Step_2",
        "gml_Object_oCokeVamp1_Other_10",
        "gml_Object_oCokeVamp1_Draw_0",
        "gml_Object_oCoke2_Create_0",
        "gml_Object_oCoke2_Other_10",
        "gml_Object_oTutorial_Create_0",
        "gml_Object_oWindow3_Create_0",
        "gml_Object_oWindow4_Create_0",
        "gml_Object_oWindow5_Create_0",
        "gml_Object_oWindow6_Create_0",
        "gml_Object_oWindow7_Create_0",
        "gml_Object_oTable3_Create_0",
        "gml_Object_oTable4_Create_0",
        "gml_Object_oTable4_Alarm_0",
        "gml_Object_oFlower2_Create_0",
        "gml_Object_oCabinet1_Step_2",
        "gml_Object_oCabinetFront1_Step_2",
        "gml_Object_oCounter1_Step_2",
        "gml_Object_oCounterFront1_Step_2",
        "gml_Object_oCandleHolder_Create_0",
        "gml_Object_oCandleHolder_Alarm_0",
        "gml_Object_oCandleHolder_Draw_0",
        "gml_Object_oSewer_Create_0",
        "gml_Object_oSewer_Alarm_0",
        "gml_Object_oSewer_Other_7",
        "gml_Object_oSewer_Draw_0",
        "gml_Object_oCarCover_Create_0",
        "gml_Object_oArcade1_Create_0",
        "gml_Object_oArcade1_Alarm_1",
        "gml_Object_oArcade1_Alarm_0",
        "gml_Object_oCouch1_Create_0",
        "gml_Object_oCouch1_Alarm_0",
        "gml_Object_oCouch3_Create_0",
        "gml_Object_oCouch3_Alarm_0",
        "gml_Object_oBar1_Create_0",
        "gml_Object_oPoolTable1_Create_0",
        "gml_Object_oDrugTable_Create_0",
        "gml_Object_oBed1_Create_0",
        "gml_Object_oTable7_Create_0",
        "gml_Object_oTable8_Create_0",
        "gml_Object_oBed2_Create_0",
        "gml_Object_oBed3_Create_0",
        "gml_Object_oDrawer1_Create_0",
        "gml_Object_oPartyCouch1_Create_0",
        "gml_Object_oPartyCouch2_Create_0",
        "gml_Object_oPartyCouch3_Create_0",
        "gml_Object_oZombBoss1Cover_Create_0",
        "gml_Object_oZombBoss1Cover_Draw_0",
        "gml_Object_oBarChair1_Create_0",
        "gml_Object_oBarCouch1_Create_0",
        "gml_Object_oBarCouch1_Alarm_0",
        "gml_Object_oBarCouch2_Create_0",
        "gml_Object_oBarCouch2_Alarm_0",
        "gml_Object_oCouch2_Create_0",
        "gml_Object_oTV1_Create_0",
        "gml_Object_oTV2_Create_0",
        "gml_Object_oFridge1_Create_0",
        "gml_Object_oFridge1_Alarm_0",
        "gml_Object_oFridge1_Step_2",
        "gml_Object_oFridge1_Other_7",
        "gml_Object_oFilingCabinet1_Create_0",
        "gml_Object_oFilingCabinet1_Alarm_0",
        "gml_Object_oFilingCabinet1_Step_2",
        "gml_Object_oFilingCabinet1_Other_7",
        "gml_Object_oTable2_Create_0",
        "gml_Object_oTable2_Step_2",
        "gml_Object_oTable2_Other_7",
        "gml_Object_oPipeBlock1_Create_0",
        "gml_Object_oPipeBlock1_Step_2",
        "gml_Object_oPipeBlock1_Other_7",
        "gml_Object_oDetector1_Create_0",
        "gml_Object_oDetector1_Alarm_0",
        "gml_Object_oDetector1_Step_2",
        "gml_Object_oDetector1_Other_5",
        "gml_Object_oDetector1_Draw_0",
        "gml_Object_oPipe_Create_0",
        "gml_Object_oPipe_Alarm_0",
        "gml_Object_oPipe_Draw_72",
        "gml_Object_oVent1_Create_0",
        "gml_Object_oVent1_Draw_0",
        "gml_Object_oVent2_Create_0",
        "gml_Object_oVent2_Draw_0",
        "gml_Object_oVent3_Create_0",
        "gml_Object_oVent3_Draw_0",
        "gml_Object_oVent4_Create_0",
        "gml_Object_oVent4_Draw_0",
        "gml_Object_oToilet1_Create_0",
        "gml_Object_oToilet1_Draw_0",
        "gml_Object_oWell_Create_0",
        "gml_Object_oWell_Draw_0",
        "gml_Object_oBath1_Create_0",
        "gml_Object_oBath1_Draw_0",
        "gml_Object_oSink1_Create_0",
        "gml_Object_oSink1_Draw_0",
        "gml_Object_oBoombox1_Create_0",
        "gml_Object_oGramo_Create_0",
        "gml_Object_oBoombox2_Create_0",
        "gml_Object_oRadio1_Create_0",
        "gml_Object_oRadio2_Create_0",
        "gml_Object_oSpeaker1_Create_0",
        "gml_Object_oSpeaker2_Create_0",
        "gml_Object_oSpeaker3_Create_0",
        "gml_Object_oPA1_Create_0",
        "gml_Object_oPA2_Create_0",
        "gml_Object_oGiveSoul_Create_0",
        "gml_Object_oGiveSoul_Alarm_1",
        "gml_Object_oGiveSoul_Alarm_0",
        "gml_Object_oGiveSoul_Other_10",
        "gml_Object_oGiveSoul_Other_5",
        "gml_Object_oAchievementScreen_Create_0",
        "gml_Object_oAchievementScreen_Step_2",
        "gml_Object_oAchievementScreen_Draw_73",
        "gml_Object_oAchievement_Create_0",
        "gml_Object_oAchievement_Alarm_0",
        "gml_Object_oAchievement_Step_2",
        "gml_Object_oAchievement_Draw_73",
        "gml_Object_oTip_Create_0",
        "gml_Object_oTip_Alarm_0",
        "gml_Object_oTip_Draw_73",
        "gml_Object_oWhiteFlash_Create_0",
        "gml_Object_oWhiteFlash_Destroy_0",
        "gml_Object_oWhiteFlash_Step_2",
        "gml_Object_oWhiteFlash_Other_5",
        "gml_Object_oWhiteFlash_Draw_73",
        "gml_Object_oEndGame_Create_0",
        "gml_Object_oEndGame_Alarm_1",
        "gml_Object_oEndGame_Alarm_0",
        "gml_Object_oEndGame_Step_2",
        "gml_Object_oEndGame_Draw_0",
        "gml_Object_oSniper_Create_0",
        "gml_Object_oSniper_Step_2",
        "gml_Object_oSniper_Draw_73",
        "gml_Object_oSniper_KeyPress_81",
        "gml_Object_oSniperDot_Create_0",
        "gml_Object_oSniperDot_Alarm_1",
        "gml_Object_oSniperDot_Alarm_0",
        "gml_Object_oSniperDot_Step_2",
        "gml_Object_oSniperDot_Draw_0",
        "gml_Object_oCassette_Create_0",
        "gml_Object_oCassette_Destroy_0",
        "gml_Object_oCassette_Step_2",
        "gml_Object_oCassette_Other_10",
        "gml_Object_oCassette_Draw_0",
        "gml_Object_oLoadGame_Create_0",
        "gml_Object_oLoadGame_Step_0",
        "gml_Object_oLoadGame_Other_10",
        "gml_Object_oLoadGame_Draw_0",
        "gml_Object_oNewGame_Create_0",
        "gml_Object_oNewGame_Step_0",
        "gml_Object_oNewGame_Other_10",
        "gml_Object_oNewGame_Draw_0",
        "gml_Object_oCredits_Create_0",
        "gml_Object_oCredits_Step_0",
        "gml_Object_oCredits_Draw_77",
        "gml_Object_oCredits_Draw_73",
        "gml_Object_oCredits_Draw_0",
        "gml_Object_oCredits_KeyPress_27",
        "gml_Object_oLoadCustom_Create_0",
        "gml_Object_oLoadCustom_Step_0",
        "gml_Object_oLoadCustom_Other_69",
        "gml_Object_oLoadCustom_Other_10",
        "gml_Object_oLoadCustom_Other_5",
        "gml_Object_oLoadCustom_Draw_0",
        "gml_Object_oLoadRoom_Alarm_0",
        "gml_Object_oLoadRoom_Other_10",
        "gml_Object_oMain_Create_0",
        "gml_Object_oMain_Alarm_1",
        "gml_Object_oMain_Alarm_0",
        "gml_Object_oMain_Step_0",
        "gml_Object_oMain_Other_10",
        "gml_Object_oMain_Draw_0",
        "gml_Object_oLogo_Create_0",
        "gml_Object_oLogo_Step_2",
        "gml_Object_oLogo_Draw_0",
        "gml_Object_oPause_Create_0",
        "gml_Object_oPause_Destroy_0",
        "gml_Object_oPause_Step_2",
        "gml_Object_oPause_Other_10",
        "gml_Object_oPause_Draw_0",
        "gml_Object_oLockGame_Create_0",
        "gml_Object_oLockGame_Step_2",
        "gml_Object_oLockGame_Draw_73",
        "gml_Object_oNewWeapon_Create_0",
        "gml_Object_oNewWeapon_Destroy_0",
        "gml_Object_oNewWeapon_Alarm_0",
        "gml_Object_oNewWeapon_Draw_73",
        "gml_Object_oNewWeapon_Draw_0",
        "gml_Object_oUpgradeWeapon_Create_0",
        "gml_Object_oUpgradeWeapon_Destroy_0",
        "gml_Object_oUpgradeWeapon_Alarm_0",
        "gml_Object_oUpgradeWeapon_Draw_73",
        "gml_Object_oUpgradeWeapon_Draw_0",
        "gml_Object_oUpgrade_Create_0",
        "gml_Object_oUpgrade_Destroy_0",
        "gml_Object_oUpgrade_Alarm_0",
        "gml_Object_oUpgrade_Step_2",
        "gml_Object_oUpgrade_Draw_73",
        "gml_Object_oUpgrade_Draw_0",
        "gml_Object_oUpgradeWeaponOld_Create_0",
        "gml_Object_oUpgradeWeaponOld_Draw_73",
        "gml_Object_oCutscene_Create_0",
        "gml_Object_oCutscene_Step_2",
        "gml_Object_oCutscene_Draw_73",
        "gml_Object_oCutsceneCustom_Create_0",
        "gml_Object_oCutsceneCustom_Alarm_0",
        "gml_Object_oCutsceneCustom_Step_2",
        "gml_Object_oCutsceneCustom_Draw_73",
        "gml_Object_oCutsceneSmall_Create_0",
        "gml_Object_oCutsceneSmall_Step_2",
        "gml_Object_oCutsceneSmall_Draw_73",
        "gml_Object_oMissionSelect_Create_0",
        "gml_Object_oMissionSelect_Alarm_2",
        "gml_Object_oMissionSelect_Alarm_1",
        "gml_Object_oMissionSelect_Alarm_0",
        "gml_Object_oMissionSelect_Step_0",
        "gml_Object_oMissionSelect_Draw_0",
        "gml_Object_oDialogueTree_Create_0",
        "gml_Object_oDialogueTree_Destroy_0",
        "gml_Object_oDialogueTree_Other_5",
        "gml_Object_oDialogueTree_Draw_0",
        "gml_Object_oAptControl_Create_0",
        "gml_Object_oAptControl_Alarm_0",
        "gml_Object_oAptControl_Step_2",
        "gml_Object_oAptControl_Draw_73",
        "gml_Object_oAptControl_Draw_0",
        "gml_Object_oStat_Create_0",
        "gml_Object_oStat_Alarm_0",
        "gml_Object_oStat_Step_2",
        "gml_Object_oStat_Other_5",
        "gml_Object_oStat_Draw_0",
        "gml_Object_oInit_Create_0",
        "gml_Object_oInit_Alarm_0",
        "gml_Object_oInit_Step_2",
        "gml_Object_oInit_Step_0",
        "gml_Object_oInit_Other_5",
        "gml_Object_oInit_Other_4",
        "gml_Object_oInit_Other_3",
        "gml_Object_oInit_Draw_73",
        "gml_Object_oInit_Draw_64",
        "gml_Object_oInit_Draw_0",
        "gml_Object_oInit_KeyPress_117",
        "gml_Object_oInit_KeyPress_116",
        "gml_Object_oStartTimer_Step_2",
        "gml_Object_oChangeRoom_Create_0",
        "gml_Object_oChangeRoom_Step_2",
        "gml_Object_oVoice_Create_0",
        "gml_Object_oVoice_Alarm_1",
        "gml_Object_oVoice_Alarm_0",
        "gml_Object_oEfFlare_Create_0",
        "gml_Object_oEfFlare_Alarm_0",
        "gml_Object_oEfFlare_Step_2",
        "gml_Object_oEfFlare_Draw_73",
        "gml_Object_oCokePerson_Create_0",
        "gml_Object_oCokePerson_Draw_0",
        "gml_Object_oExplosion_Create_0",
        "gml_Object_oExplosion_Destroy_0",
        "gml_Object_oExplosion_Alarm_1",
        "gml_Object_oExplosion_Alarm_0",
        "gml_Object_oExplosion_Other_10",
        "gml_Object_oWater_Create_0",
        "gml_Object_oWater_Step_2",
        "gml_Object_oWater_Draw_0",
        "gml_Object_oEfCircleFlash_Create_0",
        "gml_Object_oEfCircleFlash_Step_2",
        "gml_Object_oEfCircleFlash_Draw_73",
        "gml_Object_oSoulBall_Create_0",
        "gml_Object_oSoulBall_Alarm_0",
        "gml_Object_oSoulBall_Step_2",
        "gml_Object_oSoulBall_Collision_402",
        "gml_Object_oSoulBall_Draw_73",
        "gml_Object_oEfFirefly_Create_0",
        "gml_Object_oEfFirefly_Alarm_0",
        "gml_Object_oEfFirefly_Step_2",
        "gml_Object_oEfFirefly_Draw_73",
        "gml_Object_oFire_Create_0",
        "gml_Object_oFire_Alarm_0",
        "gml_Object_oFire_Step_2",
        "gml_Object_oEfSmokeSmall_Create_0",
        "gml_Object_oEfSmokeSmall_Alarm_0",
        "gml_Object_oEfSmokeSmall_Step_2",
        "gml_Object_oEfSmokeSmall_Collision_402",
        "gml_Object_oEfBulletRefund_Create_0",
        "gml_Object_oEfBulletRefund_Alarm_0",
        "gml_Object_oEfBulletRefund_Step_2",
        "gml_Object_oEfBubble_Create_0",
        "gml_Object_oEfBubble_Alarm_0",
        "gml_Object_oEfBubble_Step_2",
        "gml_Object_oSoul_Create_0",
        "gml_Object_oSoul_Step_2",
        "gml_Object_oBehind_Create_0",
        "gml_Object_oMask_Create_0",
        "gml_Object_oMask_Step_0",
        "gml_Object_oMask_Collision_398",
        "gml_Object_oMask_Draw_0",
        "gml_Object_oMaskReflect_Create_0",
        "gml_Object_oMaskReflect_Alarm_1",
        "gml_Object_oMaskReflect_Alarm_0",
        "gml_Object_oMaskReflect_Step_0",
        "gml_Object_oAlert_Create_0",
        "gml_Object_oAlert_Alarm_0",
        "gml_Object_oAlert_Step_2",
        "gml_Object_oAlert_Collision_401",
        "gml_Object_oAlert_Draw_0",
        "gml_Object_oAlertLocation_Create_0",
        "gml_Object_oAlertLocation_Alarm_0",
        "gml_Object_oAlertLocation_Step_2",
        "gml_Object_oAlertLocation_Collision_401",
        "gml_Object_oAlertLocation_Draw_0",
        "gml_Object_oFlash_Create_0",
        "gml_Object_oFlash_Alarm_0",
        "gml_Object_oFlash_Draw_0",
        "gml_Object_oEffect_Create_0",
        "gml_Object_oEffect_Step_2",
        "gml_Object_oEffect_Other_7",
        "gml_Object_oEffectAdd_Create_0",
        "gml_Object_oEffectAdd_Other_7",
        "gml_Object_oEffectAdd_Draw_73",
        "gml_Object_oDecal_Create_0",
        "gml_Object_oDecal_Step_2",
        "gml_Object_oDecal_Other_7",
        "gml_Object_pMusic_Create_0",
        "gml_Object_pMusic_Alarm_0",
        "gml_Object_pMusic_Other_10",
        "gml_Object_pVent_Other_7",
        "gml_Object_oBJumpthrough_Create_0",
        "gml_Object_oBJumpthrough_Alarm_1",
        "gml_Object_oBJumpthrough_Draw_0",
        "gml_Object_pWeapon_Create_0",
        "gml_Object_pWeapon_Alarm_1",
        "gml_Object_pWeapon_Step_2",
        "gml_Object_pWeapon_Step_1",
        "gml_Object_pWeapon_Collision_402",
        "gml_Object_pMelee_Create_0",
        "gml_Object_pMelee_Step_2",
        "gml_Object_pMelee_Step_1",
        "gml_Object_pMelee_Collision_402",
        "gml_Object_pMelee_Collision_398",
        "gml_Object_pMelee_Collision_396",
        "gml_Object_pMelee_Draw_0",
        "gml_Object_pReactor_Draw_0",
        "gml_Object_pBlood_Draw_0",
        "gml_Object_pFixture_Step_2",
        "gml_Object_pPhys_Create_0",
        "gml_Object_pPhys_Step_2",
        "gml_Object_pPhys_Collision_402",
        "gml_Object_pCover_Create_0",
        "gml_Object_pCover_Step_2",
        "gml_Object_pCover_Other_5",
        "gml_Object_pCover_Draw_0",
        "gml_Object_oPhysBlood_Create_0",
        "gml_Object_oPhysBlood_Alarm_0",
        "gml_Object_oPhysBlood_Step_2",
        "gml_Object_oPhysBlood_Collision_402",
        "gml_Object_oPhysBlood_Draw_0",
        "gml_Object_oPhysCasing_Create_0",
        "gml_Object_oPhysCasing_Alarm_0",
        "gml_Object_oPhysCasing_Collision_404",
        "gml_Object_oPhysCasing_Collision_402",
        "gml_Object_oPhysPoolBall_Create_0",
        "gml_Object_oPhysPoolBall_Collision_405",
        "gml_Object_oPhysPoolBall_Collision_402",
        "gml_Object_oPhysPoolBall_Collision_280",
        "gml_Object_oPhysHuman_Create_0",
        "gml_Object_oPhysHuman_Draw_73",
        "gml_Object_oPhysHuman_Draw_0",
        "gml_Object_oPhysDog_Create_0",
        "gml_Object_oPhysDog_Draw_0",
        "gml_Object_oPhysGlass_Create_0",
        "gml_Object_oPhysGlass_Alarm_0",
        "gml_Object_oPhysGlass_Collision_408",
        "gml_Object_oPhysGlass_Collision_402",
        "gml_Object_oPhysGlass_Collision_396",
        "gml_Object_oPhysGore_Create_0",
        "gml_Object_oPhysGore_Alarm_1",
        "gml_Object_oPhysGore_Alarm_0",
        "gml_Object_oPhysGore_Step_2",
        "gml_Object_oPhysGore_Collision_402",
        "gml_Object_oPhysCokeGore_Create_0",
        "gml_Object_oPhysCokeGore_Alarm_1",
        "gml_Object_oPhysCokeGore_Alarm_0",
        "gml_Object_oPhysCokeGore_Step_2",
        "gml_Object_oPhysCokeGore_Collision_402",
        "gml_Object_oPhysDebris_Create_0",
        "gml_Object_oPhysDebris_Alarm_0",
        "gml_Object_oPhysDebris_Collision_2",
        "gml_Object_oPhysSparks_Create_0",
        "gml_Object_oPhysSparks_Alarm_0",
        "gml_Object_oPhysSparks_Collision_402",
        "gml_Object_oPhysSparks_Draw_73",
        "gml_Object_oPhysSparks_Draw_0",
        "gml_Object_oPhysDebrisFlaming_Create_0",
        "gml_Object_oPhysDebrisFlaming_Alarm_1",
        "gml_Object_oPhysDebrisFlaming_Alarm_0",
        "gml_Object_oPhysDebrisFlaming_Step_2",
        "gml_Object_oPhysDebrisFlaming_Collision_402",
        "gml_Object_oPhysHead_Create_0",
        "gml_Object_oPhysHead_Step_2",
        "gml_Object_oPhysBody_Create_0",
        "gml_Object_oPhysBody_Destroy_0",
        "gml_Object_oPhysBody_Step_2",
        "gml_Object_oPhysUArm_Create_0",
        "gml_Object_oPhysDogBody_Create_0",
        "gml_Object_oPhysLArm_Create_0",
        "gml_Object_oPhysULeg_Create_0",
        "gml_Object_oPhysLLeg_Create_0",
        "gml_Object_pLogic_Create_0",
        "gml_Object_pLogic_Alarm_1",
        "gml_Object_pLogic_Alarm_0",
        "gml_Object_pLogic_Draw_0",
        "gml_Object_oCommandSpawn_Step_2",
        "gml_Object_oCommandCutscene_Create_0",
        "gml_Object_oCommandCutscene_Step_2",
        "gml_Object_oTriggerDelay_Create_0",
        "gml_Object_oTriggerDelay_Step_2",
        "gml_Object_oTriggerDestroy_Create_0",
        "gml_Object_oTriggerDestroy_Step_2",
        "gml_Object_oOven1_Create_0",
        "gml_Object_oOven1_Other_7",
        "gml_Object_oOven1_Draw_0",
        "gml_Object_oCableBox_Create_0",
        "gml_Object_oCableBox_Alarm_0",
        "gml_Object_oCableBox_Step_2",
        "gml_Object_oCableBox_Other_7",
        "gml_Object_oCableBox_Draw_0",
        "gml_Object_oManhole_Create_0",
        "gml_Object_oManhole_Draw_0",
        "gml_Object_oGenerator1_Create_0",
        "gml_Object_oGenerator1_Alarm_0",
        "gml_Object_oGenerator1_Step_2",
        "gml_Object_oGenerator1_Draw_0",
        "gml_Object_oMicrowave1_Create_0",
        "gml_Object_oMicrowave1_Alarm_1",
        "gml_Object_oMicrowave1_Alarm_0",
        "gml_Object_oMicrowave1_Step_2",
        "gml_Object_oMicrowave1_Draw_73",
        "gml_Object_oMicrowave1_Draw_0",
        "gml_Object_oStairHelp_Create_0",
        "gml_Object_oStairHelp_Alarm_0",
        "gml_Object_oStairHelp_Step_2",
        "gml_Object_oStairHelp_Draw_0",
        "gml_Object_oBPistol_Create_0",
        "gml_Object_oBPistol_Collision_2",
        "gml_Object_oBPistol_Draw_0",
        "gml_Object_oTommy_Create_0",
        "gml_Object_oTommy_Collision_2",
        "gml_Object_oTommy_Draw_0",
        "gml_Object_oPantry1_Create_0",
        "gml_Object_oPantry1_Step_2",
        "gml_Object_oPantry1_Draw_0",
        "gml_Object_oPantry1_KeyPress_69",
        "gml_Object_oBSlope2_Create_0",
        "gml_Object_oBSlope2_Alarm_1",
        "gml_Object_oBSlope2_Draw_0",
        "gml_Object_oBSlope1_Create_0",
        "gml_Object_oBSlope1_Alarm_1",
        "gml_Object_oBSlope1_Draw_0",
        "gml_Object_oBJumpT_Create_0",
        "gml_Object_oBJumpT_Alarm_1",
        "gml_Object_oBJumpT_Draw_0",
        "gml_Object_oBBullet_Create_0",
        "gml_Object_oBBullet_Destroy_0",
        "gml_Object_oBBullet_Alarm_1",
        "gml_Object_oBBullet_Draw_0",
        "gml_Object_oGrenade1_Destroy_0",
        "gml_Object_oGrenade1_Step_2",
        "gml_Object_oGrenade1_Collision_402",
        "gml_Object_oGrenade2_Create_0",
        "gml_Object_oGrenade2_Destroy_0",
        "gml_Object_oGrenade2_Alarm_0",
        "gml_Object_oGrenade2_Step_2",
        "gml_Object_oGrenade2_Collision_402",
        "gml_Object_oBullet1_Create_0",
        "gml_Object_oBullet1_Destroy_0",
        "gml_Object_oBullet1_Alarm_0",
        "gml_Object_oBullet1_Step_0",
        "gml_Object_oBullet1_Other_0",
        "gml_Object_oBullet1_Draw_77",
        "gml_Object_oBullet1_Draw_73",
        "gml_Object_oGlass_Create_0",
        "gml_Object_oGlass_Step_2",
        "Timeline_tl_test_0",
        "Timeline_tl_test_1",
        "Timeline_tl_test_2",
        "Timeline_tl_test_3",
        "Timeline_tl_test_4",
        "Timeline_tl_test_5",
        "Timeline_tl_lv1_2_1_0",
        "Timeline_tl_lv1_2_1_1",
        "Timeline_tl_lv1_2_1_2",
        "Timeline_tl_lv1_2_1_3",
        "Timeline_tl_intro_0",
        "Timeline_tl_intro_1",
        "Timeline_tl_first_mission_0",
        "Timeline_tl_first_mission_1",
        "Timeline_tl_warning_0",
        "Timeline_tl_warning_1",
        "Timeline_tl_lv1_4_1_0",
        "Timeline_tl_lv1_4_1_1",
        "Timeline_tl_lv1_4_1_2",
        "Timeline_tl_lv1_6_1_0",
        "Timeline_tl_lv1_6_1_1",
        "Timeline_tl_lv1_6_1_2",
        "Timeline_tl_lv1_6_1_3",
        "Timeline_tl_lv1_6_1_4",
        "Timeline_tl_lv1_7_1_0",
        "Timeline_tl_lv1_7_1_1",
        "Timeline_tl_lv1_7_1_2",
        "Timeline_tl_lv1_7_1_3",
        "Timeline_tl_lv1_8_1_0",
        "Timeline_tl_lv1_8_1_1",
        "Timeline_tl_lv1_8_1_2",
        "Timeline_tl_lv1_8_1_3",
        "Timeline_tl_lv1_10_1_0",
        "Timeline_tl_lv1_10_1_1",
        "Timeline_tl_lv1_10_1_2",
        "Timeline_tl_lv2_1_1_0",
        "Timeline_tl_lv2_1_1_1",
        "Timeline_tl_lv2_1_1_2",
        "Timeline_tl_lv2_1_1_3",
        "Timeline_tl_lv2_3_1_0",
        "Timeline_tl_lv2_3_1_1",
        "Timeline_tl_lv2_3_1_2",
        "Timeline_tl_lv2_4_1_0",
        "Timeline_tl_lv2_4_1_1",
        "Timeline_tl_lv2_4_1_2",
        "Timeline_tl_lv2_4_1_3",
        "Timeline_tl_lv2_5_1_0",
        "Timeline_tl_lv2_5_1_1",
        "Timeline_tl_lv2_5_1_2",
        "Timeline_tl_lv2_5_boss11_0",
        "Timeline_tl_lv2_5_boss11_1",
        "Timeline_tl_lv2_5_boss12_0",
        "Timeline_tl_lv2_5_boss12_1",
        "Timeline_tl_lv2_6_1_0",
        "Timeline_tl_lv2_6_1_1",
        "Timeline_tl_lv2_6_1_2",
        "Timeline_tl_lv2_6_1_3",
        "Timeline_tl_lv2_7_1_0",
        "Timeline_tl_lv2_7_1_1",
        "Timeline_tl_lv2_7_1_2",
        "Timeline_tl_lv3_1_1_0",
        "Timeline_tl_lv3_1_1_1",
        "Timeline_tl_lv3_1_1_2",
        "Timeline_tl_lv3_1_1_3",
        "Timeline_tl_lv3_4_1_0",
        "Timeline_tl_lv3_4_1_1",
        "Timeline_tl_lv3_4_1_2",
        "Timeline_tl_lv3_4_1_3",
        "Timeline_tl_lv3_5_1_0",
        "Timeline_tl_lv3_5_1_1",
        "Timeline_tl_lv3_5_1_2",
        "Timeline_tl_lv3_6_1_0",
        "Timeline_tl_lv3_6_1_1",
        "Timeline_tl_lv3_6_1_2",
        "Timeline_tl_lv3_6_1_3",
        "Timeline_tl_lv3_7_1_0",
        "Timeline_tl_lv3_7_1_1",
        "Timeline_tl_lv3_7_1_2",
        "Timeline_tl_lv3_7_1_3",
        "Timeline_tl_lv3_8_1_0",
        "Timeline_tl_lv3_8_1_1",
        "Timeline_tl_lv3_8_1_2",
        "Timeline_tl_lv3_8_2_0",
        "Timeline_tl_lv3_8_2_1",
        "Timeline_tl_lv3_8_2_2",
        "Timeline_tl_lv3_9_1_0",
        "Timeline_tl_lv3_9_1_1",
        "Timeline_tl_lv3_9_1_2",
        "Timeline_tl_lv3_9_1_3",
        "Timeline_tl_lv4_2_1_0",
        "Timeline_tl_lv4_2_1_1",
        "Timeline_tl_lv4_2_1_2",
        "Timeline_tl_lv4_2_2_0",
        "Timeline_tl_lv4_2_2_1",
        "Timeline_tl_lv4_2_2_2",
        "Timeline_tl_lv4_2_3_0",
        "Timeline_tl_lv4_2_3_1",
        "Timeline_tl_lv4_2_3_2",
        "Timeline_tl_lv4_2_4_0",
        "Timeline_tl_lv4_2_4_1",
        "Timeline_tl_lv4_2_4_2",
        "Timeline_timeline23_0",
        "Timeline_timeline23_1",
        "Timeline_timeline23_2",
        "gml_Room_rInit_Create",
        "gml_Room_rm_apt_Create",
        "gml_RoomCC_rm_apt_1497_Create",
        "gml_Room_rm_dock_Create",
        "gml_Script_FS_gmfilesystem_initialize_detail",
        "gml_Script__gmfilesystem_initialize",
        "gml_Script__guess_project_filename",
        "gml_Script__string_rpos",
        "gml_Script__buffer_save",
        "gml_Script__buffer_save_ext",
        "gml_Script__buffer_load",
        "gml_Script__buffer_load_ext",
        "gml_Script__background_add",
        "gml_Script__background_replace",
        "gml_Script__background_save",
        "gml_Script__background_save_adv",
        "gml_Script__d3d_model_load",
        "gml_Script__d3d_model_save",
        "gml_Script__screen_save",
        "gml_Script__screen_save_adv",
        "gml_Script__screen_save_part",
        "gml_Script__screen_save_part_adv",
        "gml_Script__sound_add",
        "gml_Script__sound_replace",
        "gml_Script__sprite_add",
        "gml_Script__sprite_replace",
        "gml_Script__sprite_save",
        "gml_Script__sprite_save_adv",
        "gml_Script__sprite_save_strip",
        "gml_Script__sprite_save_strip_adv",
        "gml_Script__std_load",
        "gml_Script__std_load_arg",
        "gml_Script__std_save",
        "gml_Script__std_save_arg",
        "gml_Script__surface_save",
        "gml_Script__surface_save_adv",
        "gml_Script__surface_save_part",
        "gml_Script__surface_save_part_adv"
    ]
}